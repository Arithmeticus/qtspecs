<?xml version="1.0" encoding='utf-8'?>
<project name="xpath-full-text" default="all" basedir=".">

<!-- Import a bunch of global property definitions -->
  <dirname property="etc.dir" file="../../etc/*"/>
  <import file="${etc.dir}/build-constants.xml"/>

<!-- Set properties for "this" document's build requirements -->
  <property name="generic-shortname" value="xpath-full-text"/>
  <property name="this-spec-version-code" value="10"/>
  <property name="xquery-version-code" value="30"/>
    <!-- The spec is actually based on XQuery 1.0 (and XPath 2.0),
         but xquery-version-code is only used to determine where to
	 find the grammar file, and we're now using the one in grammar-30.
    -->
  <property name="spec.code" value="FT"/>
  <property name="shortname" value="${generic-shortname}-${this-spec-version-code}"/>
  <property name="spec.uri" value="${W3C.TR}/${shortname}/"/>
  <property name="spec.xml" value="${src.dir}/${generic-shortname}.xml"/>

  <!-- 2008-09-03, Jim: The following property has no meaning at present,     -->
  <!--   because we do not build errata in the qtspecs tree. Maybe later...   -->
<!--  <property name="errata.xml" value="${src.dir}/${generic-shortname}-errata.xml"/> -->

  <dirname property="shared.grammar.dir" file="../grammar-${xquery-version-code}/*"/>
  <property name="spec.style" value="${shared.style.dir}/xmlspec-override.xsl"/>

<!-- Import target, etc. definitions that work globally -->
  <import file="${etc.dir}/build-impl.xml"/>

<!-- Recall that any targets defined herein override targets of the same name -->
<!--   that are defined in build-impl.xml.  If you cannot find a target of a  -->
<!--   given name in this file, look in build-impl.xml.                       -->

<!-- ======================================================================== -->

  <!-- additional properties -->

  <property name="grammar-file" value="${shared.grammar.dir}/xpath-grammar.xml"/>
  <property name="strip-grammar-file" value="${shared.grammar.dir}/parser/strip.xsl"/>
  <property name="assemble-spec-file" value="${local.style.dir}/assemble-fulltext.xsl"/>


  <target name="help">
    <echo message="This project to build ${shortname} includes a number of targets."/>
    <echo message="To invoke any of these targets from the command line, use 'ant target-name'"/>
    <echo message="  all -- the default target (target-name not required); builds 'everything'"/>
    <echo message="  chk.spec -- determines whether the spec HTML must be created"/>
    <echo message="  -style-spec -- transforms the document sources into near-pubrules-ready HTML (ordinary and diff docs)"/>
    <echo message="  copy-images -- copies from the local images directory to the distribution directory"/>
    <echo message="  -copy-xml -- creates final XML source file from assembled source file"/>
    <echo message="  namespacedoc -- Causes namespace doc to be created"/>
    <echo message="  chk.namespacedoc -- checks whether the namespace document must be built"/>
    <echo message="  style-namespacedoc -- transforms namespace document sources into XHTML and RDF namespace docs"/>
    <echo message="The targets that are most likely to be desired from the command line are 'all', '-stylespec' and 'namespacedoc'."/>
  </target>
<!-- ======================================================================== -->

  <!-- Overrides global template -->
  <target name="all"
          depends="clean, spec, namespacedoc"
          description="This is the default target. "/>

<!-- ======================================================================== -->

  <!-- Overrides global template -->
  <target name="chk.spec" depends="init">
<echo message="Target chk.spec starting"/>
    <condition property="spec.exists">
      <uptodate targetfile="${spec.html}">
         <srcfiles file="${base.dir}/build.xml"/>
         <srcfiles file="${etc.dir}/build-constants.xml"/>
         <srcfiles file="${etc.dir}/build-impl.xml"/>
         <srcfiles file="${etc.dir}/status-entities.dtd"/>
         <srcfiles file="${etc.dir}/status-general.xml"/>
         <srcfiles dir="${src.dir}" includes="**/*.xml"/>
         <srcfiles file="${grammar-file}"/>
         <srcfiles file="${strip-grammar-file}"/>
         <srcfiles file="${assemble-spec-file}"/>
         <srcfiles file="${spec.style}"/>
         <srcfiles file="${shared.style.dir}/assemble-spec.xsl"/>
         <srcfiles file="${shared.style.dir}/xmlspec-override.xsl"/>
         <srcfiles file="${shared.style.dir}/xmlspec.xsl"/>
         <srcfiles file="${shared.style.dir}/html-fix.xsl"/>
         <srcfiles file="${shared.style.dir}/identity.xsl"/>
         <srcfiles file="${shared.grammar.dir}/grammar.dtd"/>
         <srcfiles file="${shared.schema.dir}/xsl-query.dtd"/>
         <srcfiles file="${shared.schema.dir}/xmlspec.dtd"/>
         <srcfiles file="${shared.schema.dir}/elements.dtd"/>
         <srcfiles file="${shared.schema.dir}/tree-diagram.dtd"/>
      </uptodate>
    </condition>
  </target>

<!-- ======================================================================== -->

  <!-- Overrides global template -->
  <target name="-style-spec" depends="init,chk.spec,validate-spec"
          if="build.spec" unless="spec.exists">
<echo message="Target -style-spec starting"/>

  <!-- Creation of the temp grammar files is needed for assembling the        -->
  <!--   "complete" document, including grammar and extensions                -->
<echo message="Creating temp-xpath-grammar.xml"/>
    <xslt in="${grammar-file}" out="${build.dir}/temp-xpath-grammar.xml"
          style="${strip-grammar-file}" force="yes">
      <param name="spec1" expression="xpath20"/>
      <param name="spec2" expression="fulltext"/>
    </xslt>

<echo message="Creating temp-xquery-grammar.xml"/>
    <xslt in="${grammar-file}" out="${build.dir}/temp-xquery-grammar.xml"
          style="${strip-grammar-file}" force="yes">
      <param name="spec1" expression="xquery10"/>
      <param name="spec2" expression="fulltext"/>
    </xslt>

  <!-- The assembly step is used to bring together all of the source files    -->
  <!--   that are incorporated by using entity references, but also to        -->
  <!--   transform grammar-related productions into XML elements that can be  -->
  <!--   readily rendered into a form needed in the HTML document.            -->
<echo message="Creating ${shortname}.xml"/>
    <xslt in="${spec.xml}" out="${build.dir}/${shortname}.xml"
          style="${assemble-spec-file}" force="yes"
          classpathref="saxon9.classpath">
      <param name="grammar-file" expression="${build.dir}/temp-xquery-grammar.xml"/>
      <param name="not-spec" expression="xxpath"/>
      <param name="spec" expression="xquery"/>
    </xslt>

<echo message="Validating ${shortname}.xml"/>
    <xmlvalidate file="${build.dir}/${shortname}.xml" 
                 failonerror="yes" lenient="no" warn="yes"/>

<echo message="Transforming ${shortname}.xml"/>
    <xslt in="${build.dir}/${shortname}.xml"
          out="${build.dir}/${shortname}-html.html"
          style="${spec.style}" force="yes"
          classpathref="saxon9.classpath">
      <param name="spec" expression="full-text"/>
      <param name="kwFull" expression="brief"/>
      <param name="kwSort" expression="cluster"/>
      <param name="show-markup" expression="0"/>
    </xslt>

<!-- 2009-11-25, Jim: Added param to pass DSTAMP and TSTAMP properties -->
<echo message="Fixing up ${shortname}-html.html"/>
    <xslt in="${build.dir}/${shortname}-html.html"
          out="${spec.html}"
          style="${shared.style.dir}/html-fix.xsl"
          classpathref="saxon9.classpath" force="yes">
      <param name="currentDateTime" expression="${DSTAMP} ${TSTAMP}"/>
    </xslt>

<echo message="Transforming ${shortname}.xml with diffs"/>
    <xslt in="${build.dir}/${shortname}.xml"
          out="${build.dir}/${shortname}-diffs-html.html"
          style="${spec.style}" force="yes"
          classpathref="saxon9.classpath">
      <param name="spec" expression="full-text"/>
      <param name="kwFull" expression="brief"/>
      <param name="kwSort" expression="cluster"/>
      <param name="show-markup" expression="1"/>
    </xslt>

<!-- 2009-11-25, Jim: Added param to pass DSTAMP and TSTAMP properties -->
<echo message="Fixing up ${shortname}-diffs-html.html"/>
    <xslt in="${build.dir}/${shortname}-diffs-html.html"
          out="${spec.diffs.html}"
          style="${shared.style.dir}/html-fix.xsl"
          classpathref="saxon9.classpath" force="yes">
      <param name="currentDateTime" expression="${DSTAMP} ${TSTAMP}"/>
    </xslt>
  </target>

<!-- ======================================================================== -->

  <!-- Overrides global template -->
  <target name="copy-images" depends="init">
    <mkdir dir="${dist.dir}/images"/>
    <copy todir="${dist.dir}/images" flatten="true">
      <fileset dir="${local.images.dir}"/>
    </copy>
  </target>

<!-- ======================================================================== -->

  <!-- Overrides global template -->
  <target name="-copy-xml" depends="init,chk.spec"
          if="build.spec" unless="spec.exists">
    <echo message="Copying XML for ${shortname}..." />

    <xslt in="${build.dir}/${shortname}.xml"
          out="${dist.dir}/${shortname}.xml"
          style="${shared.style.dir}/identity.xsl" force="yes"
          classpathref="saxon9.classpath"/>
  </target>

<!-- ======================================================================== -->

  <target name="namespacedoc"
          depends="style-namespacedoc,init"/>

<!-- ======================================================================== -->

  <target name="chk.namespacedoc">

    <condition property="namespacedoc.exists">
      <uptodate targetfile="${dist.dir}/ns-${shortname}.html">
         <srcfiles file="${base.dir}/build.xml"/>
         <srcfiles file="${etc.dir}/build-constants.xml"/>
         <srcfiles file="${etc.dir}/build-impl.xml"/>
         <srcfiles file="${etc.dir}/status-entities.dtd"/>
         <srcfiles file="${etc.dir}/status-general.xml"/>
         <srcfiles file="${src.dir}/ns-${shortname}.xml"/>
         <srcfiles file="${shared.style.dir}/xsl-query.xsl"/>
         <srcfiles file="${shared.style.dir}/xmlspec.xsl"/>
         <srcfiles file="${shared.style.dir}/ns-blank.xsl"/>
         <srcfiles file="${shared.schema.dir}/xsl-query.dtd"/>
         <srcfiles file="${shared.schema.dir}/xmlspec.dtd"/>
         <srcfiles file="${shared.schema.dir}/elements.dtd"/>
         <srcfiles file="${shared.schema.dir}/tree-diagram.dtd"/>
         <srcfiles file="${shared.schema.dir}/qtnamespaces.dtd"/>
      </uptodate>
    </condition>

  </target>

<!-- ======================================================================== -->

  <target name="style-namespacedoc"
          depends="chk.namespacedoc,init"
          unless="namespacedoc.exists">
    <echo message="Building Full Text Namespace Doc ..." />

    <echo message="Transforming namespace XML source to HTML with RDDL"/>
    <xslt in="${src.dir}/ns-${shortname}.xml"
	        out="${build.dir}/ns-${shortname}.html"
	        style="${shared.style.dir}/ns-blank.xsl" force="yes"
	        classpathref="saxon9.classpath"/>

    <echo message="Generating RDF from HTML with RDDL"/>
    <xslt in="${build.dir}/ns-${shortname}.html"
	        out="${dist.dir}/ns-${shortname}.rdf"
	        style="${shared.style.dir}/qt-ns-grddl.xsl" force="yes"
	        classpathref="saxon9.classpath">
      <param name="doc" expression="http://www.w3.org/2007/xpath-full-text"/>
    </xslt>

    <echo message="Fixing up HTML namespace document by removing traces of RDDL"/>
    <xslt in="${build.dir}/ns-${shortname}.html"
	        out="${dist.dir}/ns-${shortname}.html"
	        style="${shared.style.dir}/html-namespace-fixup.xsl" force="yes"
	        classpathref="saxon9.classpath"/>

    <echo message="Fixing up RDDL namespace document to add xhtml namespace"/>
    <xslt in="${build.dir}/ns-${shortname}.html"
	        out="${dist.dir}/ns-${shortname}.xhtml"
	        style="${shared.style.dir}/rddl-namespace-fixup.xsl" force="yes"
	        classpathref="saxon9.classpath"/>

    <echo message="Tidy up the HTML file for pubrules"/>
    <exec executable="tidy">
      <arg value="--doctype"/>
      <arg value="transitional"/>
      <arg value="-utf8"/>
      <arg value="-mnq"/>
      <arg value="-asxml"/>
      <arg value="${dist.dir}/ns-${shortname}.html"/>
    </exec>

  </target>

</project>
