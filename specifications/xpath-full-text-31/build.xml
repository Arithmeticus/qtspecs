<?xml version="1.0" encoding='utf-8'?>
<project name="xpath-full-text-31" default="all" basedir=".">

<!-- Import a bunch of global property definitions -->
  <dirname property="etc.dir" file="../../etc/*"/>
  <import file="${etc.dir}/build-constants.xml"/>

<!-- Set properties for "this" document's build requirements -->
  <property name="generic-shortname" value="xpath-full-text"/>
  <property name="this-spec-version-code" value="31"/>
  <property name="xquery-version-code" value="30"/>
  <property name="spec.code" value="FT31"/>
  <property name="shortname" value="${generic-shortname}-${this-spec-version-code}"/>
  <property name="spec.uri" value="${W3C.TR}/${shortname}/"/>
  <property name="spec.xml" value="${src.dir}/${generic-shortname}.xml"/>

  <property name="namespace-name" value="xpath-full-text"/>

  <!-- 2008-09-03, Jim: The following property has no meaning at present,     -->
  <!--   because we do not build errata in the qtspecs tree. Maybe later...   -->
<!--  <property name="errata.xml" value="${src.dir}/${generic-shortname}-errata.xml"/> -->

  <dirname property="shared.grammar.dir" file="../grammar-${xquery-version-code}/*"/>
  <property name="spec.style" value="${shared.style.dir}/xmlspec-override.xsl"/>

<!-- Import target, etc. definitions that work globally -->
  <import file="${etc.dir}/build-impl.xml"/>

<!-- Recall that any targets defined herein override targets of the same name -->
<!--   that are defined in build-impl.xml.  If you cannot find a target of a  -->
<!--   given name in this file, look in build-impl.xml.                       -->

<!-- ======================================================================== -->

  <!-- additional properties -->

  <property name="grammar-file" value="${shared.grammar.dir}/xpath-grammar.xml"/>
  <property name="strip-grammar-file" value="${shared.grammar.dir}/parser/strip.xsl"/>
  <property name="assemble-spec-file" value="${local.style.dir}/assemble-fulltext.xsl"/>


  <target name="help">
    <echo message="This project to build ${shortname} includes a number of targets."/>
    <echo message="To invoke any of these targets from the command line, use 'ant target-name'"/>
    <echo message="  all -- the default target (target-name not required); builds 'everything'"/>
    <echo message="  chk.spec -- determines whether the spec HTML must be created"/>
    <echo message="  -style-spec -- transforms the document sources into near-pubrules-ready HTML (ordinary and diff docs)"/>
    <echo message="  copy-images -- copies from the local images directory to the distribution directory"/>
    <echo message="  -copy-xml -- creates final XML source file from assembled source file"/>
    <echo message="  namespacedocs -- Causes namespace doc to be created"/>
    <echo message="  chk.namespacedocs -- checks whether the namespace document must be built"/>
    <echo message="  stage -- stages the contents of the .../html/ directory for publication"/>
    <echo message="  stage-nsdocs -- stages the namespace document contents of the .../html/ directory for publication"/>
    <echo message="The targets that are most likely to be desired from the command line are 'all', '-stylespec' and 'namespacedocs'."/>
  </target>
<!-- ======================================================================== -->

  <!-- Overrides global template -->
  <target name="all"
          depends="clean, spec, namespacedocs"
          description="This is the default target. "/>

<!-- ======================================================================== -->

  <!-- Overrides global template -->
  <target name="chk.spec" depends="specinit">
<echo message="Target chk.spec starting"/>
    <condition property="spec.exists">
      <uptodate targetfile="${spec.html}">
         <srcfiles file="${base.dir}/build.xml"/>
         <srcfiles file="${etc.dir}/build-constants.xml"/>
         <srcfiles file="${etc.dir}/build-impl.xml"/>
         <srcfiles file="${etc.dir}/status-entities.dtd"/>
         <srcfiles file="${etc.dir}/status-general.xml"/>
         <srcfiles dir="${src.dir}" includes="**/*.xml"/>
         <srcfiles file="${grammar-file}"/>
         <srcfiles file="${strip-grammar-file}"/>
         <srcfiles file="${assemble-spec-file}"/>
         <srcfiles file="${spec.style}"/>
         <srcfiles file="${shared.style.dir}/assemble-spec.xsl"/>
         <srcfiles file="${shared.style.dir}/xmlspec-override.xsl"/>
         <srcfiles file="${shared.style.dir}/xmlspec.xsl"/>
         <srcfiles file="${shared.style.dir}/html-fix.xsl"/>
         <srcfiles file="${shared.style.dir}/identity.xsl"/>
         <srcfiles file="${shared.grammar.dir}/grammar.dtd"/>
         <srcfiles file="${shared.schema.dir}/xsl-query.dtd"/>
         <srcfiles file="${shared.schema.dir}/xmlspec.dtd"/>
         <srcfiles file="${shared.schema.dir}/elements.dtd"/>
         <srcfiles file="${shared.schema.dir}/tree-diagram.dtd"/>
      </uptodate>
    </condition>
  </target>

<!-- ======================================================================== -->

  <!-- Overrides global template -->
  <target name="-style-spec" depends="specinit,chk.spec,validate-spec"
          if="build.spec" unless="spec.exists">
<echo message="Target -style-spec starting"/>

  <!-- Creation of the temp grammar files is needed for assembling the        -->
  <!--   "complete" document, including grammar and extensions                -->
<echo message="Creating temp-xpath-grammar.xml"/>
    <xslt in="${grammar-file}" out="${build.dir}/temp-xpath-grammar.xml"
          style="${strip-grammar-file}" force="yes">
      <param name="spec1" expression="xpath31"/>
      <param name="spec2" expression="fulltext"/>
    </xslt>

<echo message="Creating temp-xquery-grammar.xml"/>
    <xslt in="${grammar-file}" out="${build.dir}/temp-xquery-grammar.xml"
          style="${strip-grammar-file}" force="yes">
      <param name="spec1" expression="xquery31"/>
      <param name="spec2" expression="fulltext"/>
    </xslt>

  <!-- The assembly step is used to bring together all of the source files    -->
  <!--   that are incorporated by using entity references, but also to        -->
  <!--   transform grammar-related productions into XML elements that can be  -->
  <!--   readily rendered into a form needed in the HTML document.            -->
<echo message="Creating ${shortname}.xml"/>
    <xslt in="${spec.xml}" out="${build.dir}/${shortname}.xml"
          style="${assemble-spec-file}" force="yes"
          classpathref="saxon9.classpath">
      <param name="grammar-file" expression="${build.dir}/temp-xquery-grammar.xml"/>
      <param name="not-spec" expression="xxpath"/>
      <param name="spec" expression="xquery"/>
    </xslt>

<echo message="Validating ${shortname}.xml"/>
    <xmlvalidate file="${build.dir}/${shortname}.xml" 
                 failonerror="yes" lenient="no" warn="yes"/>

<echo message="Transforming ${shortname}.xml"/>
    <xslt in="${build.dir}/${shortname}.xml"
          out="${build.dir}/${shortname}-html.html"
          style="${spec.style}" force="yes"
          classpathref="saxon9.classpath">
      <param name="spec" expression="full-text"/>
      <param name="kwFull" expression="brief"/>
      <param name="kwSort" expression="cluster"/>
      <param name="show-markup" expression="0"/>
    </xslt>

<!-- 2009-11-25, Jim: Added param to pass DSTAMP and TSTAMP properties -->
<echo message="Fixing up ${shortname}-html.html"/>
    <xslt in="${build.dir}/${shortname}-html.html"
          out="${spec.html}"
          style="${shared.style.dir}/html-fix.xsl"
          classpathref="saxon9.classpath" force="yes">
      <param name="currentDateTime" expression="${DSTAMP} ${TSTAMP}"/>
    </xslt>

<echo message="Transforming ${shortname}.xml with diffs"/>
    <xslt in="${build.dir}/${shortname}.xml"
          out="${build.dir}/${shortname}-diffs-html.html"
          style="${spec.style}" force="yes"
          classpathref="saxon9.classpath">
      <param name="spec" expression="full-text"/>
      <param name="kwFull" expression="brief"/>
      <param name="kwSort" expression="cluster"/>
      <param name="show-markup" expression="1"/>
    </xslt>

<!-- 2009-11-25, Jim: Added param to pass DSTAMP and TSTAMP properties -->
<echo message="Fixing up ${shortname}-diffs-html.html"/>
    <xslt in="${build.dir}/${shortname}-diffs-html.html"
          out="${spec.diffs.html}"
          style="${shared.style.dir}/html-fix.xsl"
          classpathref="saxon9.classpath" force="yes">
      <param name="currentDateTime" expression="${DSTAMP} ${TSTAMP}"/>
    </xslt>

    <copy file="${src.dir}/xpath-full-text-31-xqueryx.xsd"
          tofile="${dist.dir}/xpath-full-text-31-xqueryx.xsd"/>
    <copy file="${src.dir}/xpath-full-text-31-xqueryx.xsl"
          tofile="${dist.dir}/xpath-full-text-31-xqueryx.xsl"/>
    <copy file="${src.dir}/xpath-full-text-31-xqueryx-ftmatchoption-extensions.xsd"
          tofile="${dist.dir}/xpath-full-text-31-xqueryx-ftmatchoption-extensions.xsd"/>
  </target>

<!-- ======================================================================== -->

  <!-- Overrides global template -->
  <target name="copy-images" depends="specinit">
    <mkdir dir="${dist.dir}/images"/>
    <copy todir="${dist.dir}/images" flatten="true">
      <fileset dir="${local.images.dir}"/>
    </copy>
  </target>

<!-- ======================================================================== -->

  <!-- Overrides global template -->
  <target name="-copy-xml" depends="specinit,chk.spec"
          if="build.spec" unless="spec.exists">
    <echo message="Copying XML for ${shortname}..." />

    <xslt in="${build.dir}/${shortname}.xml"
          out="${dist.dir}/${shortname}.xml"
          style="${shared.style.dir}/identity.xsl" force="yes"
          classpathref="saxon9.classpath"/>
  </target>

<!-- ======================================================================== -->

  <!-- Overrides global template to check/build specific namespace documents  -->
  <target name="namespacedocs"
          depends="chk.namespacedocs, ns-xpath-full-text"/>

  <!-- Overrides global template to check/build specific namespace documents  -->
  <target name="chk.namespacedocs"
          depends="chk.ns-xpath-full-text"/>

<!-- ======================================================================== -->

  <target name="chk.ns-xpath-full-text">
    <condition property="ns-xpath-full-text.exists">
      <uptodate targetfile="${dist.dir}/ns-${namespace-name}.html">
         <srcfiles file="${base.dir}/build.xml"/>
         <srcfiles file="${etc.dir}/build-constants.xml"/>
         <srcfiles file="${etc.dir}/build-impl.xml"/>
         <srcfiles file="${etc.dir}/status-entities.dtd"/>
         <srcfiles file="${etc.dir}/status-general.xml"/>
         <srcfiles file="${src.dir}/ns-xpath-full-text.xml"/>
         <srcfiles file="${shared.style.dir}/xsl-query.xsl"/>
         <srcfiles file="${shared.style.dir}/xmlspec.xsl"/>
         <srcfiles file="${shared.style.dir}/ns-blank.xsl"/>
         <srcfiles file="${shared.schema.dir}/xsl-query.dtd"/>
         <srcfiles file="${shared.schema.dir}/xmlspec.dtd"/>
         <srcfiles file="${shared.schema.dir}/elements.dtd"/>
         <srcfiles file="${shared.schema.dir}/tree-diagram.dtd"/>
         <srcfiles file="${shared.schema.dir}/qtnamespaces.dtd"/>
      </uptodate>
    </condition>
  </target>

<!-- ======================================================================== -->

  <target name="ns-xpath-full-text"
          depends="specinit, chk.ns-xpath-full-text"
          unless="ns-xpath-full-text.exists">
    <echo message="Building namespace document for xpath-full-text namespace..." />
    <!-- set some parameter and call common target to build doc -->
    <antcall target="build-namespace-document">
      <param name="nsdoc.file.name" value="ns-xpath-full-text"/>
      <param name="nsdoc.doc.URI" value="http://www.w3.org/2007/xpath-full-text"/>
      <param name="nsdoc.stylesheet" value="${shared.style.dir}/ns-blank.xsl"/>
    </antcall>
  </target>


<!-- **************************************************************************************
The following <target>s are all concerned with staging documents for publication. 
     ************************************************************************************** -->

<!-- **************************************************************************************
     MAIN DOCUMENT STAGING
     ************************************************************************************** -->

<!-- **************************************************************************************
THE FOLLOWING <target> MUST BE MANUALLY EDITED:
  There must be one <copy> task for each of the files (NON-binary and BINARY) to be placed
    into the staging directory. 
  The <property name="nonbinary-files"> task must contain the exact list of the names of
    the NON-binary files that have been placed into the staging directory.  The list is
    permitted to use wildcards such as *.html. 
  The <property name="binary-files"> task must contain the exact list of the names of
    the BINARY files that have been placed into the staging directory.  The list is
    permitted to use wildcards such as *.jpg. 
  Please note that the value of each <property> list MUST NOT BE EMPTY!  If there are
    NO NON-binary or NO BINARY files to include, there MUST be a filename for which
    there is no actual file (e.g., x.x)!
     ************************************************************************************** -->
  <target name="stage-copy">
    <copy file="${dist.dir}/Overview.html"
          tofile="${staging.directory}/Overview.html"/>
    <copy file="${dist.dir}/Overview-diff.html"
          tofile="${staging.directory}/${shortname}-diff.html"/>
    <copy file="${dist.dir}/${shortname}.xml"
          tofile="${staging.directory}/${shortname}.xml"/>
    <copy file="${dist.dir}/xpath-full-text-31-xqueryx.xsd"
          tofile="${staging.directory}/xpath-full-text-31-xqueryx.xsd"/>
    <copy file="${dist.dir}/xpath-full-text-31-xqueryx.xsl"
          tofile="${staging.directory}/xpath-full-text-31-xqueryx.xsl"/>
    <copy file="${dist.dir}/xpath-full-text-31-xqueryx-ftmatchoption-extensions.xsd"
          tofile="${staging.directory}/xpath-full-text-31-xqueryx-ftmatchoption-extensions.xsd"/>

    <antcall target="checkin.staged.stuff">
      <param name="staging.directory"
             value="${staging.directory}/"/>
      <param name="staging.localdirname"
             value="${staging.localdirname}/"/>
      <param name="nonbinary-files" value="Overview.html
${shortname}-diff.html
${shortname}.xml
xpath-full-text-31-xqueryx.xsd
xpath-full-text-31-xqueryx.xsl
xpath-full-text-31-xqueryx-ftmatchoption-extensions.xsd"/>
      <param name="binary-files" value="x.x"/>
    </antcall>
  </target>

  <!-- ====================================================================== -->

<!-- **************************************************************************************
     NAMESPACE DOCUMENT STAGING
     ************************************************************************************** -->

<!-- **************************************************************************************
THE FOLLOWING <target> MUST BE MANUALLY EDITED:
  There must be one <antcall> task for each namespace document being published.
     ************************************************************************************** -->
  <target name="stage-nsdocs"
          description="Stage Full Text namespace documents for publication">
<!-- ************************************************************************************** -->
    <antcall target="stage-ns-xpath-full-text"/>
<!-- ************************************************************************************** -->
  </target>

  <!-- ====================================================================== -->

  <target name="stage-ns-xpath-full-text"
          description="Stage Full Text xpath-full-text namespace document for publication">
    <antcall target="stage-a-nsdoc">
<!-- The "nsname" parameter specifies the common name of the namespace, which (when prefixed
     with "ns-" and suffixed with ".xml") identifies the filename of the namespace document -->
      <param name="nsname"
             value="xpath-full-text"/>
<!-- The "namespace.fullname" parameter specifies the actual namespace name ("URI") of the
     namespace.  However, in order to make staging the namespace documents easier, the leading
     "http://www.w3.org" must be replaced by "WWW" -->
      <param name="namespace.fullname"
              value="WWW/2007/xpath-full-text"/>
    </antcall>
  </target>

<!-- **************************************************************************************
The preceding <target>s are all concerned with staging documents for publication. 
     ************************************************************************************** -->

</project>
