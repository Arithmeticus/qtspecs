<?xml version="1.0" encoding="UTF-8"?>
<inform-div1 id="impl-def">
<head>Checklist of Implementation-Defined Features</head>

<p>This appendix provides a summary of features defined in this specification
whose effect is explicitly &ref-implementation-defined;. 
The conformance rules require vendors to provide documentation that
explains how these choices have been exercised.
</p>
<olist>

<!-- 1.1 Full-Text Search and XML -->

<item><p> 
Tokenization, including the definition of the term "tokens",
<termref def="should">SHOULD</termref> be &ref-implementation-defined;. 
Implementations <termref def="should">SHOULD</termref> expose the rules and
sample results of tokenization as much as possible to
enable users to predict and interpret the results of tokenization. 
</p>
</item>

<!--
A token is a non-empty sequence of characters returned by a tokenizer
as a basic unit to be searched.
Beyond that, tokens are implementation-defined.
[Omitted because the prev item already says that the defn of "tokens" is imp-def.]
-->

<item><p>
A phrase is an ordered sequence of any number of tokens. Beyond that, phrases
are &ref-implementation-defined;.
</p>
</item>

<item><p>
A sentence is an ordered sequence of any number of tokens. Beyond that,
sentences are &ref-implementation-defined;.  A tokenizer is not required
to support sentences.
</p>
</item>

<item><p>
A  paragraph is an ordered sequence of any number of tokens. Beyond that,
paragraphs are &ref-implementation-defined;.  A tokenizer is not required
to support paragraphs.
</p>
</item>

<item><p> Implementations are free to provide
&ref-implementation-defined; ways to differentiate between markup's 
effect on token boundaries during tokenization. </p></item>


<!-- 2.3 Score Variables -->

<item><p>
The set of expressions (of form ExprSingle) that can be assigned to a
score variable in a let-clause is &ref-implementation-defined;.
If an expression not supported by the scoring algorithm
is passed to the scoring algorithm,
the result is &ref-implementation-defined;.
</p></item>

<!-- 3 Full-Text Selections -->

<!--
Tokenization is implementation-defined.
[Omitted because it repeats 1.1.]
-->

<!-- 3.2 Search Tokens and Phrases -->

<item><p>
When a sequence of query tokens is considered as a phrase, it matches
a sequence of tokens in the tokenized form of the text being searched
only if the two sequences
correspond in an &ref-implementation-defined; way.
</p></item>

<!-- 3.4 Match Options -->

<item><p> The <termref def="dt-match-option-order">match option application order</termref>, subject to the
stated constraints, is &ref-implementation-defined;. 
</p></item>

<!-- 3.4.1 Language Option -->

<item><p> The "language" option influences tokenization, stemming, and stop
words in an &ref-implementation-defined; way. It 
<termref def="may">MAY</termref> influence the behavior of
other match options in an &ref-implementation-defined; way.</p></item>

<item><p> The set of valid language identifiers is &ref-implementation-defined;. </p></item>

<item><p>
If an invalid language identifier is specified,
then the behavior is &ref-implementation-defined;.
</p></item>

<item><p>
When a processor evaluates text in a document that is governed by an xml:lang attribute
and the portion of the full-text query doing that evaluation
contains an FTLanguageOption that specifies a different language
from the language specified by the governing xml:lang attribute,
the language-related behavior of that full-text query is &ref-implementation-defined;.
</p></item>

<!-- 3.4.3 Thesaurus Option -->

<item><p> It is &ref-implementation-defined; which thesaurus relationships an
implementation supports.</p></item>

<item><p>
If a query specifies thesaurus relationships not supported by the thesaurus,
or does not specify a relationship,
the behavior is &ref-implementation-defined;.
</p></item>

<item><p>
The effect of specifying a particular range of levels in an FTThesaurusID
is &ref-implementation-defined;.
</p></item>

<item><p>If a query does not specify the number of levels, and the implementation does not follow the default of querying all levels of hierarchical relationships, then the number of levels of hierarchical relationships queries is &ref-implementation-defined;.
</p></item>

<!-- 3.4.4 Stemming Option -->

<item><p> It is &ref-implementation-defined; what a stem of a token is, and 
whether stemming is based on an algorithm, dictionary, or mixed approach. </p></item>

<!-- 3.4.7 Stop Word Option -->

<item><p> An &ref-implementation-defined; comparison is used
to determine whether a query token appears in
the collection of stop words defined by the applicable stop word option. </p></item>

<item><p>
Normally a stop word matches exactly one token,
but there may be &ref-implementation-defined; conditions,
under which a stop word may match a different number of tokens.
</p></item>

<item><p> The "stop words default" option specifies that an
&ref-implementation-defined; collection of stop words is used. </p></item>

<!-- 3.4.8 Extension Option -->

<item><p>
An implementation recognizes
an &ref-implementation-defined; set of namespace URIs
used to denote extension options.
The effect of each,
including its error behavior, is &ref-implementation-defined;.
</p></item>

<!-- 3.8 Extension Selections -->

<item><p>
An implementation recognizes
an &ref-implementation-defined; set of namespace URIs
used to denote extension selection pragmas.
The effect of each,
including its error behavior, is &ref-implementation-defined;.
</p></item>

<!-- 4.1 Tokenization -->

<!--
Tokenization, including the definition of the term "token",
SHOULD be &ref-implementation-defined;.
[Omitted because it repeats 1.1.]
-->

<item><p>The conditions under which tokenization of two equal items produces
different tokens is &ref-implementation-defined;.
</p></item>

<!-- 4.2.5.6 FTStemOption -->

<!--
It is &ref-implementation-defined; what the effect of the option "stemming" is
on matching tokens
[Omitted because it repeats 3.4.4, sort of.]
-->

<!-- 5.2.13 FTIgnoreOption -->

<item><p>
An implementation may impose an &ref-implementation-defined; restriction
on the operand of FTIgnoreOption.
</p></item>

<!-- 5.2.14 Scoring -->

<!--
<item><p>The restrictions on allowable expressions used to compute scores are
&ref-implementation-defined;.
</p></item>
[Omitted because it repeats 2.3.]
-->

<!-- C Static Context Components -->

<item><p>
For certain full-text components of the static context
(see <specref ref="id-xqft-static-context-components"/>),
the default initial value of the component
can be overwritten or augmented
with an &ref-implementation-defined; value or values.
</p></item>

</olist>

</inform-div1>
