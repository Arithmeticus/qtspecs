<?xml version="1.0" encoding="UTF-8"?>
<!--DO NOT EDIT: GENERATED BY generate-test-stylesheet.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-test-stylesheet.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-test-stylesheet.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-test-stylesheet.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-test-stylesheet.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-test-stylesheet.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-test-stylesheet.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-test-stylesheet.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-test-stylesheet.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-test-stylesheet.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-test-stylesheet.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-test-stylesheet.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-test-stylesheet.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-test-stylesheet.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-test-stylesheet.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-test-stylesheet.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-test-stylesheet.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-test-stylesheet.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-test-stylesheet.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-test-stylesheet.xsl-->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:saxon="http://saxon.sf.net/"
                xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:fos="http://www.w3.org/xpath-functions/spec/namespace"
                xmlns:fn="http://www.w3.org/2005/xpath-functions"
                xmlns:op="http://www.w3.org/2005/xpath-operators/local"
                version="2.0"
                saxon:allow-all-built-in-types="yes">
   <xsl:output method="xml" indent="yes"/>
   <!-- Hard-coded collation definitions that work for Saxon only -->
   <saxon:collation name="http://example.com/CollationA"
                    rules=" ='-'='*'&lt; a &lt; b &lt; c &lt; d &lt; e &lt; f &lt; g &lt; h &lt; i &lt; j &lt; k &lt; l &lt; m &lt; n &lt; o &lt; p &lt; q &lt; r &lt; s &lt; t &lt; u &lt; v &lt; w &lt; x &lt; y &lt; z"/>
   <saxon:collation name="http://example.com/deutsch" lang="de" ignore-modifiers="yes"
                    decomposition="full"/>
   <xsl:template name="main" match="/">
      <errors>
         <xsl:variable name="po" as="element()"><PurchaseOrder>
  <line-item>
    <description>Large widget</description>
    <price>8.95</price>
    <quantity>5.0</quantity>
  </line-item>
  <line-item>
    <description>Small widget</description>
    <price>3.99</price>
    <quantity>2.0</quantity>
  </line-item>
  <line-item>
    <description>Tiny widget</description>
    <price>1.49</price>
    <quantity>805</quantity>
  </line-item>
</PurchaseOrder></xsl:variable>
         <xsl:variable name="item1" select="$po/line-item[1]"/>
         <xsl:variable name="item2" select="$po/line-item[2]"/>
         <xsl:variable name="item3" select="$po/line-item[3]"/>
         <xsl:if test="not(deep-equal(op:numeric-integer-divide(10,3), 3))">
            <err>Failure running op:numeric-integer-divide(10,3)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:numeric-integer-divide(3,-2), -1))">
            <err>Failure running op:numeric-integer-divide(3,-2)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:numeric-integer-divide(-3,2), -1))">
            <err>Failure running op:numeric-integer-divide(-3,2)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:numeric-integer-divide(-3,-2), 1))">
            <err>Failure running op:numeric-integer-divide(-3,-2)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:numeric-integer-divide(9.0,3), 3))">
            <err>Failure running op:numeric-integer-divide(9.0,3)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:numeric-integer-divide(-3.5,3), -1))">
            <err>Failure running op:numeric-integer-divide(-3.5,3)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:numeric-integer-divide(3.0,4), 0))">
            <err>Failure running op:numeric-integer-divide(3.0,4)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:numeric-integer-divide(3.1E1,6), 5))">
            <err>Failure running op:numeric-integer-divide(3.1E1,6)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:numeric-integer-divide(3.1E1,7), 4))">
            <err>Failure running op:numeric-integer-divide(3.1E1,7)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:numeric-mod(10,3), 1))">
            <err>Failure running op:numeric-mod(10,3)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:numeric-mod(6,-2), 0))">
            <err>Failure running op:numeric-mod(6,-2)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:numeric-mod(4.5,1.2), 0.9))">
            <err>Failure running op:numeric-mod(4.5,1.2)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:numeric-mod(1.23E2, 0.6E1), 3.0E0))">
            <err>Failure running op:numeric-mod(1.23E2, 0.6E1)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:abs(10.5), 10.5))">
            <err>Failure running fn:abs(10.5)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:abs(-10.5), 10.5))">
            <err>Failure running fn:abs(-10.5)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:ceiling(10.5), 11))">
            <err>Failure running fn:ceiling(10.5)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:ceiling(-10.5), -10))">
            <err>Failure running fn:ceiling(-10.5)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:floor(10.5), 10))">
            <err>Failure running fn:floor(10.5)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:floor(-10.5), -11))">
            <err>Failure running fn:floor(-10.5)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:round(2.5), 3.0))">
            <err>Failure running fn:round(2.5)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:round(2.4999), 2.0))">
            <err>Failure running fn:round(2.4999)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:round(-2.5), -2.0))">
            <err>Failure running fn:round(-2.5)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:round-half-to-even(0.5), 0.0))">
            <err>Failure running fn:round-half-to-even(0.5)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:round-half-to-even(1.5), 2.0))">
            <err>Failure running fn:round-half-to-even(1.5)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:round-half-to-even(2.5), 2.0))">
            <err>Failure running fn:round-half-to-even(2.5)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:round-half-to-even(3.567812e+3, 2), 3567.81e0))">
            <err>Failure running fn:round-half-to-even(3.567812e+3, 2)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:round-half-to-even(4.7564e-3, 2), 0.0e0))">
            <err>Failure running fn:round-half-to-even(4.7564e-3, 2)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:round-half-to-even(35612.25, -2), 35600))">
            <err>Failure running fn:round-half-to-even(35612.25, -2)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:codepoints-to-string((2309, 2358, 2378, 2325)), &#34;अशॊक&#34;))">
            <err>Failure running fn:codepoints-to-string((2309, 2358, 2378, 2325))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:string-to-codepoints(&#34;Thérèse&#34;), (84, 104, 233, 114, 232, 115, 101)))">
            <err>Failure running fn:string-to-codepoints("Thérèse")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:compare('abc', 'abc'), 0))">
            <err>Failure running fn:compare('abc', 'abc')</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:compare('Strasse', 'Straße'), 0))"
                 default-collation="http://example.com/deutsch">
            <err>Failure running fn:compare('Strasse', 'Straße')</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:compare('Strasse', 'Straße', 'http://example.com/deutsch'), 0))">
            <err>Failure running fn:compare('Strasse', 'Straße', 'http://example.com/deutsch')</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:compare('Strassen', 'Straße'), 1))"
                 default-collation="http://example.com/deutsch">
            <err>Failure running fn:compare('Strassen', 'Straße')</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:concat('un', 'grateful'), &#34;ungrateful&#34;))">
            <err>Failure running fn:concat('un', 'grateful')</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:concat('Thy ', (), 'old ', &#34;groans&#34;, &#34;&#34;, ' ring', ' yet', ' in', ' my', ' ancient',' ears.'), &#34;Thy old groans ring yet in my ancient ears.&#34;))">
            <err>Failure running fn:concat('Thy ', (), 'old ', "groans", "", ' ring', ' yet', ' in', ' my', ' ancient',' ears.')</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:concat('Ciao!',()), &#34;Ciao!&#34;))">
            <err>Failure running fn:concat('Ciao!',())</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:concat('Ingratitude, ', 'thou ', 'marble-hearted', ' fiend!'), &#34;Ingratitude, thou marble-hearted fiend!&#34;))">
            <err>Failure running fn:concat('Ingratitude, ', 'thou ', 'marble-hearted', ' fiend!')</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:string-join(('Now', 'is', 'the', 'time', '...'), ' '), &#34;Now is the time ...&#34;))">
            <err>Failure running fn:string-join(('Now', 'is', 'the', 'time', '...'), ' ')</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:string-join(('Blow, ', 'blow, ', 'thou ', 'winter ', 'wind!'), ''), &#34;Blow, blow, thou winter wind!&#34;))">
            <err>Failure running fn:string-join(('Blow, ', 'blow, ', 'thou ', 'winter ', 'wind!'), '')</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:string-join((), 'separator'), &#34;&#34;))">
            <err>Failure running fn:string-join((), 'separator')</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:substring(&#34;motor car&#34;, 6), &#34; car&#34;))">
            <err>Failure running fn:substring("motor car", 6)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:substring(&#34;metadata&#34;, 4, 3), &#34;ada&#34;))">
            <err>Failure running fn:substring("metadata", 4, 3)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:substring(&#34;12345&#34;, 1.5, 2.6), &#34;234&#34;))">
            <err>Failure running fn:substring("12345", 1.5, 2.6)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:substring(&#34;12345&#34;, 0, 3), &#34;12&#34;))">
            <err>Failure running fn:substring("12345", 0, 3)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:substring(&#34;12345&#34;, 5, -3), &#34;&#34;))">
            <err>Failure running fn:substring("12345", 5, -3)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:substring(&#34;12345&#34;, -3, 5), &#34;1&#34;))">
            <err>Failure running fn:substring("12345", -3, 5)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:substring(&#34;12345&#34;, 0 div 0E0, 3), &#34;&#34;))">
            <err>Failure running fn:substring("12345", 0 div 0E0, 3)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:substring(&#34;12345&#34;, 1, 0 div 0E0), &#34;&#34;))">
            <err>Failure running fn:substring("12345", 1, 0 div 0E0)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:substring((), 1, 3), &#34;&#34;))">
            <err>Failure running fn:substring((), 1, 3)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:substring(&#34;12345&#34;, -42, 1 div 0E0), &#34;12345&#34;))">
            <err>Failure running fn:substring("12345", -42, 1 div 0E0)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:substring(&#34;12345&#34;, -1 div 0E0, 1 div 0E0), &#34;&#34;))">
            <err>Failure running fn:substring("12345", -1 div 0E0, 1 div 0E0)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:string-length(&#34;Harp not on that string, madam; that is past.&#34;), 45))">
            <err>Failure running fn:string-length("Harp not on that string, madam; that is past.")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:string-length(()), 0))">
            <err>Failure running fn:string-length(())</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:normalize-space(&#34; The wealthy curled darlings of our nation. &#34;), &#34;The wealthy curled darlings of our nation.&#34;))">
            <err>Failure running fn:normalize-space(" The wealthy curled darlings of our nation. ")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:normalize-space(()), &#34;&#34;))">
            <err>Failure running fn:normalize-space(())</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:upper-case(&#34;abCd0&#34;), &#34;ABCD0&#34;))">
            <err>Failure running fn:upper-case("abCd0")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:lower-case(&#34;ABc!D&#34;), &#34;abc!d&#34;))">
            <err>Failure running fn:lower-case("ABc!D")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:translate(&#34;bar&#34;,&#34;abc&#34;,&#34;ABC&#34;), &#34;BAr&#34;))">
            <err>Failure running fn:translate("bar","abc","ABC")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:translate(&#34;--aaa--&#34;,&#34;abc-&#34;,&#34;ABC&#34;), &#34;AAA&#34;))">
            <err>Failure running fn:translate("--aaa--","abc-","ABC")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:translate(&#34;abcdabc&#34;, &#34;abc&#34;, &#34;AB&#34;), &#34;ABdAB&#34;))">
            <err>Failure running fn:translate("abcdabc", "abc", "AB")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:encode-for-uri(&#34;http://www.example.com/00/Weather/CA/Los%20Angeles#ocean&#34;), &#34;http%3A%2F%2Fwww.example.com%2F00%2FWeather%2FCA%2FLos%2520Angeles%23ocean&#34;))">
            <err>Failure running fn:encode-for-uri("http://www.example.com/00/Weather/CA/Los%20Angeles#ocean")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(concat(&#34;http://www.example.com/&#34;, encode-for-uri(&#34;~bébé&#34;)), &#34;http://www.example.com/~b%C3%A9b%C3%A9&#34;))">
            <err>Failure running concat("http://www.example.com/", encode-for-uri("~bébé"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(concat(&#34;http://www.example.com/&#34;, encode-for-uri(&#34;100% organic&#34;)), &#34;http://www.example.com/100%25%20organic&#34;))">
            <err>Failure running concat("http://www.example.com/", encode-for-uri("100% organic"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:iri-to-uri (&#34;http://www.example.com/00/Weather/CA/Los%20Angeles#ocean&#34;), &#34;http://www.example.com/00/Weather/CA/Los%20Angeles#ocean&#34;))">
            <err>Failure running fn:iri-to-uri ("http://www.example.com/00/Weather/CA/Los%20Angeles#ocean")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:iri-to-uri (&#34;http://www.example.com/~bébé&#34;), &#34;http://www.example.com/~b%C3%A9b%C3%A9&#34;))">
            <err>Failure running fn:iri-to-uri ("http://www.example.com/~bébé")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:escape-html-uri (&#34;http://www.example.com/00/Weather/CA/Los Angeles#ocean&#34;), &#34;http://www.example.com/00/Weather/CA/Los Angeles#ocean&#34;))">
            <err>Failure running fn:escape-html-uri ("http://www.example.com/00/Weather/CA/Los Angeles#ocean")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:escape-html-uri (&#34;javascript:if (navigator.browserLanguage == 'fr') window.open('http://www.example.com/~bébé');&#34;), &#34;javascript:if (navigator.browserLanguage == 'fr') window.open('http://www.example.com/~b%C3%A9b%C3%A9');&#34;))">
            <err>Failure running fn:escape-html-uri ("javascript:if (navigator.browserLanguage == 'fr') window.open('http://www.example.com/~bébé');")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:contains ( &#34;tattoo&#34;, &#34;t&#34;), true()))">
            <err>Failure running fn:contains ( "tattoo", "t")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:contains ( &#34;tattoo&#34;, &#34;ttt&#34;), false()))">
            <err>Failure running fn:contains ( "tattoo", "ttt")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:contains ( &#34;&#34;, ()), true()))">
            <err>Failure running fn:contains ( "", ())</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:contains ( &#34;abcdefghi&#34;, &#34;-d-e-f-&#34;, &#34;http://example.com/CollationA&#34;), true()))">
            <err>Failure running fn:contains ( "abcdefghi", "-d-e-f-", "http://example.com/CollationA")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:contains ( &#34;a*b*c*d*e*f*g*h*i*&#34;, &#34;d-ef-&#34;, &#34;http://example.com/CollationA&#34;), true()))">
            <err>Failure running fn:contains ( "a*b*c*d*e*f*g*h*i*", "d-ef-", "http://example.com/CollationA")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:contains ( &#34;abcd***e---f*--*ghi&#34;, &#34;def&#34;, &#34;http://example.com/CollationA&#34;), true()))">
            <err>Failure running fn:contains ( "abcd***e---f*--*ghi", "def", "http://example.com/CollationA")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:contains ( (), &#34;--***-*---&#34;, &#34;http://example.com/CollationA&#34;), true()))">
            <err>Failure running fn:contains ( (), "--***-*---", "http://example.com/CollationA")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:starts-with(&#34;tattoo&#34;, &#34;tat&#34;), true()))">
            <err>Failure running fn:starts-with("tattoo", "tat")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:starts-with ( &#34;tattoo&#34;, &#34;att&#34;), false()))">
            <err>Failure running fn:starts-with ( "tattoo", "att")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:starts-with ((), ()), true()))">
            <err>Failure running fn:starts-with ((), ())</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:starts-with ( &#34;abcdefghi&#34;, &#34;-a-b-c-&#34;, &#34;http://example.com/CollationA&#34;), true()))">
            <err>Failure running fn:starts-with ( "abcdefghi", "-a-b-c-", "http://example.com/CollationA")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:starts-with ( &#34;a*b*c*d*e*f*g*h*i*&#34;, &#34;a-bc-&#34;, &#34;http://example.com/CollationA&#34;), true()))">
            <err>Failure running fn:starts-with ( "a*b*c*d*e*f*g*h*i*", "a-bc-", "http://example.com/CollationA")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:starts-with ( &#34;abcd***e---f*--*ghi&#34;, &#34;abcdef&#34;, &#34;http://example.com/CollationA&#34;), true()))">
            <err>Failure running fn:starts-with ( "abcd***e---f*--*ghi", "abcdef", "http://example.com/CollationA")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:starts-with ( (), &#34;--***-*---&#34;, &#34;http://example.com/CollationA&#34;), true()))">
            <err>Failure running fn:starts-with ( (), "--***-*---", "http://example.com/CollationA")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:starts-with ( &#34;-abcdefghi&#34;, &#34;-abc&#34;, &#34;http://example.com/CollationA&#34;), true()))">
            <err>Failure running fn:starts-with ( "-abcdefghi", "-abc", "http://example.com/CollationA")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:ends-with ( &#34;tattoo&#34;, &#34;tattoo&#34;), true()))">
            <err>Failure running fn:ends-with ( "tattoo", "tattoo")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:ends-with ( &#34;tattoo&#34;, &#34;atto&#34;), false()))">
            <err>Failure running fn:ends-with ( "tattoo", "atto")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:ends-with ((), ()), true()))">
            <err>Failure running fn:ends-with ((), ())</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:ends-with ( &#34;abcdefghi&#34;, &#34;-g-h-i-&#34;, &#34;http://example.com/CollationA&#34;), true()))">
            <err>Failure running fn:ends-with ( "abcdefghi", "-g-h-i-", "http://example.com/CollationA")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:ends-with ( &#34;abcd***e---f*--*ghi&#34;, &#34;defghi&#34;, &#34;http://example.com/CollationA&#34;), true()))">
            <err>Failure running fn:ends-with ( "abcd***e---f*--*ghi", "defghi", "http://example.com/CollationA")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:ends-with ( &#34;abcd***e---f*--*ghi&#34;, &#34;defghi&#34;, &#34;http://example.com/CollationA&#34;), true()))">
            <err>Failure running fn:ends-with ( "abcd***e---f*--*ghi", "defghi", "http://example.com/CollationA")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:ends-with ( (), &#34;--***-*---&#34;, &#34;http://example.com/CollationA&#34;), true()))">
            <err>Failure running fn:ends-with ( (), "--***-*---", "http://example.com/CollationA")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:ends-with ( &#34;abcdefghi&#34;, &#34;ghi-&#34;, &#34;http://example.com/CollationA&#34;), true()))">
            <err>Failure running fn:ends-with ( "abcdefghi", "ghi-", "http://example.com/CollationA")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:substring-before ( &#34;tattoo&#34;, &#34;attoo&#34;), &#34;t&#34;))">
            <err>Failure running fn:substring-before ( "tattoo", "attoo")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:substring-before ( &#34;tattoo&#34;, &#34;tatto&#34;), &#34;&#34;))">
            <err>Failure running fn:substring-before ( "tattoo", "tatto")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:substring-before ((), ()), &#34;&#34;))">
            <err>Failure running fn:substring-before ((), ())</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:substring-before ( &#34;abcdefghi&#34;, &#34;--d-e-&#34;, &#34;http://example.com/CollationA&#34;), &#34;abc&#34;))">
            <err>Failure running fn:substring-before ( "abcdefghi", "--d-e-", "http://example.com/CollationA")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:substring-before ( &#34;abc--d-e-fghi&#34;, &#34;--d-e-&#34;, &#34;http://example.com/CollationA&#34;), &#34;abc--&#34;))">
            <err>Failure running fn:substring-before ( "abc--d-e-fghi", "--d-e-", "http://example.com/CollationA")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:substring-before ( &#34;a*b*c*d*e*f*g*h*i*&#34;, &#34;***cde&#34;, &#34;http://example.com/CollationA&#34;), &#34;a*b*&#34;))">
            <err>Failure running fn:substring-before ( "a*b*c*d*e*f*g*h*i*", "***cde", "http://example.com/CollationA")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:substring-before ( &#34;Eureka!&#34;, &#34;--***-*---&#34;, &#34;http://example.com/CollationA&#34;), &#34;&#34;))">
            <err>Failure running fn:substring-before ( "Eureka!", "--***-*---", "http://example.com/CollationA")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:substring-after(&#34;tattoo&#34;, &#34;tat&#34;), &#34;too&#34;))">
            <err>Failure running fn:substring-after("tattoo", "tat")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:substring-after(&#34;tattoo&#34;, &#34;tattoo&#34;), &#34;&#34;))">
            <err>Failure running fn:substring-after("tattoo", "tattoo")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:substring-after((), ()), &#34;&#34;))">
            <err>Failure running fn:substring-after((), ())</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:substring-after(&#34;abcdefghi&#34;, &#34;--d-e-&#34;, &#34;http://example.com/CollationA&#34;), &#34;fghi&#34;))">
            <err>Failure running fn:substring-after("abcdefghi", "--d-e-", "http://example.com/CollationA")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:substring-after(&#34;abc--d-e-fghi&#34;, &#34;--d-e-&#34;, &#34;http://example.com/CollationA&#34;), &#34;-fghi&#34;))">
            <err>Failure running fn:substring-after("abc--d-e-fghi", "--d-e-", "http://example.com/CollationA")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:substring-after ( &#34;a*b*c*d*e*f*g*h*i*&#34;, &#34;***cde***&#34;, &#34;http://example.com/CollationA&#34;), &#34;*f*g*h*i*&#34;))">
            <err>Failure running fn:substring-after ( "a*b*c*d*e*f*g*h*i*", "***cde***", "http://example.com/CollationA")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:substring-after ( &#34;Eureka!&#34;, &#34;--***-*---&#34;, &#34;http://example.com/CollationA&#34;), &#34;Eureka!&#34;))">
            <err>Failure running fn:substring-after ( "Eureka!", "--***-*---", "http://example.com/CollationA")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:matches(&#34;abracadabra&#34;, &#34;bra&#34;), true()))">
            <err>Failure running fn:matches("abracadabra", "bra")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:matches(&#34;abracadabra&#34;, &#34;^a.*a$&#34;), true()))">
            <err>Failure running fn:matches("abracadabra", "^a.*a$")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:matches(&#34;abracadabra&#34;, &#34;^bra&#34;), false()))">
            <err>Failure running fn:matches("abracadabra", "^bra")</err>
         </xsl:if>
         <xsl:variable name="poem" as="element()"><poem author="Wilhelm Busch"> 
Kaum hat dies der Hahn gesehen,
Fängt er auch schon an zu krähen:
Kikeriki! Kikikerikih!!
Tak, tak, tak! - da kommen sie.
</poem></xsl:variable>
         <xsl:if test="not(deep-equal(fn:matches($poem, &#34;Kaum.*krähen&#34;), false()))">
            <err>Failure running fn:matches($poem, "Kaum.*krähen")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:matches($poem, &#34;Kaum.*krähen&#34;, &#34;s&#34;), true()))">
            <err>Failure running fn:matches($poem, "Kaum.*krähen", "s")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:matches($poem, &#34;^Kaum.*gesehen,$&#34;, &#34;m&#34;), true()))">
            <err>Failure running fn:matches($poem, "^Kaum.*gesehen,$", "m")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:matches($poem, &#34;^Kaum.*gesehen,$&#34;), false()))">
            <err>Failure running fn:matches($poem, "^Kaum.*gesehen,$")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:matches($poem, &#34;kiki&#34;, &#34;i&#34;), true()))">
            <err>Failure running fn:matches($poem, "kiki", "i")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(replace(&#34;abracadabra&#34;, &#34;bra&#34;, &#34;*&#34;), &#34;a*cada*&#34;))">
            <err>Failure running replace("abracadabra", "bra", "*")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(replace(&#34;abracadabra&#34;, &#34;a.*a&#34;, &#34;*&#34;), &#34;*&#34;))">
            <err>Failure running replace("abracadabra", "a.*a", "*")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(replace(&#34;abracadabra&#34;, &#34;a.*?a&#34;, &#34;*&#34;), &#34;*c*bra&#34;))">
            <err>Failure running replace("abracadabra", "a.*?a", "*")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(replace(&#34;abracadabra&#34;, &#34;a&#34;, &#34;&#34;), &#34;brcdbr&#34;))">
            <err>Failure running replace("abracadabra", "a", "")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(replace(&#34;abracadabra&#34;, &#34;a(.)&#34;, &#34;a$1$1&#34;), &#34;abbraccaddabbra&#34;))">
            <err>Failure running replace("abracadabra", "a(.)", "a$1$1")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(replace(&#34;AAAA&#34;, &#34;A+&#34;, &#34;b&#34;), &#34;b&#34;))">
            <err>Failure running replace("AAAA", "A+", "b")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(replace(&#34;AAAA&#34;, &#34;A+?&#34;, &#34;b&#34;), &#34;bbbb&#34;))">
            <err>Failure running replace("AAAA", "A+?", "b")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(replace(&#34;darted&#34;, &#34;^(.*?)d(.*)$&#34;, &#34;$1c$2&#34;), &#34;carted&#34;))">
            <err>Failure running replace("darted", "^(.*?)d(.*)$", "$1c$2")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:tokenize(&#34;The cat sat on the mat&#34;, &#34;\s+&#34;), (&#34;The&#34;, &#34;cat&#34;, &#34;sat&#34;, &#34;on&#34;, &#34;the&#34;, &#34;mat&#34;)))">
            <err>Failure running fn:tokenize("The cat sat on the mat", "\s+")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:tokenize(&#34;1, 15, 24, 50&#34;, &#34;,\s*&#34;), (&#34;1&#34;, &#34;15&#34;, &#34;24&#34;, &#34;50&#34;)))">
            <err>Failure running fn:tokenize("1, 15, 24, 50", ",\s*")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:tokenize(&#34;1,15,,24,50,&#34;, &#34;,&#34;), (&#34;1&#34;, &#34;15&#34;, &#34;&#34;, &#34;24&#34;, &#34;50&#34;, &#34;&#34;)))">
            <err>Failure running fn:tokenize("1,15,,24,50,", ",")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:tokenize(&#34;Some unparsed &lt;br&gt; HTML &lt;BR&gt; text&#34;, &#34;\s*&lt;br&gt;\s*&#34;, &#34;i&#34;), (&#34;Some unparsed&#34;, &#34;HTML&#34;, &#34;text&#34;)))">
            <err>Failure running fn:tokenize("Some unparsed &lt;br&gt; HTML &lt;BR&gt; text", "\s*&lt;br&gt;\s*", "i")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:true(), xs:boolean(1)))">
            <err>Failure running fn:true()</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:false(), xs:boolean(0)))">
            <err>Failure running fn:false()</err>
         </xsl:if>
         <xsl:variable name="abc" select="(&#34;a&#34;, &#34;b&#34;, &#34;&#34;)"/>
         <xsl:if test="not(deep-equal(fn:boolean($abc[1]), true()))">
            <err>Failure running fn:boolean($abc[1])</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:boolean($abc[0]), false()))">
            <err>Failure running fn:boolean($abc[0])</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:boolean($abc[3]), false()))">
            <err>Failure running fn:boolean($abc[3])</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:not(fn:true()), false()))">
            <err>Failure running fn:not(fn:true())</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:not(&#34;false&#34;), false()))">
            <err>Failure running fn:not("false")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:duration-equal(xs:duration(&#34;P1Y&#34;), xs:duration(&#34;P12M&#34;)), true()))">
            <err>Failure running op:duration-equal(xs:duration("P1Y"), xs:duration("P12M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:duration-equal(xs:duration(&#34;PT24H&#34;), xs:duration(&#34;P1D&#34;)), true()))">
            <err>Failure running op:duration-equal(xs:duration("PT24H"), xs:duration("P1D"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:duration-equal(xs:duration(&#34;P1Y&#34;), xs:duration(&#34;P365D&#34;)), false()))">
            <err>Failure running op:duration-equal(xs:duration("P1Y"), xs:duration("P365D"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:duration-equal(xs:yearMonthDuration(&#34;P0Y&#34;), xs:dayTimeDuration(&#34;P0D&#34;)), true()))">
            <err>Failure running op:duration-equal(xs:yearMonthDuration("P0Y"), xs:dayTimeDuration("P0D"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:duration-equal(xs:yearMonthDuration(&#34;P1Y&#34;), xs:dayTimeDuration(&#34;P365D&#34;)), false()))">
            <err>Failure running op:duration-equal(xs:yearMonthDuration("P1Y"), xs:dayTimeDuration("P365D"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:duration-equal(xs:yearMonthDuration(&#34;P2Y&#34;), xs:yearMonthDuration(&#34;P24M&#34;)), true()))">
            <err>Failure running op:duration-equal(xs:yearMonthDuration("P2Y"), xs:yearMonthDuration("P24M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:duration-equal(xs:dayTimeDuration(&#34;P10D&#34;), xs:dayTimeDuration(&#34;PT240H&#34;)), true()))">
            <err>Failure running op:duration-equal(xs:dayTimeDuration("P10D"), xs:dayTimeDuration("PT240H"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:duration-equal(xs:duration(&#34;P2Y0M0DT0H0M0S&#34;), xs:yearMonthDuration(&#34;P24M&#34;)), true()))">
            <err>Failure running op:duration-equal(xs:duration("P2Y0M0DT0H0M0S"), xs:yearMonthDuration("P24M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:duration-equal(xs:duration(&#34;P0Y0M10D&#34;), xs:dayTimeDuration(&#34;PT240H&#34;)), true()))">
            <err>Failure running op:duration-equal(xs:duration("P0Y0M10D"), xs:dayTimeDuration("PT240H"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:years-from-duration(xs:yearMonthDuration(&#34;P20Y15M&#34;)), 21))">
            <err>Failure running fn:years-from-duration(xs:yearMonthDuration("P20Y15M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:years-from-duration(xs:yearMonthDuration(&#34;-P15M&#34;)), -1))">
            <err>Failure running fn:years-from-duration(xs:yearMonthDuration("-P15M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:years-from-duration(xs:dayTimeDuration(&#34;-P2DT15H&#34;)), 0))">
            <err>Failure running fn:years-from-duration(xs:dayTimeDuration("-P2DT15H"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:months-from-duration(xs:yearMonthDuration(&#34;P20Y15M&#34;)), 3))">
            <err>Failure running fn:months-from-duration(xs:yearMonthDuration("P20Y15M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:months-from-duration(xs:yearMonthDuration(&#34;-P20Y18M&#34;)), -6))">
            <err>Failure running fn:months-from-duration(xs:yearMonthDuration("-P20Y18M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:months-from-duration(xs:dayTimeDuration(&#34;-P2DT15H0M0S&#34;)), 0))">
            <err>Failure running fn:months-from-duration(xs:dayTimeDuration("-P2DT15H0M0S"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:days-from-duration(xs:dayTimeDuration(&#34;P3DT10H&#34;)), 3))">
            <err>Failure running fn:days-from-duration(xs:dayTimeDuration("P3DT10H"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:days-from-duration(xs:dayTimeDuration(&#34;P3DT55H&#34;)), 5))">
            <err>Failure running fn:days-from-duration(xs:dayTimeDuration("P3DT55H"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:days-from-duration(xs:yearMonthDuration(&#34;P3Y5M&#34;)), 0))">
            <err>Failure running fn:days-from-duration(xs:yearMonthDuration("P3Y5M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:hours-from-duration(xs:dayTimeDuration(&#34;P3DT10H&#34;)), 10))">
            <err>Failure running fn:hours-from-duration(xs:dayTimeDuration("P3DT10H"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:hours-from-duration(xs:dayTimeDuration(&#34;P3DT12H32M12S&#34;)), 12))">
            <err>Failure running fn:hours-from-duration(xs:dayTimeDuration("P3DT12H32M12S"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:hours-from-duration(xs:dayTimeDuration(&#34;PT123H&#34;)), 3))">
            <err>Failure running fn:hours-from-duration(xs:dayTimeDuration("PT123H"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:hours-from-duration(xs:dayTimeDuration(&#34;-P3DT10H&#34;)), -10))">
            <err>Failure running fn:hours-from-duration(xs:dayTimeDuration("-P3DT10H"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:minutes-from-duration(xs:dayTimeDuration(&#34;P3DT10H&#34;)), 0))">
            <err>Failure running fn:minutes-from-duration(xs:dayTimeDuration("P3DT10H"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:minutes-from-duration(xs:dayTimeDuration(&#34;-P5DT12H30M&#34;)), -30))">
            <err>Failure running fn:minutes-from-duration(xs:dayTimeDuration("-P5DT12H30M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:seconds-from-duration(xs:dayTimeDuration(&#34;P3DT10H12.5S&#34;)), 12.5))">
            <err>Failure running fn:seconds-from-duration(xs:dayTimeDuration("P3DT10H12.5S"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:seconds-from-duration(xs:dayTimeDuration(&#34;-PT256S&#34;)), -16.0))">
            <err>Failure running fn:seconds-from-duration(xs:dayTimeDuration("-PT256S"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:add-yearMonthDurations(xs:yearMonthDuration(&#34;P2Y11M&#34;), xs:yearMonthDuration(&#34;P3Y3M&#34;)), xs:yearMonthDuration(&#34;P6Y2M&#34;)))">
            <err>Failure running op:add-yearMonthDurations(xs:yearMonthDuration("P2Y11M"), xs:yearMonthDuration("P3Y3M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:subtract-yearMonthDurations(xs:yearMonthDuration(&#34;P2Y11M&#34;), xs:yearMonthDuration(&#34;P3Y3M&#34;)), xs:yearMonthDuration(&#34;-P4M&#34;)))">
            <err>Failure running op:subtract-yearMonthDurations(xs:yearMonthDuration("P2Y11M"), xs:yearMonthDuration("P3Y3M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:multiply-yearMonthDuration(xs:yearMonthDuration(&#34;P2Y11M&#34;), 2.3), xs:yearMonthDuration(&#34;P6Y9M&#34;)))">
            <err>Failure running op:multiply-yearMonthDuration(xs:yearMonthDuration("P2Y11M"), 2.3)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:divide-yearMonthDuration(xs:yearMonthDuration(&#34;P2Y11M&#34;), 1.5), xs:yearMonthDuration(&#34;P1Y11M&#34;)))">
            <err>Failure running op:divide-yearMonthDuration(xs:yearMonthDuration("P2Y11M"), 1.5)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:divide-yearMonthDuration-by-yearMonthDuration(xs:yearMonthDuration(&#34;P3Y4M&#34;), xs:yearMonthDuration(&#34;-P1Y4M&#34;)), -2.5))">
            <err>Failure running op:divide-yearMonthDuration-by-yearMonthDuration(xs:yearMonthDuration("P3Y4M"), xs:yearMonthDuration("-P1Y4M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:divide-yearMonthDuration-by-yearMonthDuration(xs:yearMonthDuration(&#34;P3Y4M&#34;), xs:yearMonthDuration(&#34;P1M&#34;)), 40))">
            <err>Failure running op:divide-yearMonthDuration-by-yearMonthDuration(xs:yearMonthDuration("P3Y4M"), xs:yearMonthDuration("P1M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:add-dayTimeDurations(xs:dayTimeDuration(&#34;P2DT12H5M&#34;), xs:dayTimeDuration(&#34;P5DT12H&#34;)), xs:dayTimeDuration('P8DT5M')))">
            <err>Failure running op:add-dayTimeDurations(xs:dayTimeDuration("P2DT12H5M"), xs:dayTimeDuration("P5DT12H"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:subtract-dayTimeDurations(xs:dayTimeDuration(&#34;P2DT12H&#34;), xs:dayTimeDuration(&#34;P1DT10H30M&#34;)), xs:dayTimeDuration('P1DT1H30M')))">
            <err>Failure running op:subtract-dayTimeDurations(xs:dayTimeDuration("P2DT12H"), xs:dayTimeDuration("P1DT10H30M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:multiply-dayTimeDuration(xs:dayTimeDuration(&#34;PT2H10M&#34;), 2.1), xs:dayTimeDuration('PT4H33M')))">
            <err>Failure running op:multiply-dayTimeDuration(xs:dayTimeDuration("PT2H10M"), 2.1)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:divide-dayTimeDuration(xs:dayTimeDuration(&#34;P1DT2H30M10.5S&#34;), 1.5), xs:duration(&#34;PT17H40M7S&#34;)))">
            <err>Failure running op:divide-dayTimeDuration(xs:dayTimeDuration("P1DT2H30M10.5S"), 1.5)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:round-half-to-even( op:divide-dayTimeDuration-by-dayTimeDuration( xs:dayTimeDuration(&#34;P2DT53M11S&#34;), xs:dayTimeDuration(&#34;P1DT10H&#34;)), 4), 1.4378))">
            <err>Failure running fn:round-half-to-even( op:divide-dayTimeDuration-by-dayTimeDuration( xs:dayTimeDuration("P2DT53M11S"), xs:dayTimeDuration("P1DT10H")), 4)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:divide-dayTimeDuration-by-dayTimeDuration(xs:dayTimeDuration(&#34;P2DT53M11S&#34;), xs:dayTimeDuration(&#34;PT1S&#34;)), 175991.0))">
            <err>Failure running op:divide-dayTimeDuration-by-dayTimeDuration(xs:dayTimeDuration("P2DT53M11S"), xs:dayTimeDuration("PT1S"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:dateTime(xs:date(&#34;1999-12-31&#34;), xs:time(&#34;12:00:00&#34;)), xs:dateTime(&#34;1999-12-31T12:00:00&#34;)))">
            <err>Failure running fn:dateTime(xs:date("1999-12-31"), xs:time("12:00:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:dateTime(xs:date(&#34;1999-12-31&#34;), xs:time(&#34;24:00:00&#34;)), xs:dateTime(&#34;1999-12-31T00:00:00&#34;)))">
            <err>Failure running fn:dateTime(xs:date("1999-12-31"), xs:time("24:00:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:dateTime-equal(xs:dateTime(&#34;2002-04-02T12:00:00-01:00&#34;), xs:dateTime(&#34;2002-04-02T17:00:00+04:00&#34;)), true()))">
            <err>Failure running op:dateTime-equal(xs:dateTime("2002-04-02T12:00:00-01:00"), xs:dateTime("2002-04-02T17:00:00+04:00"))</err>
         </xsl:if>
         <xsl:if test="implicit-timezone() eq xs:duration('-PT5H') and not(deep-equal(op:dateTime-equal(xs:dateTime(&#34;2002-04-02T12:00:00&#34;), xs:dateTime(&#34;2002-04-02T23:00:00+06:00&#34;)), true()))">
            <err>Failure running op:dateTime-equal(xs:dateTime("2002-04-02T12:00:00"), xs:dateTime("2002-04-02T23:00:00+06:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:dateTime-equal(xs:dateTime(&#34;2002-04-02T12:00:00&#34;), xs:dateTime(&#34;2002-04-02T17:00:00&#34;)), false()))">
            <err>Failure running op:dateTime-equal(xs:dateTime("2002-04-02T12:00:00"), xs:dateTime("2002-04-02T17:00:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:dateTime-equal(xs:dateTime(&#34;2002-04-02T12:00:00&#34;), xs:dateTime(&#34;2002-04-02T12:00:00&#34;)), true()))">
            <err>Failure running op:dateTime-equal(xs:dateTime("2002-04-02T12:00:00"), xs:dateTime("2002-04-02T12:00:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:dateTime-equal(xs:dateTime(&#34;2002-04-02T23:00:00-04:00&#34;), xs:dateTime(&#34;2002-04-03T02:00:00-01:00&#34;)), true()))">
            <err>Failure running op:dateTime-equal(xs:dateTime("2002-04-02T23:00:00-04:00"), xs:dateTime("2002-04-03T02:00:00-01:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:dateTime-equal(xs:dateTime(&#34;1999-12-31T24:00:00&#34;), xs:dateTime(&#34;2000-01-01T00:00:00&#34;)), true()))">
            <err>Failure running op:dateTime-equal(xs:dateTime("1999-12-31T24:00:00"), xs:dateTime("2000-01-01T00:00:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:dateTime-equal(xs:dateTime(&#34;2005-04-04T24:00:00&#34;), xs:dateTime(&#34;2005-04-04T00:00:00&#34;)), false()))">
            <err>Failure running op:dateTime-equal(xs:dateTime("2005-04-04T24:00:00"), xs:dateTime("2005-04-04T00:00:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:date-equal(xs:date(&#34;2004-12-25Z&#34;), xs:date(&#34;2004-12-25+07:00&#34;)), false()))">
            <err>Failure running op:date-equal(xs:date("2004-12-25Z"), xs:date("2004-12-25+07:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:date-equal(xs:date(&#34;2004-12-25-12:00&#34;), xs:date(&#34;2004-12-26+12:00&#34;)), true()))">
            <err>Failure running op:date-equal(xs:date("2004-12-25-12:00"), xs:date("2004-12-26+12:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:date-less-than(xs:date(&#34;2004-12-25Z&#34;), xs:date(&#34;2004-12-25-05:00&#34;)), true()))">
            <err>Failure running op:date-less-than(xs:date("2004-12-25Z"), xs:date("2004-12-25-05:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:date-less-than(xs:date(&#34;2004-12-25-12:00&#34;), xs:date(&#34;2004-12-26+12:00&#34;)), false()))">
            <err>Failure running op:date-less-than(xs:date("2004-12-25-12:00"), xs:date("2004-12-26+12:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:date-greater-than(xs:date(&#34;2004-12-25Z&#34;), xs:date(&#34;2004-12-25+07:00&#34;)), true()))">
            <err>Failure running op:date-greater-than(xs:date("2004-12-25Z"), xs:date("2004-12-25+07:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:date-greater-than(xs:date(&#34;2004-12-25-12:00&#34;), xs:date(&#34;2004-12-26+12:00&#34;)), false()))">
            <err>Failure running op:date-greater-than(xs:date("2004-12-25-12:00"), xs:date("2004-12-26+12:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:time-equal(xs:time(&#34;08:00:00+09:00&#34;), xs:time(&#34;17:00:00-06:00&#34;)), false()))">
            <err>Failure running op:time-equal(xs:time("08:00:00+09:00"), xs:time("17:00:00-06:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:time-equal(xs:time(&#34;21:30:00+10:30&#34;), xs:time(&#34;06:00:00-05:00&#34;)), true()))">
            <err>Failure running op:time-equal(xs:time("21:30:00+10:30"), xs:time("06:00:00-05:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:time-equal(xs:time(&#34;24:00:00+01:00&#34;), xs:time(&#34;00:00:00+01:00&#34;)), true()))">
            <err>Failure running op:time-equal(xs:time("24:00:00+01:00"), xs:time("00:00:00+01:00"))</err>
         </xsl:if>
         <xsl:if test="implicit-timezone() eq xs:duration('-PT5H') and not(deep-equal(op:time-less-than(xs:time(&#34;12:00:00&#34;), xs:time(&#34;23:00:00+06:00&#34;)), false()))">
            <err>Failure running op:time-less-than(xs:time("12:00:00"), xs:time("23:00:00+06:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:time-less-than(xs:time(&#34;11:00:00&#34;), xs:time(&#34;17:00:00Z&#34;)), true()))">
            <err>Failure running op:time-less-than(xs:time("11:00:00"), xs:time("17:00:00Z"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:time-less-than(xs:time(&#34;23:59:59&#34;), xs:time(&#34;24:00:00&#34;)), false()))">
            <err>Failure running op:time-less-than(xs:time("23:59:59"), xs:time("24:00:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:time-greater-than(xs:time(&#34;08:00:00+09:00&#34;), xs:time(&#34;17:00:00-06:00&#34;)), false()))">
            <err>Failure running op:time-greater-than(xs:time("08:00:00+09:00"), xs:time("17:00:00-06:00"))</err>
         </xsl:if>
         <xsl:if test="implicit-timezone() eq xs:duration('-PT5H') and not(deep-equal(op:gYear-equal(xs:gYear(&#34;1976-05:00&#34;), xs:gYear(&#34;1976&#34;)), true()))">
            <err>Failure running op:gYear-equal(xs:gYear("1976-05:00"), xs:gYear("1976"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:gMonthDay-equal(xs:gMonthDay(&#34;--12-25-14:00&#34;), xs:gMonthDay(&#34;--12-26+10:00&#34;)), true()))">
            <err>Failure running op:gMonthDay-equal(xs:gMonthDay("--12-25-14:00"), xs:gMonthDay("--12-26+10:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:gMonthDay-equal(xs:gMonthDay(&#34;--12-25&#34;), xs:gMonthDay(&#34;--12-26Z&#34;)), false()))">
            <err>Failure running op:gMonthDay-equal(xs:gMonthDay("--12-25"), xs:gMonthDay("--12-26Z"))</err>
         </xsl:if>
         <xsl:if test="implicit-timezone() eq xs:duration('-PT5H') and not(deep-equal(op:gMonth-equal(xs:gMonth(&#34;--12-14:00&#34;), xs:gMonth(&#34;--12+10:00&#34;)), false()))">
            <err>Failure running op:gMonth-equal(xs:gMonth("--12-14:00"), xs:gMonth("--12+10:00"))</err>
         </xsl:if>
         <xsl:if test="implicit-timezone() eq xs:duration('-PT5H') and not(deep-equal(op:gMonth-equal(xs:gMonth(&#34;--12&#34;), xs:gMonth(&#34;--12Z&#34;)), false()))">
            <err>Failure running op:gMonth-equal(xs:gMonth("--12"), xs:gMonth("--12Z"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:gDay-equal(xs:gDay(&#34;---25-14:00&#34;), xs:gDay(&#34;---25+10:00&#34;)), false()))">
            <err>Failure running op:gDay-equal(xs:gDay("---25-14:00"), xs:gDay("---25+10:00"))</err>
         </xsl:if>
         <xsl:if test="implicit-timezone() eq xs:duration('-PT5H') and not(deep-equal(op:gDay-equal(xs:gDay(&#34;---12&#34;), xs:gDay(&#34;---12Z&#34;)), false()))">
            <err>Failure running op:gDay-equal(xs:gDay("---12"), xs:gDay("---12Z"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:year-from-dateTime(xs:dateTime(&#34;1999-05-31T13:20:00-05:00&#34;)), 1999))">
            <err>Failure running fn:year-from-dateTime(xs:dateTime("1999-05-31T13:20:00-05:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:year-from-dateTime(xs:dateTime(&#34;1999-05-31T21:30:00-05:00&#34;)), 1999))">
            <err>Failure running fn:year-from-dateTime(xs:dateTime("1999-05-31T21:30:00-05:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:year-from-dateTime(xs:dateTime(&#34;1999-12-31T19:20:00&#34;)), 1999))">
            <err>Failure running fn:year-from-dateTime(xs:dateTime("1999-12-31T19:20:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:year-from-dateTime(xs:dateTime(&#34;1999-12-31T24:00:00&#34;)), 2000))">
            <err>Failure running fn:year-from-dateTime(xs:dateTime("1999-12-31T24:00:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:month-from-dateTime(xs:dateTime(&#34;1999-05-31T13:20:00-05:00&#34;)), 5))">
            <err>Failure running fn:month-from-dateTime(xs:dateTime("1999-05-31T13:20:00-05:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:month-from-dateTime(xs:dateTime(&#34;1999-12-31T19:20:00-05:00&#34;)), 12))">
            <err>Failure running fn:month-from-dateTime(xs:dateTime("1999-12-31T19:20:00-05:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:month-from-dateTime(fn:adjust-dateTime-to-timezone(xs:dateTime(&#34;1999-12-31T19:20:00-05:00&#34;), xs:dayTimeDuration(&#34;PT0S&#34;))), 1))">
            <err>Failure running fn:month-from-dateTime(fn:adjust-dateTime-to-timezone(xs:dateTime("1999-12-31T19:20:00-05:00"), xs:dayTimeDuration("PT0S")))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:day-from-dateTime(xs:dateTime(&#34;1999-05-31T13:20:00-05:00&#34;)), 31))">
            <err>Failure running fn:day-from-dateTime(xs:dateTime("1999-05-31T13:20:00-05:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:day-from-dateTime(xs:dateTime(&#34;1999-12-31T20:00:00-05:00&#34;)), 31))">
            <err>Failure running fn:day-from-dateTime(xs:dateTime("1999-12-31T20:00:00-05:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:day-from-dateTime(fn:adjust-dateTime-to-timezone(xs:dateTime(&#34;1999-12-31T19:20:00-05:00&#34;), xs:dayTimeDuration(&#34;PT0S&#34;))), 1))">
            <err>Failure running fn:day-from-dateTime(fn:adjust-dateTime-to-timezone(xs:dateTime("1999-12-31T19:20:00-05:00"), xs:dayTimeDuration("PT0S")))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:hours-from-dateTime(xs:dateTime(&#34;1999-05-31T08:20:00-05:00&#34;)), 8))">
            <err>Failure running fn:hours-from-dateTime(xs:dateTime("1999-05-31T08:20:00-05:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:hours-from-dateTime(xs:dateTime(&#34;1999-12-31T21:20:00-05:00&#34;)), 21))">
            <err>Failure running fn:hours-from-dateTime(xs:dateTime("1999-12-31T21:20:00-05:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:hours-from-dateTime(fn:adjust-dateTime-to-timezone(xs:dateTime(&#34;1999-12-31T21:20:00-05:00&#34;), xs:dayTimeDuration(&#34;PT0S&#34;))), 2))">
            <err>Failure running fn:hours-from-dateTime(fn:adjust-dateTime-to-timezone(xs:dateTime("1999-12-31T21:20:00-05:00"), xs:dayTimeDuration("PT0S")))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:hours-from-dateTime(xs:dateTime(&#34;1999-12-31T12:00:00&#34;)), 12))">
            <err>Failure running fn:hours-from-dateTime(xs:dateTime("1999-12-31T12:00:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:hours-from-dateTime(xs:dateTime(&#34;1999-12-31T24:00:00&#34;)), 0))">
            <err>Failure running fn:hours-from-dateTime(xs:dateTime("1999-12-31T24:00:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:minutes-from-dateTime(xs:dateTime(&#34;1999-05-31T13:20:00-05:00&#34;)), 20))">
            <err>Failure running fn:minutes-from-dateTime(xs:dateTime("1999-05-31T13:20:00-05:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:minutes-from-dateTime(xs:dateTime(&#34;1999-05-31T13:30:00+05:30&#34;)), 30))">
            <err>Failure running fn:minutes-from-dateTime(xs:dateTime("1999-05-31T13:30:00+05:30"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:seconds-from-dateTime(xs:dateTime(&#34;1999-05-31T13:20:00-05:00&#34;)), 0))">
            <err>Failure running fn:seconds-from-dateTime(xs:dateTime("1999-05-31T13:20:00-05:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:timezone-from-dateTime(xs:dateTime(&#34;1999-05-31T13:20:00-05:00&#34;)), xs:dayTimeDuration(&#34;-PT5H&#34;)))">
            <err>Failure running fn:timezone-from-dateTime(xs:dateTime("1999-05-31T13:20:00-05:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:timezone-from-dateTime(xs:dateTime(&#34;2000-06-12T13:20:00Z&#34;)), xs:dayTimeDuration(&#34;PT0S&#34;)))">
            <err>Failure running fn:timezone-from-dateTime(xs:dateTime("2000-06-12T13:20:00Z"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:timezone-from-dateTime(xs:dateTime(&#34;2004-08-27T00:00:00&#34;)), ()))">
            <err>Failure running fn:timezone-from-dateTime(xs:dateTime("2004-08-27T00:00:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:year-from-date(xs:date(&#34;1999-05-31&#34;)), 1999))">
            <err>Failure running fn:year-from-date(xs:date("1999-05-31"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:year-from-date(xs:date(&#34;2000-01-01+05:00&#34;)), 2000))">
            <err>Failure running fn:year-from-date(xs:date("2000-01-01+05:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:month-from-date(xs:date(&#34;1999-05-31-05:00&#34;)), 5))">
            <err>Failure running fn:month-from-date(xs:date("1999-05-31-05:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:month-from-date(xs:date(&#34;2000-01-01+05:00&#34;)), 1))">
            <err>Failure running fn:month-from-date(xs:date("2000-01-01+05:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:day-from-date(xs:date(&#34;1999-05-31-05:00&#34;)), 31))">
            <err>Failure running fn:day-from-date(xs:date("1999-05-31-05:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:day-from-date(xs:date(&#34;2000-01-01+05:00&#34;)), 1))">
            <err>Failure running fn:day-from-date(xs:date("2000-01-01+05:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:timezone-from-date(xs:date(&#34;1999-05-31-05:00&#34;)), xs:dayTimeDuration(&#34;-PT5H&#34;)))">
            <err>Failure running fn:timezone-from-date(xs:date("1999-05-31-05:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:timezone-from-date(xs:date(&#34;2000-06-12Z&#34;)), xs:dayTimeDuration(&#34;PT0S&#34;)))">
            <err>Failure running fn:timezone-from-date(xs:date("2000-06-12Z"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:hours-from-time(xs:time(&#34;11:23:00&#34;)), 11))">
            <err>Failure running fn:hours-from-time(xs:time("11:23:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:hours-from-time(xs:time(&#34;21:23:00&#34;)), 21))">
            <err>Failure running fn:hours-from-time(xs:time("21:23:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:hours-from-time(xs:time(&#34;01:23:00+05:00&#34;)), 1))">
            <err>Failure running fn:hours-from-time(xs:time("01:23:00+05:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:hours-from-time(fn:adjust-time-to-timezone(xs:time(&#34;01:23:00+05:00&#34;), xs:dayTimeDuration(&#34;PT0S&#34;))), 20))">
            <err>Failure running fn:hours-from-time(fn:adjust-time-to-timezone(xs:time("01:23:00+05:00"), xs:dayTimeDuration("PT0S")))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:hours-from-time(xs:time(&#34;24:00:00&#34;)), 0))">
            <err>Failure running fn:hours-from-time(xs:time("24:00:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:minutes-from-time(xs:time(&#34;13:00:00Z&#34;)), 0))">
            <err>Failure running fn:minutes-from-time(xs:time("13:00:00Z"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:seconds-from-time(xs:time(&#34;13:20:10.5&#34;)), 10.5))">
            <err>Failure running fn:seconds-from-time(xs:time("13:20:10.5"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:timezone-from-time(xs:time(&#34;13:20:00-05:00&#34;)), xs:dayTimeDuration(&#34;-PT5H&#34;)))">
            <err>Failure running fn:timezone-from-time(xs:time("13:20:00-05:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:timezone-from-time(xs:time(&#34;13:20:00&#34;)), ()))">
            <err>Failure running fn:timezone-from-time(xs:time("13:20:00"))</err>
         </xsl:if>
         <xsl:variable name="tz-10" select="xs:dayTimeDuration(&#34;-PT10H&#34;)"/>
         <xsl:if test="implicit-timezone() eq xs:duration('-PT5H') and not(deep-equal(fn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00')), xs:dateTime('2002-03-07T10:00:00-05:00')))">
            <err>Failure running fn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00'))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00-07:00')), xs:dateTime('2002-03-07T12:00:00-05:00')))">
            <err>Failure running fn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00-07:00'))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00'), $tz-10), xs:dateTime('2002-03-07T10:00:00-10:00')))">
            <err>Failure running fn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00'), $tz-10)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00-07:00'), $tz-10), xs:dateTime('2002-03-07T07:00:00-10:00')))">
            <err>Failure running fn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00-07:00'), $tz-10)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00-07:00'), xs:dayTimeDuration(&#34;PT10H&#34;)), xs:dateTime('2002-03-08T03:00:00+10:00')))">
            <err>Failure running fn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00-07:00'), xs:dayTimeDuration("PT10H"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T00:00:00+01:00'), xs:dayTimeDuration(&#34;-PT8H&#34;)), xs:dateTime('2002-03-06T15:00:00-08:00')))">
            <err>Failure running fn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T00:00:00+01:00'), xs:dayTimeDuration("-PT8H"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00'), ()), xs:dateTime('2002-03-07T10:00:00')))">
            <err>Failure running fn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00'), ())</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00-07:00'), ()), xs:dateTime('2002-03-07T10:00:00')))">
            <err>Failure running fn:adjust-dateTime-to-timezone(xs:dateTime('2002-03-07T10:00:00-07:00'), ())</err>
         </xsl:if>
         <xsl:variable name="tz-10" select="xs:dayTimeDuration(&#34;-PT10H&#34;)"/>
         <xsl:if test="implicit-timezone() eq xs:duration('-PT5H') and not(deep-equal(fn:adjust-date-to-timezone(xs:date(&#34;2002-03-07&#34;)), xs:date(&#34;2002-03-07-05:00&#34;)))">
            <err>Failure running fn:adjust-date-to-timezone(xs:date("2002-03-07"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:adjust-date-to-timezone(xs:date(&#34;2002-03-07-07:00&#34;)), xs:date(&#34;2002-03-07-05:00&#34;)))">
            <err>Failure running fn:adjust-date-to-timezone(xs:date("2002-03-07-07:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:adjust-date-to-timezone(xs:date(&#34;2002-03-07&#34;), $tz-10), xs:date(&#34;2002-03-07-10:00&#34;)))">
            <err>Failure running fn:adjust-date-to-timezone(xs:date("2002-03-07"), $tz-10)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:adjust-date-to-timezone(xs:date(&#34;2002-03-07-07:00&#34;), $tz-10), xs:date(&#34;2002-03-06-10:00&#34;)))">
            <err>Failure running fn:adjust-date-to-timezone(xs:date("2002-03-07-07:00"), $tz-10)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:adjust-date-to-timezone(xs:date(&#34;2002-03-07&#34;), ()), xs:date(&#34;2002-03-07&#34;)))">
            <err>Failure running fn:adjust-date-to-timezone(xs:date("2002-03-07"), ())</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:adjust-date-to-timezone(xs:date(&#34;2002-03-07-07:00&#34;), ()), xs:date(&#34;2002-03-07&#34;)))">
            <err>Failure running fn:adjust-date-to-timezone(xs:date("2002-03-07-07:00"), ())</err>
         </xsl:if>
         <xsl:variable name="tz-10" select="xs:dayTimeDuration(&#34;-PT10H&#34;)"/>
         <xsl:if test="implicit-timezone() eq xs:duration('-PT5H') and not(deep-equal(fn:adjust-time-to-timezone(xs:time(&#34;10:00:00&#34;)), xs:time(&#34;10:00:00-05:00&#34;)))">
            <err>Failure running fn:adjust-time-to-timezone(xs:time("10:00:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:adjust-time-to-timezone(xs:time(&#34;10:00:00-07:00&#34;)), xs:time(&#34;12:00:00-05:00&#34;)))">
            <err>Failure running fn:adjust-time-to-timezone(xs:time("10:00:00-07:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:adjust-time-to-timezone(xs:time(&#34;10:00:00&#34;), $tz-10), xs:time(&#34;10:00:00-10:00&#34;)))">
            <err>Failure running fn:adjust-time-to-timezone(xs:time("10:00:00"), $tz-10)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:adjust-time-to-timezone(xs:time(&#34;10:00:00-07:00&#34;), $tz-10), xs:time(&#34;07:00:00-10:00&#34;)))">
            <err>Failure running fn:adjust-time-to-timezone(xs:time("10:00:00-07:00"), $tz-10)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:adjust-time-to-timezone(xs:time(&#34;10:00:00&#34;), ()), xs:time(&#34;10:00:00&#34;)))">
            <err>Failure running fn:adjust-time-to-timezone(xs:time("10:00:00"), ())</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:adjust-time-to-timezone(xs:time(&#34;10:00:00-07:00&#34;), ()), xs:time(&#34;10:00:00&#34;)))">
            <err>Failure running fn:adjust-time-to-timezone(xs:time("10:00:00-07:00"), ())</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:adjust-time-to-timezone(xs:time(&#34;10:00:00-07:00&#34;), xs:dayTimeDuration(&#34;PT10H&#34;)), xs:time(&#34;03:00:00+10:00&#34;)))">
            <err>Failure running fn:adjust-time-to-timezone(xs:time("10:00:00-07:00"), xs:dayTimeDuration("PT10H"))</err>
         </xsl:if>
         <xsl:if test="implicit-timezone() eq xs:duration('-PT5H') and not(deep-equal(op:subtract-dateTimes(xs:dateTime(&#34;2000-10-30T06:12:00&#34;), xs:dateTime(&#34;1999-11-28T09:00:00Z&#34;)), xs:dayTimeDuration(&#34;P337DT2H12M&#34;)))">
            <err>Failure running op:subtract-dateTimes(xs:dateTime("2000-10-30T06:12:00"), xs:dateTime("1999-11-28T09:00:00Z"))</err>
         </xsl:if>
         <xsl:if test="implicit-timezone() eq xs:duration('PT0S') and not(deep-equal(op:subtract-dates(xs:date(&#34;2000-10-30&#34;), xs:date(&#34;1999-11-28&#34;)), xs:dayTimeDuration(&#34;P337D&#34;)))">
            <err>Failure running op:subtract-dates(xs:date("2000-10-30"), xs:date("1999-11-28"))</err>
         </xsl:if>
         <xsl:if test="implicit-timezone() eq xs:duration('PT5H') and not(deep-equal(op:subtract-dates(xs:date(&#34;2000-10-30&#34;), xs:date(&#34;1999-11-28Z&#34;)), xs:dayTimeDuration(&#34;P336DT19H&#34;)))">
            <err>Failure running op:subtract-dates(xs:date("2000-10-30"), xs:date("1999-11-28Z"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:subtract-dates(xs:date(&#34;2000-10-15-05:00&#34;), xs:date(&#34;2000-10-10+02:00&#34;)), xs:dayTimeDuration(&#34;P5DT7H&#34;)))">
            <err>Failure running op:subtract-dates(xs:date("2000-10-15-05:00"), xs:date("2000-10-10+02:00"))</err>
         </xsl:if>
         <xsl:if test="implicit-timezone() eq xs:duration('-PT5H') and not(deep-equal(op:subtract-times(xs:time(&#34;11:12:00Z&#34;), xs:time(&#34;04:00:00&#34;)), xs:dayTimeDuration(&#34;PT2H12M&#34;)))">
            <err>Failure running op:subtract-times(xs:time("11:12:00Z"), xs:time("04:00:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:subtract-times(xs:time(&#34;11:00:00-05:00&#34;), xs:time(&#34;21:30:00+05:30&#34;)), xs:dayTimeDuration(&#34;PT0S&#34;)))">
            <err>Failure running op:subtract-times(xs:time("11:00:00-05:00"), xs:time("21:30:00+05:30"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:subtract-times(xs:time(&#34;17:00:00-06:00&#34;), xs:time(&#34;08:00:00+09:00&#34;)), xs:dayTimeDuration(&#34;P1D&#34;)))">
            <err>Failure running op:subtract-times(xs:time("17:00:00-06:00"), xs:time("08:00:00+09:00"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:subtract-times(xs:time(&#34;24:00:00&#34;), xs:time(&#34;23:59:59&#34;)), xs:dayTimeDuration(&#34;-PT23H59M59S&#34;)))">
            <err>Failure running op:subtract-times(xs:time("24:00:00"), xs:time("23:59:59"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:add-yearMonthDuration-to-dateTime(xs:dateTime(&#34;2000-10-30T11:12:00&#34;), xs:yearMonthDuration(&#34;P1Y2M&#34;)), xs:dateTime(&#34;2001-12-30T11:12:00&#34;)))">
            <err>Failure running op:add-yearMonthDuration-to-dateTime(xs:dateTime("2000-10-30T11:12:00"), xs:yearMonthDuration("P1Y2M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:add-dayTimeDuration-to-dateTime(xs:dateTime(&#34;2000-10-30T11:12:00&#34;), xs:dayTimeDuration(&#34;P3DT1H15M&#34;)), xs:dateTime(&#34;2000-11-02T12:27:00&#34;)))">
            <err>Failure running op:add-dayTimeDuration-to-dateTime(xs:dateTime("2000-10-30T11:12:00"), xs:dayTimeDuration("P3DT1H15M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:subtract-yearMonthDuration-from-dateTime(xs:dateTime(&#34;2000-10-30T11:12:00&#34;), xs:yearMonthDuration(&#34;P1Y2M&#34;)), xs:dateTime(&#34;1999-08-30T11:12:00&#34;)))">
            <err>Failure running op:subtract-yearMonthDuration-from-dateTime(xs:dateTime("2000-10-30T11:12:00"), xs:yearMonthDuration("P1Y2M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:subtract-dayTimeDuration-from-dateTime(xs:dateTime(&#34;2000-10-30T11:12:00&#34;), xs:dayTimeDuration(&#34;P3DT1H15M&#34;)), xs:dateTime(&#34;2000-10-27T09:57:00&#34;)))">
            <err>Failure running op:subtract-dayTimeDuration-from-dateTime(xs:dateTime("2000-10-30T11:12:00"), xs:dayTimeDuration("P3DT1H15M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:add-yearMonthDuration-to-date(xs:date(&#34;2000-10-30&#34;), xs:yearMonthDuration(&#34;P1Y2M&#34;)), xs:date(&#34;2001-12-30&#34;)))">
            <err>Failure running op:add-yearMonthDuration-to-date(xs:date("2000-10-30"), xs:yearMonthDuration("P1Y2M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:add-dayTimeDuration-to-date(xs:date(&#34;2004-10-30Z&#34;), xs:dayTimeDuration(&#34;P2DT2H30M0S&#34;)), xs:date(&#34;2004-11-01Z&#34;)))">
            <err>Failure running op:add-dayTimeDuration-to-date(xs:date("2004-10-30Z"), xs:dayTimeDuration("P2DT2H30M0S"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:subtract-yearMonthDuration-from-date(xs:date(&#34;2000-10-30&#34;), xs:yearMonthDuration(&#34;P1Y2M&#34;)), xs:date(&#34;1999-08-30&#34;)))">
            <err>Failure running op:subtract-yearMonthDuration-from-date(xs:date("2000-10-30"), xs:yearMonthDuration("P1Y2M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:subtract-yearMonthDuration-from-date(xs:date(&#34;2000-02-29Z&#34;), xs:yearMonthDuration(&#34;P1Y&#34;)), xs:date(&#34;1999-02-28Z&#34;)))">
            <err>Failure running op:subtract-yearMonthDuration-from-date(xs:date("2000-02-29Z"), xs:yearMonthDuration("P1Y"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:subtract-yearMonthDuration-from-date(xs:date(&#34;2000-10-31-05:00&#34;), xs:yearMonthDuration(&#34;P1Y1M&#34;)), xs:date(&#34;1999-09-30-05:00&#34;)))">
            <err>Failure running op:subtract-yearMonthDuration-from-date(xs:date("2000-10-31-05:00"), xs:yearMonthDuration("P1Y1M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:subtract-dayTimeDuration-from-date(xs:date(&#34;2000-10-30&#34;), xs:dayTimeDuration(&#34;P3DT1H15M&#34;)), xs:date(&#34;2000-10-26&#34;)))">
            <err>Failure running op:subtract-dayTimeDuration-from-date(xs:date("2000-10-30"), xs:dayTimeDuration("P3DT1H15M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:add-dayTimeDuration-to-time(xs:time(&#34;11:12:00&#34;), xs:dayTimeDuration(&#34;P3DT1H15M&#34;)), xs:time(&#34;12:27:00&#34;)))">
            <err>Failure running op:add-dayTimeDuration-to-time(xs:time("11:12:00"), xs:dayTimeDuration("P3DT1H15M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:add-dayTimeDuration-to-time(xs:time(&#34;23:12:00+03:00&#34;), xs:dayTimeDuration(&#34;P1DT3H15M&#34;)), xs:time(&#34;02:27:00+03:00&#34;)))">
            <err>Failure running op:add-dayTimeDuration-to-time(xs:time("23:12:00+03:00"), xs:dayTimeDuration("P1DT3H15M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:subtract-dayTimeDuration-from-time(xs:time(&#34;11:12:00&#34;), xs:dayTimeDuration(&#34;P3DT1H15M&#34;)), xs:time(&#34;09:57:00&#34;)))">
            <err>Failure running op:subtract-dayTimeDuration-from-time(xs:time("11:12:00"), xs:dayTimeDuration("P3DT1H15M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:subtract-dayTimeDuration-from-time(xs:time(&#34;08:20:00-05:00&#34;), xs:dayTimeDuration(&#34;P23DT10H10M&#34;)), xs:time(&#34;22:10:00-05:00&#34;)))">
            <err>Failure running op:subtract-dayTimeDuration-from-time(xs:time("08:20:00-05:00"), xs:dayTimeDuration("P23DT10H10M"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:local-name-from-QName(fn:QName(&#34;http://www.example.com/example&#34;, &#34;person&#34;)), &#34;person&#34;))">
            <err>Failure running fn:local-name-from-QName(fn:QName("http://www.example.com/example", "person"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:namespace-uri-from-QName(fn:QName(&#34;http://www.example.com/example&#34;, &#34;person&#34;)), xs:anyURI(&#34;http://www.example.com/example&#34;)))">
            <err>Failure running fn:namespace-uri-from-QName(fn:QName("http://www.example.com/example", "person"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:number($item1/quantity), 5.0e0))">
            <err>Failure running fn:number($item1/quantity)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:number($item2/description), xs:double('NaN')))">
            <err>Failure running fn:number($item2/description)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:is-same-node($item1, $item1), true()))">
            <err>Failure running op:is-same-node($item1, $item1)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:is-same-node($item1, $item2), false()))">
            <err>Failure running op:is-same-node($item1, $item2)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:node-before($item1, $item2), true()))">
            <err>Failure running op:node-before($item1, $item2)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:node-before($item1, $item1), false()))">
            <err>Failure running op:node-before($item1, $item1)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:node-after($item1, $item2), false()))">
            <err>Failure running op:node-after($item1, $item2)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:node-after($item1, $item1), false()))">
            <err>Failure running op:node-after($item1, $item1)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:node-after($item2, $item1), true()))">
            <err>Failure running op:node-after($item2, $item1)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:concatenate((1, 2, 3), (4, 5)), (1, 2, 3, 4, 5)))">
            <err>Failure running op:concatenate((1, 2, 3), (4, 5))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:concatenate((1, 2, 3), ()), (1, 2, 3)))">
            <err>Failure running op:concatenate((1, 2, 3), ())</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:concatenate((), ()), ()))">
            <err>Failure running op:concatenate((), ())</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:index-of((10, 20, 30, 40), 35), ()))">
            <err>Failure running fn:index-of((10, 20, 30, 40), 35)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:index-of((10, 20, 30, 30, 20, 10), 20), (2, 5)))">
            <err>Failure running fn:index-of((10, 20, 30, 30, 20, 10), 20)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:index-of((&#34;a&#34;, &#34;sport&#34;, &#34;and&#34;, &#34;a&#34;, &#34;pastime&#34;), &#34;a&#34;), (1, 4)))">
            <err>Failure running fn:index-of(("a", "sport", "and", "a", "pastime"), "a")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:empty((1,2,3)[10]), true()))">
            <err>Failure running fn:empty((1,2,3)[10])</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:empty(fn:remove((&#34;hello&#34;, &#34;world&#34;), 1)), false()))">
            <err>Failure running fn:empty(fn:remove(("hello", "world"), 1))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:exists(fn:remove((&#34;hello&#34;), 1)), false()))">
            <err>Failure running fn:exists(fn:remove(("hello"), 1))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:exists(fn:remove((&#34;hello&#34;, &#34;world&#34;), 1)), true()))">
            <err>Failure running fn:exists(fn:remove(("hello", "world"), 1))</err>
         </xsl:if>
         <xsl:if test="count(fn:distinct-values((1, 2.0, 3, 2))) eq count((1, 3, 2.0)) and (every $v in (fn:distinct-values((1, 2.0, 3, 2))) satisfies $v = ((1, 3, 2.0)))">
            <err>Failure running fn:distinct-values((1, 2.0, 3, 2))</err>
         </xsl:if>
         <xsl:if test="count(fn:distinct-values((xs:untypedAtomic(&#34;cherry&#34;), xs:untypedAtomic(&#34;plum&#34;), xs:untypedAtomic(&#34;plum&#34;)))) eq count((xs:untypedAtomic(&#34;cherry&#34;), xs:untypedAtomic(&#34;plum&#34;))) and (every $v in (fn:distinct-values((xs:untypedAtomic(&#34;cherry&#34;), xs:untypedAtomic(&#34;plum&#34;), xs:untypedAtomic(&#34;plum&#34;)))) satisfies $v = ((xs:untypedAtomic(&#34;cherry&#34;), xs:untypedAtomic(&#34;plum&#34;))))">
            <err>Failure running fn:distinct-values((xs:untypedAtomic("cherry"), xs:untypedAtomic("plum"), xs:untypedAtomic("plum")))</err>
         </xsl:if>
         <xsl:variable name="abc" select="(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;)"/>
         <xsl:if test="not(deep-equal(fn:insert-before($abc, 0, &#34;z&#34;), (&#34;z&#34;, &#34;a&#34;, &#34;b&#34;, &#34;c&#34;)))">
            <err>Failure running fn:insert-before($abc, 0, "z")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:insert-before($abc, 1, &#34;z&#34;), (&#34;z&#34;, &#34;a&#34;, &#34;b&#34;, &#34;c&#34;)))">
            <err>Failure running fn:insert-before($abc, 1, "z")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:insert-before($abc, 2, &#34;z&#34;), (&#34;a&#34;, &#34;z&#34;, &#34;b&#34;, &#34;c&#34;)))">
            <err>Failure running fn:insert-before($abc, 2, "z")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:insert-before($abc, 3, &#34;z&#34;), (&#34;a&#34;, &#34;b&#34;, &#34;z&#34;, &#34;c&#34;)))">
            <err>Failure running fn:insert-before($abc, 3, "z")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:insert-before($abc, 4, &#34;z&#34;), (&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;z&#34;)))">
            <err>Failure running fn:insert-before($abc, 4, "z")</err>
         </xsl:if>
         <xsl:variable name="abc" select="(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;)"/>
         <xsl:if test="not(deep-equal(fn:remove($abc, 0), (&#34;a&#34;, &#34;b&#34;, &#34;c&#34;)))">
            <err>Failure running fn:remove($abc, 0)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:remove($abc, 1), (&#34;b&#34;, &#34;c&#34;)))">
            <err>Failure running fn:remove($abc, 1)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:remove($abc, 6), (&#34;a&#34;, &#34;b&#34;, &#34;c&#34;)))">
            <err>Failure running fn:remove($abc, 6)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:remove((), 3), ()))">
            <err>Failure running fn:remove((), 3)</err>
         </xsl:if>
         <xsl:variable name="abc" select="(&#34;a&#34;, &#34;b&#34;, &#34;c&#34;)"/>
         <xsl:if test="not(deep-equal(fn:reverse($abc), (&#34;c&#34;, &#34;b&#34;, &#34;a&#34;)))">
            <err>Failure running fn:reverse($abc)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:reverse((&#34;hello&#34;)), (&#34;hello&#34;)))">
            <err>Failure running fn:reverse(("hello"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:reverse(()), ()))">
            <err>Failure running fn:reverse(())</err>
         </xsl:if>
         <xsl:variable name="seq" select="(&#34;item1&#34;, &#34;item2&#34;, &#34;item3&#34;, &#34;item4&#34;, &#34;item5&#34;)"/>
         <xsl:if test="not(deep-equal(fn:subsequence($seq, 4), (&#34;item4&#34;, &#34;item5&#34;)))">
            <err>Failure running fn:subsequence($seq, 4)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:subsequence($seq, 3, 2), (&#34;item3&#34;, &#34;item4&#34;)))">
            <err>Failure running fn:subsequence($seq, 3, 2)</err>
         </xsl:if>
         <xsl:if test="count(fn:unordered((1, 2, 3, 4, 5))) eq count((1, 2, 3, 4, 5)) and (every $v in (fn:unordered((1, 2, 3, 4, 5))) satisfies $v = ((1, 2, 3, 4, 5)))">
            <err>Failure running fn:unordered((1, 2, 3, 4, 5))</err>
         </xsl:if>
         <xsl:variable name="at" as="element()"><attendees> 
  <name last='Parker' first='Peter'/> 
  <name last='Barker' first='Bob'/> 
  <name last='Parker' first='Peter'/> 
</attendees></xsl:variable>
         <xsl:if test="not(deep-equal(fn:deep-equal($at, $at/*), false()))">
            <err>Failure running fn:deep-equal($at, $at/*)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:deep-equal($at/name[1], $at/name[2]), false()))">
            <err>Failure running fn:deep-equal($at/name[1], $at/name[2])</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:deep-equal($at/name[1], $at/name[3]), true()))">
            <err>Failure running fn:deep-equal($at/name[1], $at/name[3])</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:deep-equal($at/name[1], 'Peter Parker'), false()))">
            <err>Failure running fn:deep-equal($at/name[1], 'Peter Parker')</err>
         </xsl:if>
         <xsl:variable name="seq1" select="($item1, $item2)"/>
         <xsl:variable name="seq2" select="($item2, $item2, $item1)"/>
         <xsl:variable name="seq3" select="($item2, $item3)"/>
         <xsl:if test="not(deep-equal(op:union($seq1, $seq1), ($item1, $item2)))">
            <err>Failure running op:union($seq1, $seq1)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:union($seq2, $seq3), ($item1, $item2, $item3)))">
            <err>Failure running op:union($seq2, $seq3)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:union($seq2, ()), ($item1, $item2)))">
            <err>Failure running op:union($seq2, ())</err>
         </xsl:if>
         <xsl:variable name="seq1" select="($item1, $item2)"/>
         <xsl:variable name="seq2" select="($item2, $item2, $item1)"/>
         <xsl:variable name="seq3" select="($item2, $item3)"/>
         <xsl:if test="not(deep-equal(op:intersect($seq1, $seq1), ($item1, $item2)))">
            <err>Failure running op:intersect($seq1, $seq1)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:intersect($seq2, $seq3), ($item2)))">
            <err>Failure running op:intersect($seq2, $seq3)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:intersect($seq2, ()), ()))">
            <err>Failure running op:intersect($seq2, ())</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:intersect($item1, $item3), ()))">
            <err>Failure running op:intersect($item1, $item3)</err>
         </xsl:if>
         <xsl:variable name="seq1" select="($item1, $item2)"/>
         <xsl:variable name="seq2" select="($item2, $item2, $item1)"/>
         <xsl:variable name="seq3" select="($item2, $item3)"/>
         <xsl:if test="not(deep-equal(op:except($seq1, $seq1), ()))">
            <err>Failure running op:except($seq1, $seq1)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:except($seq2, $seq1), ()))">
            <err>Failure running op:except($seq2, $seq1)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:except($seq2, $seq3), ($item1)))">
            <err>Failure running op:except($seq2, $seq3)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:except($seq2, ()), ($item1, $item2)))">
            <err>Failure running op:except($seq2, ())</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(op:except($seq3, $seq2), ($item3)))">
            <err>Failure running op:except($seq3, $seq2)</err>
         </xsl:if>
         <xsl:variable name="seq1" select="($item1, $item2)"/>
         <xsl:variable name="seq2" select="(98.5, 98.3, 98.9)"/>
         <xsl:variable name="seq3" select="()"/>
         <xsl:if test="not(deep-equal(fn:count($seq1), 2))">
            <err>Failure running fn:count($seq1)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:count($seq3), 0))">
            <err>Failure running fn:count($seq3)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:count($seq2), 3))">
            <err>Failure running fn:count($seq2)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:count($seq2[. &gt; 100]), 0))">
            <err>Failure running fn:count($seq2[. &gt; 100])</err>
         </xsl:if>
         <xsl:variable name="d1" select="xs:yearMonthDuration(&#34;P20Y&#34;)"/>
         <xsl:variable name="d2" select="xs:yearMonthDuration(&#34;P10M&#34;)"/>
         <xsl:variable name="seq3" select="(3, 4, 5)"/>
         <xsl:if test="not(deep-equal(fn:avg($seq3), 4.0))">
            <err>Failure running fn:avg($seq3)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:avg(($d1, $d2)), xs:yearMonthDuration(&#34;P10Y5M&#34;)))">
            <err>Failure running fn:avg(($d1, $d2))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:avg(()), ()))">
            <err>Failure running fn:avg(())</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:avg((xs:float('INF'), xs:float('-INF'))), xs:float('NaN')))">
            <err>Failure running fn:avg((xs:float('INF'), xs:float('-INF')))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:avg(($seq3, xs:float('NaN'))), xs:float('NaN')))">
            <err>Failure running fn:avg(($seq3, xs:float('NaN')))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:max((3,4,5)), 5))">
            <err>Failure running fn:max((3,4,5))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:max((xs:integer(5), xs:float(5.0), xs:double(0))), xs:double(5.0e0)))">
            <err>Failure running fn:max((xs:integer(5), xs:float(5.0), xs:double(0)))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:max((fn:current-date(), xs:date(&#34;2100-01-01&#34;))), xs:date(&#34;2100-01-01&#34;)))">
            <err>Failure running fn:max((fn:current-date(), xs:date("2100-01-01")))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:max((&#34;a&#34;, &#34;b&#34;, &#34;c&#34;)), &#34;c&#34;))">
            <err>Failure running fn:max(("a", "b", "c"))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:min((3,4,5)), 3))">
            <err>Failure running fn:min((3,4,5))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:min((xs:integer(5), xs:float(5), xs:double(10))), xs:double(5.0e0)))">
            <err>Failure running fn:min((xs:integer(5), xs:float(5), xs:double(10)))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:min((fn:current-date(), xs:date(&#34;1900-01-01&#34;))), xs:date(&#34;1900-01-01&#34;)))">
            <err>Failure running fn:min((fn:current-date(), xs:date("1900-01-01")))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:min((&#34;a&#34;, &#34;b&#34;, &#34;c&#34;)), &#34;a&#34;))">
            <err>Failure running fn:min(("a", "b", "c"))</err>
         </xsl:if>
         <xsl:variable name="d1" select="xs:yearMonthDuration(&#34;P20Y&#34;)"/>
         <xsl:variable name="d2" select="xs:yearMonthDuration(&#34;P10M&#34;)"/>
         <xsl:variable name="seq1" select="($d1, $d2)"/>
         <xsl:variable name="seq3" select="(3, 4, 5)"/>
         <xsl:if test="not(deep-equal(fn:sum(($d1, $d2)), xs:yearMonthDuration(&#34;P20Y10M&#34;)))">
            <err>Failure running fn:sum(($d1, $d2))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:sum($seq1[. lt xs:yearMonthDuration('P3M')], xs:yearMonthDuration('P0M')), xs:yearMonthDuration(&#34;P0M&#34;)))">
            <err>Failure running fn:sum($seq1[. lt xs:yearMonthDuration('P3M')], xs:yearMonthDuration('P0M'))</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:sum($seq3), 12))">
            <err>Failure running fn:sum($seq3)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:sum(()), 0))">
            <err>Failure running fn:sum(())</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:sum((),()), ()))">
            <err>Failure running fn:sum((),())</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:sum((1 to 100)[. lt 0], 0), 0))">
            <err>Failure running fn:sum((1 to 100)[. lt 0], 0)</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(fn:sum(($d1, $d2), &#34;ein Augenblick&#34;), xs:yearMonthDuration(&#34;P20Y10M&#34;)))">
            <err>Failure running fn:sum(($d1, $d2), "ein Augenblick")</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(1 to 3, (1, 2, 3)))">
            <err>Failure running 1 to 3</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(3 to 1, ()))">
            <err>Failure running 3 to 1</err>
         </xsl:if>
         <xsl:if test="not(deep-equal(5 to 5, 5))">
            <err>Failure running 5 to 5</err>
         </xsl:if>
         <xsl:variable name="emp" as="element()">
            <employee xml:id="ID21256">
               <empnr>E21256</empnr>
               <first>John</first>
               <last>Brown</last>
            </employee>
         </xsl:variable>
         <xsl:variable name="emp" as="element()">
            <employee xml:id="ID21256">
               <empnr>E21256</empnr>
               <first>John</first>
               <last>Brown</last>
            </employee>
         </xsl:variable>
         <xsl:if test="not(deep-equal((1 to 20)[fn:last() - 1], 19))">
            <err>Failure running (1 to 20)[fn:last() - 1]</err>
         </xsl:if>
      </errors>
   </xsl:template>
   <xsl:function name="op:numeric-add" as="xs:anyAtomicType">
      <xsl:param name="arg1" as="xs:anyAtomicType"/>
      <xsl:param name="arg2" as="xs:anyAtomicType"/>
      <xsl:sequence select="$arg1 + $arg2"/>
   </xsl:function>
   <xsl:function name="op:numeric-subtract" as="xs:anyAtomicType">
      <xsl:param name="arg1" as="xs:anyAtomicType"/>
      <xsl:param name="arg2" as="xs:anyAtomicType"/>
      <xsl:sequence select="$arg1 - $arg2"/>
   </xsl:function>
   <xsl:function name="op:numeric-multiply" as="xs:anyAtomicType">
      <xsl:param name="arg1" as="xs:anyAtomicType"/>
      <xsl:param name="arg2" as="xs:anyAtomicType"/>
      <xsl:sequence select="$arg1 * $arg2"/>
   </xsl:function>
   <xsl:function name="op:numeric-divide" as="xs:anyAtomicType">
      <xsl:param name="arg1" as="xs:anyAtomicType"/>
      <xsl:param name="arg2" as="xs:anyAtomicType"/>
      <xsl:sequence select="$arg1 div $arg2"/>
   </xsl:function>
   <xsl:function name="op:numeric-integer-divide" as="xs:integer">
      <xsl:param name="arg1" as="xs:anyAtomicType"/>
      <xsl:param name="arg2" as="xs:anyAtomicType"/>
      <xsl:sequence select="$arg1 idiv $arg2"/>
   </xsl:function>
   <xsl:function name="op:numeric-mod" as="xs:anyAtomicType">
      <xsl:param name="arg1" as="xs:anyAtomicType"/>
      <xsl:param name="arg2" as="xs:anyAtomicType"/>
      <xsl:sequence select="$arg1 mod $arg2"/>
   </xsl:function>
   <xsl:function name="op:numeric-unary-plus" as="xs:anyAtomicType">
      <xsl:param name="arg" as="xs:anyAtomicType"/>
      <xsl:sequence select="+ $arg"/>
   </xsl:function>
   <xsl:function name="op:numeric-unary-minus" as="xs:anyAtomicType">
      <xsl:param name="arg" as="xs:anyAtomicType"/>
      <xsl:sequence select="- $arg"/>
   </xsl:function>
   <xsl:function name="op:numeric-equal" as="xs:boolean">
      <xsl:param name="arg1" as="xs:anyAtomicType"/>
      <xsl:param name="arg2" as="xs:anyAtomicType"/>
      <xsl:sequence select="$arg1 eq $arg2"/>
   </xsl:function>
   <xsl:function name="op:numeric-less-than" as="xs:boolean">
      <xsl:param name="arg1" as="xs:anyAtomicType"/>
      <xsl:param name="arg2" as="xs:anyAtomicType"/>
      <xsl:sequence select="$arg1 lt $arg2"/>
   </xsl:function>
   <xsl:function name="op:numeric-greater-than" as="xs:boolean">
      <xsl:param name="arg1" as="xs:anyAtomicType"/>
      <xsl:param name="arg2" as="xs:anyAtomicType"/>
      <xsl:sequence select="$arg1 gt $arg2"/>
   </xsl:function>
   <xsl:function name="op:boolean-equal" as="xs:boolean">
      <xsl:param name="value1" as="xs:boolean"/>
      <xsl:param name="value2" as="xs:boolean"/>
      <xsl:sequence select="$value1 eq $value2"/>
   </xsl:function>
   <xsl:function name="op:boolean-less-than" as="xs:boolean">
      <xsl:param name="arg1" as="xs:boolean"/>
      <xsl:param name="arg2" as="xs:boolean"/>
      <xsl:sequence select="$arg1 lt $arg2"/>
   </xsl:function>
   <xsl:function name="op:boolean-greater-than" as="xs:boolean">
      <xsl:param name="arg1" as="xs:boolean"/>
      <xsl:param name="arg2" as="xs:boolean"/>
      <xsl:sequence select="$arg1 gt $arg2"/>
   </xsl:function>
   <xsl:function name="op:yearMonthDuration-less-than" as="xs:boolean">
      <xsl:param name="arg1" as="xs:yearMonthDuration"/>
      <xsl:param name="arg2" as="xs:yearMonthDuration"/>
      <xsl:sequence select="$arg1 lt $arg2"/>
   </xsl:function>
   <xsl:function name="op:yearMonthDuration-greater-than" as="xs:boolean">
      <xsl:param name="arg1" as="xs:yearMonthDuration"/>
      <xsl:param name="arg2" as="xs:yearMonthDuration"/>
      <xsl:sequence select="$arg1 gt $arg2"/>
   </xsl:function>
   <xsl:function name="op:dayTimeDuration-less-than" as="xs:boolean">
      <xsl:param name="arg1" as="xs:dayTimeDuration"/>
      <xsl:param name="arg2" as="xs:dayTimeDuration"/>
      <xsl:sequence select="$arg1 lt $arg2"/>
   </xsl:function>
   <xsl:function name="op:dayTimeDuration-greater-than" as="xs:boolean">
      <xsl:param name="arg1" as="xs:dayTimeDuration"/>
      <xsl:param name="arg2" as="xs:dayTimeDuration"/>
      <xsl:sequence select="$arg1 gt $arg2"/>
   </xsl:function>
   <xsl:function name="op:duration-equal" as="xs:boolean">
      <xsl:param name="arg1" as="xs:duration"/>
      <xsl:param name="arg2" as="xs:duration"/>
      <xsl:sequence select="$arg1 eq $arg2"/>
   </xsl:function>
   <xsl:function name="op:add-yearMonthDurations" as="xs:yearMonthDuration">
      <xsl:param name="arg1" as="xs:yearMonthDuration"/>
      <xsl:param name="arg2" as="xs:yearMonthDuration"/>
      <xsl:sequence select="$arg1 + $arg2"/>
   </xsl:function>
   <xsl:function name="op:subtract-yearMonthDurations" as="xs:yearMonthDuration">
      <xsl:param name="arg1" as="xs:yearMonthDuration"/>
      <xsl:param name="arg2" as="xs:yearMonthDuration"/>
      <xsl:sequence select="$arg1 - $arg2"/>
   </xsl:function>
   <xsl:function name="op:multiply-yearMonthDuration" as="xs:yearMonthDuration">
      <xsl:param name="arg1" as="xs:yearMonthDuration"/>
      <xsl:param name="arg2" as="xs:double"/>
      <xsl:sequence select="$arg1 * $arg2"/>
   </xsl:function>
   <xsl:function name="op:divide-yearMonthDuration" as="xs:yearMonthDuration">
      <xsl:param name="arg1" as="xs:yearMonthDuration"/>
      <xsl:param name="arg2" as="xs:double"/>
      <xsl:sequence select="$arg1 div $arg2"/>
   </xsl:function>
   <xsl:function name="op:divide-yearMonthDuration-by-yearMonthDuration" as="xs:decimal">
      <xsl:param name="arg1" as="xs:yearMonthDuration"/>
      <xsl:param name="arg2" as="xs:yearMonthDuration"/>
      <xsl:sequence select="$arg1 div $arg2"/>
   </xsl:function>
   <xsl:function name="op:add-dayTimeDurations" as="xs:dayTimeDuration">
      <xsl:param name="arg1" as="xs:dayTimeDuration"/>
      <xsl:param name="arg2" as="xs:dayTimeDuration"/>
      <xsl:sequence select="$arg1 + $arg2"/>
   </xsl:function>
   <xsl:function name="op:subtract-dayTimeDurations" as="xs:dayTimeDuration">
      <xsl:param name="arg1" as="xs:dayTimeDuration"/>
      <xsl:param name="arg2" as="xs:dayTimeDuration"/>
      <xsl:sequence select="$arg1 - $arg2"/>
   </xsl:function>
   <xsl:function name="op:multiply-dayTimeDuration" as="xs:dayTimeDuration">
      <xsl:param name="arg1" as="xs:dayTimeDuration"/>
      <xsl:param name="arg2" as="xs:double"/>
      <xsl:sequence select="$arg1 * $arg2"/>
   </xsl:function>
   <xsl:function name="op:divide-dayTimeDuration" as="xs:dayTimeDuration">
      <xsl:param name="arg1" as="xs:dayTimeDuration"/>
      <xsl:param name="arg2" as="xs:double"/>
      <xsl:sequence select="$arg1 div $arg2"/>
   </xsl:function>
   <xsl:function name="op:divide-dayTimeDuration-by-dayTimeDuration" as="xs:decimal">
      <xsl:param name="arg1" as="xs:dayTimeDuration"/>
      <xsl:param name="arg2" as="xs:dayTimeDuration"/>
      <xsl:sequence select="$arg1 div $arg2"/>
   </xsl:function>
   <xsl:function name="op:dateTime-equal" as="xs:boolean">
      <xsl:param name="arg1" as="xs:dateTime"/>
      <xsl:param name="arg2" as="xs:dateTime"/>
      <xsl:sequence select="$arg1 eq $arg2"/>
   </xsl:function>
   <xsl:function name="op:dateTime-less-than" as="xs:boolean">
      <xsl:param name="arg1" as="xs:dateTime"/>
      <xsl:param name="arg2" as="xs:dateTime"/>
      <xsl:sequence select="$arg1 lt $arg2"/>
   </xsl:function>
   <xsl:function name="op:dateTime-greater-than" as="xs:boolean">
      <xsl:param name="arg1" as="xs:dateTime"/>
      <xsl:param name="arg2" as="xs:dateTime"/>
      <xsl:sequence select="$arg1 gt $arg2"/>
   </xsl:function>
   <xsl:function name="op:date-equal" as="xs:boolean">
      <xsl:param name="arg1" as="xs:date"/>
      <xsl:param name="arg2" as="xs:date"/>
      <xsl:sequence select="$arg1 eq $arg2"/>
   </xsl:function>
   <xsl:function name="op:date-less-than" as="xs:boolean">
      <xsl:param name="arg1" as="xs:date"/>
      <xsl:param name="arg2" as="xs:date"/>
      <xsl:sequence select="$arg1 lt $arg2"/>
   </xsl:function>
   <xsl:function name="op:date-greater-than" as="xs:boolean">
      <xsl:param name="arg1" as="xs:date"/>
      <xsl:param name="arg2" as="xs:date"/>
      <xsl:sequence select="$arg1 gt $arg2"/>
   </xsl:function>
   <xsl:function name="op:time-equal" as="xs:boolean">
      <xsl:param name="arg1" as="xs:time"/>
      <xsl:param name="arg2" as="xs:time"/>
      <xsl:sequence select="$arg1 eq $arg2"/>
   </xsl:function>
   <xsl:function name="op:time-less-than" as="xs:boolean">
      <xsl:param name="arg1" as="xs:time"/>
      <xsl:param name="arg2" as="xs:time"/>
      <xsl:sequence select="$arg1 lt $arg2"/>
   </xsl:function>
   <xsl:function name="op:time-greater-than" as="xs:boolean">
      <xsl:param name="arg1" as="xs:time"/>
      <xsl:param name="arg2" as="xs:time"/>
      <xsl:sequence select="$arg1 gt $arg2"/>
   </xsl:function>
   <xsl:function name="op:gYearMonth-equal" as="xs:boolean">
      <xsl:param name="arg1" as="xs:gYearMonth"/>
      <xsl:param name="arg2" as="xs:gYearMonth"/>
      <xsl:sequence select="$arg1 eq $arg2"/>
   </xsl:function>
   <xsl:function name="op:gYear-equal" as="xs:boolean">
      <xsl:param name="arg1" as="xs:gYear"/>
      <xsl:param name="arg2" as="xs:gYear"/>
      <xsl:sequence select="$arg1 eq $arg2"/>
   </xsl:function>
   <xsl:function name="op:gMonthDay-equal" as="xs:boolean">
      <xsl:param name="arg1" as="xs:gMonthDay"/>
      <xsl:param name="arg2" as="xs:gMonthDay"/>
      <xsl:sequence select="$arg1 eq $arg2"/>
   </xsl:function>
   <xsl:function name="op:gMonth-equal" as="xs:boolean">
      <xsl:param name="arg1" as="xs:gMonth"/>
      <xsl:param name="arg2" as="xs:gMonth"/>
      <xsl:sequence select="$arg1 eq $arg2"/>
   </xsl:function>
   <xsl:function name="op:gDay-equal" as="xs:boolean">
      <xsl:param name="arg1" as="xs:gDay"/>
      <xsl:param name="arg2" as="xs:gDay"/>
      <xsl:sequence select="$arg1 eq $arg2"/>
   </xsl:function>
   <xsl:function name="op:subtract-dateTimes" as="xs:dayTimeDuration">
      <xsl:param name="arg1" as="xs:dateTime"/>
      <xsl:param name="arg2" as="xs:dateTime"/>
      <xsl:sequence select="$arg1 - $arg2"/>
   </xsl:function>
   <xsl:function name="op:subtract-dates" as="xs:dayTimeDuration">
      <xsl:param name="arg1" as="xs:date"/>
      <xsl:param name="arg2" as="xs:date"/>
      <xsl:sequence select="$arg1 - $arg2"/>
   </xsl:function>
   <xsl:function name="op:subtract-times" as="xs:dayTimeDuration">
      <xsl:param name="arg1" as="xs:time"/>
      <xsl:param name="arg2" as="xs:time"/>
      <xsl:sequence select="$arg1 - $arg2"/>
   </xsl:function>
   <xsl:function name="op:add-yearMonthDuration-to-dateTime" as="xs:dateTime">
      <xsl:param name="arg1" as="xs:dateTime"/>
      <xsl:param name="arg2" as="xs:yearMonthDuration"/>
      <xsl:sequence select="$arg1 + $arg2"/>
   </xsl:function>
   <xsl:function name="op:add-dayTimeDuration-to-dateTime" as="xs:dateTime">
      <xsl:param name="arg1" as="xs:dateTime"/>
      <xsl:param name="arg2" as="xs:dayTimeDuration"/>
      <xsl:sequence select="$arg1 + $arg2"/>
   </xsl:function>
   <xsl:function name="op:subtract-yearMonthDuration-from-dateTime" as="xs:dateTime">
      <xsl:param name="arg1" as="xs:dateTime"/>
      <xsl:param name="arg2" as="xs:yearMonthDuration"/>
      <xsl:sequence select="$arg1 - $arg2"/>
   </xsl:function>
   <xsl:function name="op:subtract-dayTimeDuration-from-dateTime" as="xs:dateTime">
      <xsl:param name="arg1" as="xs:dateTime"/>
      <xsl:param name="arg2" as="xs:dayTimeDuration"/>
      <xsl:sequence select="$arg1 - $arg2"/>
   </xsl:function>
   <xsl:function name="op:add-yearMonthDuration-to-date" as="xs:date">
      <xsl:param name="arg1" as="xs:date"/>
      <xsl:param name="arg2" as="xs:yearMonthDuration"/>
      <xsl:sequence select="$arg1 + $arg2"/>
   </xsl:function>
   <xsl:function name="op:add-dayTimeDuration-to-date" as="xs:date">
      <xsl:param name="arg1" as="xs:date"/>
      <xsl:param name="arg2" as="xs:dayTimeDuration"/>
      <xsl:sequence select="$arg1 + $arg2"/>
   </xsl:function>
   <xsl:function name="op:subtract-yearMonthDuration-from-date" as="xs:date">
      <xsl:param name="arg1" as="xs:date"/>
      <xsl:param name="arg2" as="xs:yearMonthDuration"/>
      <xsl:sequence select="$arg1 - $arg2"/>
   </xsl:function>
   <xsl:function name="op:subtract-dayTimeDuration-from-date" as="xs:date">
      <xsl:param name="arg1" as="xs:date"/>
      <xsl:param name="arg2" as="xs:dayTimeDuration"/>
      <xsl:sequence select="$arg1 - $arg2"/>
   </xsl:function>
   <xsl:function name="op:add-dayTimeDuration-to-time" as="xs:time">
      <xsl:param name="arg1" as="xs:time"/>
      <xsl:param name="arg2" as="xs:dayTimeDuration"/>
      <xsl:sequence select="$arg1 + $arg2"/>
   </xsl:function>
   <xsl:function name="op:subtract-dayTimeDuration-from-time" as="xs:time">
      <xsl:param name="arg1" as="xs:time"/>
      <xsl:param name="arg2" as="xs:dayTimeDuration"/>
      <xsl:sequence select="$arg1 - $arg2"/>
   </xsl:function>
   <xsl:function name="op:QName-equal" as="xs:boolean">
      <xsl:param name="arg1" as="xs:QName"/>
      <xsl:param name="arg2" as="xs:QName"/>
      <xsl:sequence select="$arg1 eq $arg2"/>
   </xsl:function>
   <xsl:function name="op:hexBinary-equal" as="xs:boolean">
      <xsl:param name="value1" as="xs:hexBinary"/>
      <xsl:param name="value2" as="xs:hexBinary"/>
      <xsl:sequence select="$value1 eq $value2"/>
   </xsl:function>
   <xsl:function name="op:base64Binary-equal" as="xs:boolean">
      <xsl:param name="value1" as="xs:base64Binary"/>
      <xsl:param name="value2" as="xs:base64Binary"/>
      <xsl:sequence select="$value1 eq $value2"/>
   </xsl:function>
   <xsl:function name="op:NOTATION-equal" as="xs:boolean">
      <xsl:param name="arg1" as="xs:NOTATION"/>
      <xsl:param name="arg2" as="xs:NOTATION"/>
      <xsl:sequence select="$arg1 eq $arg2"/>
   </xsl:function>
   <xsl:function name="op:is-same-node" as="xs:boolean">
      <xsl:param name="arg1" as="node()"/>
      <xsl:param name="arg2" as="node()"/>
      <xsl:sequence select="$arg1 is $arg2"/>
   </xsl:function>
   <xsl:function name="op:node-before" as="xs:boolean">
      <xsl:param name="arg1" as="node()"/>
      <xsl:param name="arg2" as="node()"/>
      <xsl:sequence select="$arg1 &lt;&lt; $arg2"/>
   </xsl:function>
   <xsl:function name="op:node-after" as="xs:boolean">
      <xsl:param name="arg1" as="node()"/>
      <xsl:param name="arg2" as="node()"/>
      <xsl:sequence select="$arg1 &gt;&gt; $arg2"/>
   </xsl:function>
   <xsl:function name="op:concatenate" as="item()*">
      <xsl:param name="seq1" as="item()*"/>
      <xsl:param name="seq2" as="item()*"/>
      <xsl:sequence select="$seq1 , $seq2"/>
   </xsl:function>
   <xsl:function name="op:union" as="node()*">
      <xsl:param name="arg1" as="node()*"/>
      <xsl:param name="arg2" as="node()*"/>
      <xsl:sequence select="$arg1 union $arg2"/>
   </xsl:function>
   <xsl:function name="op:intersect" as="node()*">
      <xsl:param name="arg1" as="node()*"/>
      <xsl:param name="arg2" as="node()*"/>
      <xsl:sequence select="$arg1 intersect $arg2"/>
   </xsl:function>
   <xsl:function name="op:except" as="node()*">
      <xsl:param name="arg1" as="node()*"/>
      <xsl:param name="arg2" as="node()*"/>
      <xsl:sequence select="$arg1 except $arg2"/>
   </xsl:function>
   <xsl:function name="op:to" as="xs:integer*">
      <xsl:param name="firstval" as="xs:integer"/>
      <xsl:param name="lastval" as="xs:integer"/>
      <xsl:sequence select="$firstval to $lastval"/>
   </xsl:function>
</xsl:stylesheet>