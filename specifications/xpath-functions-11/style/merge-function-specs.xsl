<?xml version='1.0'?>
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:fos="http://www.w3.org/xpath-functions/spec/namespace"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  exclude-result-prefixes="fos xs">

<xsl:output method="xml" doctype-system="../../../schema/xsl-query.dtd"/>

<xsl:variable name="fosdoc" select="document('function-catalog.xml', /)"/>
	
<xsl:template match="/">
  <xsl:for-each select="1 to 20">
  	<xsl:comment>DO NOT EDIT: GENERATED BY merge-function-specs.xsl</xsl:comment>
  	<xsl:text>&#xa;</xsl:text>
  </xsl:for-each>
  <xsl:apply-templates/>
</xsl:template>	

<xsl:template match="*" mode="#default summary">
  <xsl:copy copy-namespaces="no">
    <xsl:copy-of select="@*"/>
	<xsl:apply-templates mode="#current"/>
  </xsl:copy>
</xsl:template>

<xsl:template match="head[processing-instruction('function')]">
	<xsl:variable name="lexname" select="processing-instruction('function')/normalize-space(.)"/>
    <xsl:variable name="fspec" select="$fosdoc/fos:functions/fos:function[@name=substring-after($lexname,':')]"/>
    <xsl:if test="empty($fspec)">
      <xsl:message>Function not found in catalog: <xsl:value-of select="$lexname"/></xsl:message>
      <p class="error">Function not found in catalog: <xsl:value-of select="$lexname"/></p>
    </xsl:if>
	<head>
		<xsl:value-of select="$lexname"/>
	</head>
	<glist>
		<gitem>
			<label>Summary</label>
			<def>
				<xsl:apply-templates select="$fspec/fos:summary/node()" mode="summary"/>	
			</def>
		</gitem>
		<xsl:if test="$fspec/fos:opermap">
			<gitem>
				<label>Operator Mapping</label>
				<def>
					<p><xsl:copy-of select="$fspec/fos:opermap/node()" copy-namespaces="no"/></p>
				</def>
			</gitem>
		</xsl:if>
		<gitem>
			<label>Signature<xsl:value-of select="'s'[$fspec/fos:signatures/fos:proto[2]]"/></label>
			<def>
				<p><xsl:apply-templates select="$fspec/fos:signatures/fos:proto"/></p>	
			</def>
		</gitem>
		<gitem>
			<label>Rules</label>
			<def>
				<xsl:copy-of select="$fspec/fos:rules/node()" copy-namespaces="no"/>	
			</def>
		</gitem>
		<xsl:if test="$fspec/fos:errors">
			<gitem>
				<label>Error Conditions</label>
				<def>
					<xsl:copy-of select="$fspec/fos:errors/node()" copy-namespaces="no"/>
				</def>
			</gitem>
		</xsl:if>
		<xsl:if test="$fspec/fos:notes">
			<gitem>
				<label>Notes</label>
				<def>
					<xsl:copy-of select="$fspec/fos:notes/node()" copy-namespaces="no"/>
				</def>
			</gitem>
		</xsl:if>
		<xsl:if test="$fspec/fos:examples">
			<gitem>
				<label>Examples</label>
				<def>
					<xsl:apply-templates select="$fspec/fos:examples/node()"/>
				</def>
			</gitem>
		</xsl:if>
	</glist>
</xsl:template>

<xsl:template match="fos:proto">
	<xsl:variable name="isOp" as="xs:boolean" select="exists(../../fos:opermap)"/>
	<example role="signature">
		<proto name="{@name}" return-type="{@return-type}" 
			isOp="{if ($isOp) then 'yes' else 'no'}"
			prefix="{if ($isOp) then 'op' else (../../@prefix, 'fn')[1]}" >
			<xsl:apply-templates/>
		</proto>
	</example>
</xsl:template>

<xsl:template match="fos:arg">
	<arg name="{@name}" type="{@type}"/>
</xsl:template>

<xsl:template match="fos:example">
  <xsl:apply-templates/>
</xsl:template>

<xsl:template match="fos:variable">
<p>
  <xsl:text>let </xsl:text>
  <code><xsl:value-of select="concat('$',@name)"/></code>
  <xsl:text> := </xsl:text>
  <xsl:if test="@select">
    <code><xsl:value-of select="@select"/></code>
  </xsl:if>
  <xsl:if test="child::node()">
  	<eg>
  	  <xsl:apply-templates/>
  	</eg>
  </xsl:if>
  
</p>
</xsl:template>

<xsl:template match="fos:test">
	<p>
		<xsl:choose>
			<xsl:when test="fos:preamble">
				<xsl:copy-of select="fos:preamble/node()" copy-namespaces="no"/>
			</xsl:when>
			<xsl:otherwise>The expression </xsl:otherwise>
		</xsl:choose>
		<code>
			<xsl:choose>
				<xsl:when test="fos:expression/@xml:space='preserve'">
					<xsl:value-of select="translate(fos:expression, ' ', '&#xa0;')"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="fos:expression"/>
				</xsl:otherwise>
			</xsl:choose>			
		</code>
		<xsl:text> returns </xsl:text>
		<xsl:if test="fos:result/@allow-permutation='true'">
			<xsl:text>some permutation of </xsl:text>
		</xsl:if>
		<code>
			<xsl:value-of select="fos:result"/>
		</code>
		<xsl:choose>
			<xsl:when test="fos:postamble">
			    <xsl:text>. </xsl:text>
			    <emph>
			      <xsl:text>(</xsl:text>
				  <xsl:copy-of select="fos:postamble/node()" copy-namespaces="no"/>
				  <xsl:text>).</xsl:text>
				</emph>
			</xsl:when>
			<xsl:otherwise>.</xsl:otherwise>
		</xsl:choose>
	</p>
</xsl:template>

<xsl:template match="text()" mode="summary">
  <xsl:value-of select="replace(., 'Summary: ', '')"/>
</xsl:template>
	
<xsl:template match="processing-instruction('local-function-index')">
	<table border="1" summary="Function/operator summary">
		<thead>
			<tr>
				<th>Function</th>
				<th>Meaning</th>
			</tr>
		</thead>
		<tbody>
			<xsl:for-each select="following-sibling::*[starts-with(local-name(), 'div')][head/processing-instruction()]">
				<xsl:variable name="lexname" select="string(head/processing-instruction())"/>
				<tr>
					<td><code><xsl:value-of select="$lexname"/></code></td>
					<td><xsl:apply-templates 
								select="$fosdoc/fos:functions/fos:function[@name=substring-after($lexname,':')]/fos:summary/*/node()" 
								mode="summary"/>						
					</td>
				</tr>
			</xsl:for-each>
		</tbody>
	</table>
</xsl:template>	

</xsl:stylesheet>