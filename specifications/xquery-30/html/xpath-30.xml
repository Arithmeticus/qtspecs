<!--XSLT Processor: SAXON 9.3.0.5 from Saxonica SAXON EE 9.3.0.5--><!--XSLT Processor: SAXON 9.3.0.5 from Saxonica SAXON EE 9.3.0.5--><!--XSLT Processor: SAXON 9.3.0.5 from Saxonica SAXON EE 9.3.0.5--><spec xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" id="spec-top" w3c-doctype="rec" status="ext-review"><header id="id-spec-header"><title>XML Path Language (XPath) 3.0</title><version/><w3c-designation>REC-xpath-30</w3c-designation><w3c-doctype>W3C Recommendation</w3c-doctype><pubdate><day>08</day><month>April</month><year>2014</year></pubdate><publoc>
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/2014/REC-xpath-30-20140408/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/2014/REC-xpath-30-20140408/</loc>
      </publoc><!-- These altlocs URIs are computed from the concatenation of doc.public, doc.shortname, and either '.xml' or
     '-diff-from-yyyymmdd.html', where 'yyyymmdd' is the earlier version of the spec from which a diff has been produced --><altlocs><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/2014/REC-xpath-30-20140408/xpath-30.xml" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XML</loc><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/2014/REC-xpath-30-20140408/xpath-30-diff.html" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Change markings relative to previous edition</loc></altlocs><!-- The latestloc URI is computed from doc.latestloc --><latestloc doc="XPath 3.0">
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/xpath-30/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/xpath-30/</loc>
      </latestloc><!-- These prevlocs URIs are always hard-coded and are never computed from entities --><prevlocs doc="XPath 3.0">
<!-- Pubrules doesn't like FPWD to have a prevloc, not even a previous Recommendation -->
 
 <phrase role="xpath">
            <loc xmlns:xlink="http://www.w3.org/1999/xlink" role="xpath" href="http://www.w3.org/TR/2013/PR-xpath-30-20131022/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/2013/PR-xpath-30-20131022/</loc>,
  <loc xmlns:xlink="http://www.w3.org/1999/xlink" role="xpath" href="http://www.w3.org/TR/2013/CR-xpath-30-20130108/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/2013/CR-xpath-30-20130108/</loc>,
  <loc xmlns:xlink="http://www.w3.org/1999/xlink" role="xpath" href="http://www.w3.org/TR/2011/WD-xpath-30-20111213/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/2011/WD-xpath-30-20111213/</loc>,
  <loc xmlns:xlink="http://www.w3.org/1999/xlink" role="xpath" href="http://www.w3.org/TR/2011/WD-xpath-30-20110614/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/2011/WD-xpath-30-20110614/</loc>,
  <loc xmlns:xlink="http://www.w3.org/1999/xlink" role="xpath" href="http://www.w3.org/TR/2010/WD-xpath-30-20101214/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/2010/WD-xpath-30-20101214/</loc>,
  <loc xmlns:xlink="http://www.w3.org/1999/xlink" role="xpath" href="http://www.w3.org/TR/2009/WD-xpath-21-20091215/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/2009/WD-xpath-21-20091215/ </loc>
         </phrase>
      </prevlocs><latestloc-major doc="XPath 3">
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/xpath-3/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/xpath-3/</loc>
      </latestloc-major><!--
  <latestloc-tech doc="&language-tech;">
    <loc href="&doc.latestloc-tech;">&doc.latestloc-tech;</loc>
  </latestloc-tech>
--><prevrec doc="XPath">
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" role="xpath" href="http://www.w3.org/TR/2010/REC-xpath-20101214/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/2010/REC-xpath-20101214/</loc>
    
      </prevrec><authlist><author><name>Jonathan Robie</name><affiliation>
               <phrase>EMC Corporation</phrase>
            </affiliation><email xmlns:xlink="http://www.w3.org/1999/xlink" href="mailto:jonathan.robie@emc.com" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">jonathan.robie@emc.com</email></author><author><name>Don Chamberlin</name><email xmlns:xlink="http://www.w3.org/1999/xlink" href="mailto:dchamber@us.ibm.com" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">dchamber@us.ibm.com</email></author><author><name>Michael Dyck</name><affiliation>Invited Expert</affiliation><email xmlns:xlink="http://www.w3.org/1999/xlink" href="mailto:jmdyck@ibiblio.org" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">jmdyck@ibiblio.org</email></author><author><name>
               <phrase>
                  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://john.snelson.org.uk" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">John Snelson</loc>
               </phrase>
            </name><affiliation>MarkLogic Corporation</affiliation><email xmlns:xlink="http://www.w3.org/1999/xlink" href="mailto:john.snelson@marklogic.com" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">john.snelson@marklogic.com</email></author></authlist><!--* N.B. the value of the errataloc href attribute is set in
    * ../style/assemble-spec.xsl
    * when the XQuery or XPath spec is assembled.  If it changes,
    * change it THERE.
    *--><errataloc xmlns:xlink="http://www.w3.org/1999/xlink" role="spec-conditional" href="http://www.w3.org/XML/2014/qt-errata/xquery-30-errata.html" xlink:type="simple"/><translationloc xmlns:xlink="http://www.w3.org/1999/xlink" role="spec-conditional" href="http://www.w3.org/2003/03/Translations/byTechnology?technology=xquery-30" xlink:type="simple"/><!--* Common status section for QT specs.
    * Use is currently not required, but it simplifies things.
    * 
    * Revisions:
    * 2007-01-15 : CMSMcQ : made file, to simplify publication of Rec.
    * 2008-02-15 : JimMelton : cloned from MSM's REC-only material
                     to generalize for all stages
    *--><status id="status"><!-- ************************************************************************** --><!-- * All Status sections must start with the standard boilerplate paragraph * --><!-- *   This entity is defined in status-entities.dtd                        * --><!-- ************************************************************************** --><p>
            <emph>This section describes the status of this
         document at the time of its publication.
         Other documents may supersede this document.
         A list of current W3C publications and the latest
         revision of this technical report can be found in the
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">W3C technical reports index</loc>
         at http://www.w3.org/TR/.</emph>
         </p><!-- ************************************************************************** --><!-- * QT publishes suites of documents, which must be described in the       * --><!--     Status section of each document within such a suite.                 * --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><p>This is one document
in a set of six documents that have been progressed to
Recommendation together (XQuery 3.0, XQueryX 3.0, XPath 3.0,
Data Model 3.0, Functions and Operators 3.0, and
Serialization 3.0). </p><!-- ************************************************************************** --><!-- * There is a lot of detailed customization based on the document stage   * --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><p>This is a <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/2005/10/Process-20051014/tr.html#RecsW3C" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Recommendation</loc> of the W3C. 
It was jointly developed by the W3C 
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/XML/Query/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XML Query Working Group</loc> and the W3C <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Style/XSL/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XSLT Working Group</loc>, each of which is part of the <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/XML/Activity" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XML Activity</loc>.</p><!-- ************************************************************************** --><!-- * CR documents must cite features at risk                                * --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><!-- ************************************************************************** --><!-- * Every Status section must have a customized paragraph                  * --><!-- *   This entity is defined completely in the host document.              * --><!-- ************************************************************************** --><p diff="chg" at="2014-03-20">This Recommendation of XPath 3.0 represents the
                               second version of
                               <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/2010/REC-xpath20-20101214/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">a previous W3C Recommendation</loc>..</p><!-- ************************************************************************** --><!-- * CR docs should, and PR docs must, have a pointer to an implementation  * --><!-- *   report.  We also want to point to the test suite.                    * --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><p role="xpath">This specification is designed to be referenced normatively from
other specifications defining a host language for it; it is not
intended to be implemented outside a host language.  The
implementability of this specification has been tested in the context
of its normative inclusion in host languages defined by the
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/xquery-30/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XQuery 3.0</loc>
and
XSLT 3.0 (expected in 2014) specifications;
see the
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://dev.w3.org/2011/QT3-test-suite/ReportingResults/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XQuery 3.0 implementation report</loc>
(and, in the future, the WGs expect that there will also be a
— possibly member-only — XSLT 3.0 implementation report)
for details.</p><!-- ************************************************************************** --><!-- * The Status section should point to a changelog                         * --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><p>This document incorporates minor changes made against the <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/2005/10/Process-20051014/tr.html#RecsPR" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Proposed Recommendation</loc> of 22 October 2013.
  Changes to this document since the <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/2005/10/Process-20051014/tr.html#RecsPR" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Proposed Recommendation</loc> are detailed in
  <specref ref="id-revision-log"/>.</p><!-- ************************************************************************** --><!-- * The Status section must tell readers where to send comments            * --><!-- *   This entity is defined in status-entities.dtd                        * --><!-- ************************************************************************** --><p>Please report errors in this document using W3C's
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://www.w3.org/Bugs/Public/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">public Bugzilla system</loc>
         (instructions can be found at
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/XML/2005/04/qt-bugzilla" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/XML/2005/04/qt-bugzilla</loc>).
         If access to that system is not feasible, you may send your comments
         to the W3C XSLT/XPath/XQuery public comments mailing list,
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="mailto:public-qt-comments@w3.org" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">public-qt-comments@w3.org</loc>.
         It will be very helpful if you include the string 
         “[XPath30]”
         in the subject line of your report, whether made in Bugzilla or in email.
         Please use multiple Bugzilla entries (or, if necessary, multiple email messages)
         if you have more than one comment to make.
         Archives of the comments and responses are available at
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://lists.w3.org/Archives/Public/public-qt-comments/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://lists.w3.org/Archives/Public/public-qt-comments/</loc>. </p><!-- ************************************************************************** --><!-- Status sections must state the stability (not stable, or REC) of the document --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><p>This document has been reviewed by W3C Members, by
software developers, and by other W3C groups and interested parties,
and is endorsed by the Director as a W3C Recommendation. 
It is a stable document and may be used as reference material or cited from
another document. 
W3C's role in making the Recommendation is to draw attention to
the specification and to promote its widespread deployment. 
This enhances the functionality and interoperability of
the Web.</p><!-- ************************************************************************** --><!-- * Finally, all Status sections must end with the appropriate IPR para    * --><!-- *   This entity is defined in status-entities.dtd                        * --><!-- ************************************************************************** --><p>This document was produced by groups operating under the
   <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Consortium/Patent-Policy-20040205/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">5 February 2004
   W3C Patent Policy</loc>.
   W3C maintains a <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/2004/01/pp-impl/18797/status#disclosures" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">public list of any 
   patent disclosures</loc> made in connection with the deliverables of the 
   XML Query Working Group and also maintains a <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/2004/01/pp-impl/19552/status#disclosures" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">public list of any patent 
   disclosures</loc> made in connection with the deliverables of the XSL 
   Working Group; those pages also include instructions for
   disclosing a patent.
   An individual who has actual knowledge of a patent which the individual believes
   contains
   <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Consortium/Patent-Policy-20040205/#def-essential" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Essential Claim(s)</loc>
   must disclose the information in accordance with
   <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Consortium/Patent-Policy-20040205/#sec-Disclosure" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">section 6 of the W3C Patent Policy</loc>. </p></status><abstract id="id-abstract"><p role="xpath">XPath 3.0 is an expression
language that allows the processing of values conforming to the data
model defined in <bibref ref="xpath-datamodel-30"/>. The data model provides a
tree representation of XML documents as well as atomic values such as
integers, strings, and booleans, and sequences that may contain both
references to nodes in an XML document and atomic values. The result
of an XPath expression may be a selection of nodes from the input
documents, or an atomic value, or more generally, any sequence allowed
by the data model. The name of the language derives from its most
distinctive feature, the path expression, which provides a means of
hierarchic addressing of the nodes in an XML tree.

XPath 3.0 is a superset of <bibref ref="xpath20"/>. A list of changes
made since XPath 2.0 can be found in <specref ref="id-revision-log"/>. 
Here are some of the new features in XPath 3.0:

<olist><item><p>Dynamic function <phrase diff="del">invocation</phrase>
                     <phrase diff="add">call</phrase> (<specref ref="id-dynamic-function-invocation"/>).</p></item><item><p>Inline function<phrase diff="add"> expression</phrase>s (<specref ref="id-inline-func"/>).</p></item><item><p>Support for union types.</p></item><item><p>Support for literal URLs in names, using <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EQName" xlink:type="simple">EQNames</nt>.</p></item><item><p>A string concatenation operator (<specref ref="id-string-concat-expr"/>).</p></item><item><p>A mapping operator (<specref ref="id-map-operator"/>).</p></item></olist>


A backwards compatibility mode is provided to ensure that nearly all
XPath 1.0 expressions continue to deliver the same result with
XPath 3.0; exceptions to this policy are noted in [<specref ref="id-backwards-compatibility"/>].</p></abstract><langusage><language id="EN">English</language><!--
<language id="ebnf">EBNF</language>
--></langusage><revisiondesc><slist><sitem>XQuery 1.1 First Public Working Draft. (2008-07-11)</sitem><sitem>XQuery 1.1 Working Draft (2008-12-03)</sitem><sitem>XQuery 1.1 Working Draft and XPath 2.1 First Public Working Draft (2009-12-04)</sitem></slist></revisiondesc></header><body><div1 id="id-introduction"><head>Introduction</head><p role="xpath">The primary purpose of XPath is to address the
	nodes of <bibref ref="XML"/> or <bibref ref="XML1.1"/> trees.

	XPath gets its name from its use of a path notation for navigating through the hierarchical structure of an XML
	document.

        XPath uses a compact, non-XML syntax to facilitate use of
        XPath within URIs and XML attribute values.</p><p>
            <termdef id="dt-datamodel" term="data model">XPath 3.0 operates on the abstract,
	logical structure of an XML document, rather than its surface
	syntax.  This logical structure, known as the <term>data
	model</term>,  is defined in <bibref ref="xpath-datamodel-30"/>.</termdef>
         </p><p role="xpath">XPath is designed to be embedded in a
	<term>host language</term> such as <bibref ref="xslt-30"/> or
	<bibref ref="xquery-30"/>. <phrase diff="del">XPath has a
	natural subset that can be used for matching (testing whether
	or not a node matches a pattern); this use of XPath is
	described in <bibref ref="xslt-30"/>.</phrase>
         </p><p>XQuery Version 3.0 is an extension of XPath Version
	3.0.

	In general, any expression that is syntactically valid and executes
	successfully in both XPath 3.0 and XQuery 3.0 will return the
	same result in both languages. There are a few exceptions to this
	rule:

	<ulist><item><p>Because XQuery expands

<phrase role="xpath">
predefined entity references and character references
</phrase>
 and XPath does not, expressions containing these produce different results in the two languages. For instance, the value of the string literal <code role="parse-test">"&amp;amp;"</code> is <code>&amp;</code> in XQuery, and <code>&amp;amp;</code> in XPath. (XPath is often embedded in other languages, which may expand predefined entity references or character references before the XPath expression is evaluated.)</p></item><item><p>If XPath 1.0 compatibility mode is enabled, XPath behaves differently from XQuery in a number of ways,
<phrase role="xpath">which are noted throughout this document, and listed in <specref ref="id-incompat-in-false-mode"/>.</phrase>
                  </p></item></ulist>
         </p><p>Because these languages are so closely related, their grammars
	and language descriptions are generated from a common source
	to ensure consistency, and the editors of these specifications
	work together closely.</p><p>XPath 3.0 also depends on and is closely related to the
	following specifications:</p><ulist><item><p>
                  <bibref ref="xpath-datamodel-30"/> defines the data model that underlies all XPath 3.0 expressions.</p></item><item><p>The type system of XPath 3.0 is based on XML Schema. It is
      implementation-defined whether the type system is based on  <bibref ref="XMLSchema10"/>  or  <bibref ref="XMLSchema11"/>.</p></item><item><p>The built-in function library  and the operators supported by
	  XPath 3.0 are defined in <bibref ref="xpath-functions-30"/>.</p></item></ulist><p role="path">
            <termdef id="dt-xpath-30-processor" term="XPath 3.0           Processor">An <term>XPath 3.0 Processor</term> processes a
          query according to the XPath 3.0 specification.</termdef>

            <termdef id="dt-xpath-20-processor" term="XPath 2.0           Processor">An <term>XPath 2.0 Processor</term> processes a
          query according to the XPath 2.0 specification.</termdef>

            <termdef id="dt-xpath-10-processor" term="XPath 1.0           Processor">An <term>XPath 1.0 Processor</term> processes a
          query according to the XPath 1.0 specification.</termdef>
        </p><p>This document specifies a grammar for XPath 3.0, using the
		same basic EBNF notation used in <bibref ref="XML"/>.
    Unless otherwise noted (see <specref ref="lexical-structure"/>),
    whitespace is not significant in <phrase role="xpath">expressions</phrase>.
    Grammar productions are introduced together with the features that they describe,
    and a complete grammar is also presented in the appendix [<specref ref="nt-bnf"/>].
    The appendix is the normative version.</p><p>In the grammar productions in this document,
    named symbols are underlined and literal text is enclosed in double quotes.
    For example, the following  productions describe the syntax of a <phrase diff="add">static</phrase> function call:</p><scrap headstyle="show"><head/><prod num="59" id="noid_d3e426.doc-xpath30-FunctionCall"><lhs>FunctionCall</lhs><rhs>
                  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EQName" xlink:type="simple">EQName</nt>  
                  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ArgumentList" xlink:type="simple">ArgumentList</nt>
               </rhs></prod><prod num="49" id="noid_d3e427.doc-xpath30-ArgumentList"><lhs>ArgumentList</lhs><rhs>"("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Argument" xlink:type="simple">Argument</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Argument" xlink:type="simple">Argument</nt>)*)?  ")"</rhs></prod></scrap><p>The productions should be read as follows: A
		<phrase diff="add">static</phrase> function call consists of an <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EQName" xlink:type="simple">EQName</nt> followed by an
	    <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ArgumentList" xlink:type="simple">ArgumentList</nt>.

        The argument list consists of an opening parenthesis, an optional list of one or more arguments (separated by commas), and a closing parenthesis.</p><p>This document normatively defines the static and dynamic semantics of
XPath 3.0. In this document, examples and material labeled as "Note"
are provided for explanatory purposes and are not normative.</p><p>Certain aspects of language
		processing are described in this specification as
		<term>implementation-defined</term> or
		<term>implementation-dependent</term>.</p><ulist><item><p>
                  <termdef id="dt-implementation-defined" term="implementation defined">
                     <term>Implementation-defined</term>
		indicates an aspect that may differ between
		implementations, but must be specified by the
		implementor for each particular
		implementation.</termdef>
               </p></item><item><p>
                  <termdef id="dt-implementation-dependent" term="implementation   dependent">
                     <term>Implementation-dependent</term>
		indicates an aspect that may differ between
		implementations, is not specified by this or any W3C
		specification, and is not required to be specified by
		the implementor for any particular
		implementation.</termdef>
               </p></item></ulist><p role="xpath">A language aspect described in this specification as
<term>implementation-defined</term> or <term>implementation
dependent</term> may be further constrained by the specifications of a
host language in which XPath is embedded.</p></div1><div1 id="id-basics"><head>Basics</head><p>The basic  building block of XPath 3.0 is the
	 <term>expression</term>, which is a string of <bibref ref="Unicode"/> characters; the version of Unicode to be used is <termref def="dt-implementation-defined">implementation-defined</termref>.
	 The language provides several kinds of expressions which may be constructed
	 from keywords, symbols, and operands. In general, the operands of an expression
	 are other expressions. XPath 3.0 allows expressions to be nested with full
generality. </p><note><p>This specification contains no
assumptions or requirements regarding the character set encoding of strings
of <bibref ref="Unicode"/> characters.</p></note><p>Like XML, XPath 3.0 is a case-sensitive language. Keywords in
	 XPath 3.0 use lower-case characters and are not reserved—that is, names in XPath 3.0 expressions are allowed to be the same as language keywords, except for certain unprefixed function-names listed in <specref ref="id-reserved-fn-names"/>.</p><p>
            <termdef term="value" id="dt-value">In the <termref def="dt-datamodel">data model</termref>, a <term>value</term> is always a <termref def="dt-sequence">sequence</termref>.</termdef> 
            <termdef id="dt-sequence" term="sequence">A
<term>sequence</term> is an ordered collection of zero or more
<termref def="dt-item">items</termref>.</termdef>
            <termdef id="dt-item" term="item">
  An <term>item</term> is either an <termref def="dt-atomic-value">atomic value</termref>, a <termref def="dt-node">node</termref>,
or a <xtermref diff="chg" spec="DM30" ref="dt-function-item">function</xtermref>.</termdef>
            <termdef id="dt-atomic-value" term="atomic value">An <term>atomic
	 value</term> is a value in the value space of an <term>atomic
	 type</term>, as defined in <bibref ref="XMLSchema10"/>  or <bibref ref="XMLSchema11"/>.</termdef>
            <termdef id="dt-node" term="node">A <term>node</term> is an instance of one of the
	  <term>node kinds</term> defined in <bibref ref="xpath-datamodel-30"/>.</termdef>
Each node has a unique <term>node identity</term>, a <term>typed value</term>, and a <term>string value</term>. In addition, some nodes have a <term>name</term>. The <term>typed value</term> of a node is a sequence
	 of zero or more atomic values. The <term>string value</term> of a node is a
	 value of type <code>xs:string</code>. The <term>name</term> of a node is a value of type <code>xs:QName</code>.</p><p>
            <termdef id="dt-singleton" term="singleton">A sequence containing exactly one item is called a
	 <term>singleton</term>.</termdef> An item is identical to a singleton sequence
	 containing that item. Sequences are never nested—for example, combining the
	 values 1, (2, 3), and ( ) into a single sequence results in the sequence (1, 2,
	 3). <termdef id="dt-empty-sequence" term="empty sequence">A sequence containing zero items is called an <term>empty sequence</term>.</termdef>
         </p><p>
            <termdef id="dt-data-model-instance" term="XDM instance">The term <term>XDM instance</term> is used,
    synonymously with the term <termref def="dt-value">value</termref>, to denote an unconstrained
    <termref def="dt-sequence">sequence</termref> of <termref def="dt-item">items</termref> in the <termref def="dt-datamodel">data model</termref>.</termdef> 
         </p><p>In the XPath 3.0 grammar, most names are specified using the
      <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EQName" xlink:type="simple">EQName</nt> production, which allows <termref def="dt-qname">lexical QNames</termref>, and also allows a
      namespace URI to be specified as a literal:</p><scrap headstyle="show"><head/><prod num="94" id="doc-xpath30-EQName"><lhs>EQName</lhs><rhs>
                  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-QName" xlink:type="simple">QName</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-URIQualifiedName" xlink:type="simple">URIQualifiedName</nt>
               </rhs></prod><prod num="104" id="doc-xpath30-QName"><lhs>QName</lhs><rhs>
                  <xnt xmlns:xlink="http://www.w3.org/1999/xlink" ref="NT-QName" spec="Names" xlink:type="simple">[http://www.w3.org/TR/REC-xml-names/#NT-QName]</xnt>
               </rhs></prod><prod num="105" id="noid_d3e635.doc-xpath30-NCName"><lhs>NCName</lhs><rhs>
                  <xnt xmlns:xlink="http://www.w3.org/1999/xlink" ref="NT-NCName" spec="Names" xlink:type="simple">[http://www.w3.org/TR/REC-xml-names/#NT-NCName]</xnt>
               </rhs></prod><prod num="99" id="doc-xpath30-URIQualifiedName"><lhs>URIQualifiedName</lhs><rhs>
                  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-BracedURILiteral" xlink:type="simple">BracedURILiteral</nt>  
                  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-NCName" xlink:type="simple">NCName</nt>
               </rhs></prod><prod num="100" id="doc-xpath30-BracedURILiteral"><lhs>BracedURILiteral</lhs><rhs>"Q"  "{"  [^{}]*  "}"</rhs></prod></scrap><p>Names in XPath 3.0 can be bound to namespaces, and are
	  based on the syntax and semantics defined in <bibref ref="XMLNAMES"/>. <termdef id="dt-qname" term="lexical QName">A
	  <term>lexical QName</term> is a name that conforms to the syntax of
	  <xnt xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/REC-xml-names/#NT-QName" xlink:type="simple">
	  [http://www.w3.org/TR/REC-xml-names/#NT-QName]</xnt>.</termdef>
	  A <termref def="dt-qname">lexical QName</termref> consists of an optional namespace prefix and a local
	  name. If the namespace prefix is present, it is separated
	  from the local name by a colon. A <termref def="dt-qname">lexical QName</termref> with a prefix can be
	  converted into an <termref def="dt-expanded-qname">expanded
	  QName</termref> by resolving its namespace prefix to a
	  namespace URI, using the <termref def="dt-static-namespaces">statically known
	  namespaces</termref>. The semantics of a <termref def="dt-qname">lexical QName</termref> without a prefix depend on the expression in which it is found.</p><p>
            <termdef id="dt-expanded-qname" term="expanded QName">An
	  <term>expanded QName</term> consists of an optional
	  namespace URI and a local name. An expanded QName also
	  retains its original namespace prefix (if any), to
	  facilitate casting the expanded QName into a
	  string.</termdef> 
	  Two <termref def="dt-expanded-qname">expanded QNames</termref> are equal if their
	  namespace URIs are equal and their local names are equal
	  (even if their namespace prefixes are not equal). Namespace
	  URIs and local names are compared on a codepoint basis,
	  without further normalization.</p><p diff="add">The <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EQName" xlink:type="simple">EQName</nt> production
	  allows expanded QNames to be specified using either a <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-QName" xlink:type="simple">QName</nt> or a <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-URIQualifiedName" xlink:type="simple">URIQualifiedName</nt>, which allows
	  the namespace URI to be specified as a literal.

	  The namespace URI value is whitespace normalized according
	  to the rules for the <code>xs:anyURI</code> type in <bibref ref="XMLSchema10"/> or <bibref ref="XMLSchema11"/>.

          It is a <termref def="dt-static-error">static
          error</termref> 
            <errorref class="ST" code="0070"/> if the
          <phrase diff="del">URILiteral</phrase>
            <phrase diff="add">namespace URI</phrase> for an EQName is
          <code>http://www.w3.org/2000/xmlns/</code>.</p><p diff="add">Here are some examples of <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EQName" xlink:type="simple">EQName</nt>s:</p><ulist diff="add"><item><p>
                  <code role="parse-test">pi</code> is a <termref def="dt-qname">lexical QName</termref> without a namespace prefix.</p></item><item><p>
                  <code role="parse-test">math:pi</code> is a <termref def="dt-qname">lexical QName</termref> with a namespace prefix.</p></item><item><p diff="chg">
                  <code role="parse-test">Q{http://www.w3.org/2005/xpath-functions/math}pi</code> specifies the namespace URI using a  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-BracedURILiteral" xlink:type="simple">BracedURILiteral</nt>; it is not a  <termref def="dt-qname">lexical QName</termref>.</p></item></ulist><p>
            <phrase role="xpath">This document uses the following namespace prefixes to represent the namespace URIs with which they are listed. Use of these namespace prefix bindings in this document is not normative.</phrase>
         </p><ulist><item><p>
                  <code>xs = http://www.w3.org/2001/XMLSchema</code>
               </p></item><item><p>
                  <code>fn = http://www.w3.org/2005/xpath-functions</code>
               </p></item><item role="xpath"><p>
                  <code>err = http://www.w3.org/2005/xqt-errors</code> (see <specref ref="id-identifying-errors"/>).</p></item></ulist><p>Element nodes have a property called <term>in-scope namespaces</term>. <termdef term="in-scope namespaces" id="dt-in-scope-namespaces">The <term>in-scope namespaces</term> property of an element node is a set of namespace bindings, each of which associates a namespace prefix with a URI.</termdef>
For a given element, one namespace binding may have an empty prefix; the URI of this namespace binding is the default namespace within the scope of the element.</p><p role="xpath">In <bibref ref="xpath"/>, the in-scope namespaces of an element node are represented by a collection of <term>namespace nodes</term> arranged on a <term>namespace axis</term>. <phrase diff="del">In XPath Version 2.0,</phrase>
            <phrase diff="add">As of XPath 2.0,</phrase> the namespace axis is deprecated and need not be supported by a host language. A host language that does not support the namespace axis need not represent namespace bindings in the form of nodes.</p><p>
            <termdef term="URI" id="dt-URI">Within this specification, the term <term>URI</term> refers to a Universal Resource Identifier as defined in <bibref ref="RFC3986"/> and extended in <bibref ref="RFC3987"/> with the new name <term>IRI</term>.</termdef>
The term URI has been retained in preference to IRI to avoid introducing new names for concepts such as "Base URI" that are defined or referenced across the whole family of XML specifications.</p><note><p>In most contexts, processors are not required to raise errors if a URI is not lexically valid according to  <bibref ref="RFC3986"/> and  <bibref ref="RFC3987"/>. See <specref ref="id-uri-literals"/> for details.</p></note><div2 id="context"><head diff="chg">Expression Context</head><p>
               <termdef id="dt-expression-context" term="expression context">The <term>expression
		context</term> for a given expression consists of all
		the information that can affect the result of the
		expression.</termdef>
            </p><p>This information is organized into two categories
		called the <termref def="dt-static-context">static
		context</termref> and the <termref def="dt-dynamic-context">dynamic
		context</termref>.</p><div3 id="static_context"><head>Static Context</head><p>
                  <termdef id="dt-static-context" term="static context">The <term>static context</term> of an expression is
		  the information that is available during static analysis of the expression, prior
		  to its evaluation.</termdef> This information can be used to decide whether the
		  expression contains a <termref def="dt-static-error">static error</termref>.
		  <phrase diff="del">If analysis of an
expression relies on some component of the <termref def="dt-static-context">static context</termref> that has not been
assigned a value, a <termref def="dt-static-error">static
		  error</termref> is raised <errorref code="0001" class="ST"/>.</phrase>
               </p><p>The individual components of the <termref def="dt-static-context">static context</termref> are <phrase diff="del">summarized</phrase>
                  <phrase diff="add">described</phrase> below. <phrase role="xpath">A default initial value for each component <phrase diff="del">may</phrase>
                     <phrase diff="add">must</phrase> be specified by the host language. The scope of each component is specified in <specref ref="id-xp-static-context-components" role="xpath"/>.</phrase> 
               </p><ulist><item><p>
                        <termdef id="dt-xpath-compat-mode" term="XPath 1.0 compatibility     mode">
                           <term>XPath 1.0 compatibility
			 mode.</term>  
                           <phrase role="xpath">This value is <code>true</code> if rules for backward compatibility with XPath Version 1.0 are in effect; otherwise it is <code>false</code>.</phrase>
                        </termdef>
                     </p></item><item><p>
                        <termdef id="dt-static-namespaces" term="statically known namespaces">
                           <term>Statically known namespaces.</term> This is a <phrase diff="del">set of (prefix,
				URI) pairs that define</phrase>
                           <phrase diff="add">mapping from prefix to namespace URI that defines</phrase> all the namespaces that are known during static processing of a given expression.</termdef> The URI value is
whitespace normalized according to the rules for the <code>xs:anyURI</code> type in <bibref ref="XMLSchema10"/> or <bibref ref="XMLSchema11"/>. Note the difference between <termref def="dt-in-scope-namespaces">in-scope namespaces</termref>, which is a dynamic property of an element node, and <termref def="dt-static-namespaces">statically known namespaces</termref>, which is a static property of an expression.</p></item><item><p>
                        <termdef id="dt-def-elemtype-ns" term="default element/type namespace">
                           <term>Default element/type namespace.</term> This is a
				namespace URI or <xtermref spec="DM30" ref="dt-absent"/>. The namespace URI, if present, is used for any unprefixed QName appearing in a
				position where an element or type name is expected.</termdef> The URI value is
whitespace normalized according to the rules for the <code>xs:anyURI</code> type in <bibref ref="XMLSchema10"/> or <bibref ref="XMLSchema11"/>.</p></item><item><p>
                        <termdef id="dt-def-fn-ns" term="default function namespace">
                           <term>Default function namespace.</term> This is a
				namespace URI or <xtermref spec="DM30" ref="dt-absent"/>. The namespace URI, if present, is used for any unprefixed QName appearing in a position where a function name is expected.</termdef> The URI value is
whitespace normalized according to the rules for the <code>xs:anyURI</code> type in <bibref ref="XMLSchema10"/> or <bibref ref="XMLSchema11"/>.</p></item><item><p>
                        <termdef id="dt-issd" term="in-scope schema definitions">
                           <term>In-scope schema
			 definitions.</term> This is a generic term
			 for all the element declarations, attribute declarations, and schema type
			 definitions that are in scope during
			 <phrase diff="del">processing</phrase>
                           <phrase diff="add">static analysis</phrase> of an expression.</termdef> It includes the
			 following three
			 parts:</p><ulist><item><p>

			                           <termdef id="dt-is-types" term="in-scope schema type">
                                 <term>In-scope schema types.</term> Each schema type
			        definition is identified either by an <termref def="dt-expanded-qname">expanded
			        QName</termref> (for a <term>named type</term>)
			        or by an <termref def="dt-implementation-dependent">implementation-dependent</termref> type
			        identifier (for an <term>anonymous
			        type</term>). The in-scope schema types include the predefined schema types described in <specref ref="id-predefined-types"/>.

                                

                         </termdef>
                           </p></item><item><p>
                              <termdef id="dt-is-elems" term="in-scope element declarations">
                                 <term>In-scope element declarations.</term> Each element
declaration is identified either by an <termref def="dt-expanded-qname">expanded QName</termref> (for a top-level element
declaration) or by an <termref def="dt-implementation-dependent">implementation-dependent</termref> element identifier (for a
local element declaration). </termdef> An element
declaration includes information about the element's <termref def="dt-substitution-group">substitution group</termref> affiliation.</p><p>
                              <termdef term="substitution group" id="dt-substitution-group">
                                 <term>Substitution groups</term> are defined in <bibref ref="XMLSchema10"/> and <bibref ref="XMLSchema11"/> Part 1. Informally, the substitution group headed by a given element (called the <term>head element</term>) consists of  the set of elements that can be substituted for the head element without affecting the outcome of schema validation.</termdef>
                           </p></item><item><p>
                              <termdef id="dt-is-attrs" term="in-scope attribute declarations">
                                 <term>In-scope attribute
declarations.</term> Each attribute declaration is identified either
by an <termref def="dt-expanded-qname">expanded QName</termref> (for a top-level attribute declaration) or by an
<termref def="dt-implementation-dependent">implementation-dependent</termref> attribute identifier (for a local attribute
declaration).  </termdef>
                           </p></item></ulist></item><item><p>
                        <termdef id="dt-in-scope-variables" term="in-scope variables">
                           <term>In-scope variables.</term> This is a <phrase diff="del">set of (<termref def="dt-expanded-qname">expanded QName</termref>, type) pairs.</phrase>
                           <phrase diff="add">mapping from <termref def="dt-expanded-qname">expanded QName</termref> to type.</phrase> It defines the
set of variables that are available for reference within an
expression. The <termref def="dt-expanded-qname">expanded QName</termref> is the name of the variable, and the type is the
<termref def="dt-static-type">static type</termref> of the
variable.</termdef>
                     </p><p>
                        <phrase diff="add">An expression that binds a variable extends the <termref def="dt-in-scope-variables">in-scope variables</termref>, within the scope of the variable, with the variable and its type.</phrase>
                        <phrase diff="del">An
expression that binds a variable (such as a <code>let</code>, <code>for</code>,
<code>some</code>, or <code>every</code> expression) extends the
<termref def="dt-in-scope-variables">in-scope variables</termref> of
its subexpressions with the new bound variable and its type.</phrase>
Within the body of an
<termref def="dt-inline-func">inline function <phrase diff="add">expression</phrase>
                        </termref>
, the
<termref def="dt-in-scope-variables">in-scope variables</termref> are extended
by the names and types of the <term>function
parameters</term>.</p></item><item><p>
                        <termdef term="context item static type" id="dt-context-item-static-type">
                           <term>Context item static type.</term> This component defines the <termref def="dt-static-type">static type</termref> of the context item within the scope of a given expression.</termdef>
                     </p></item><item><p diff="del">
                        <termdef id="dt-function-signature" term="function signature">
                           <term>Function signatures.</term> This component defines the set of functions that are available
				to be called from within an
			 expression. Each function is uniquely
			 identified by its <termref def="dt-expanded-qname">expanded QName</termref> and its arity (number
			 of parameters).</termdef> In addition to the name and arity, each function signature specifies the <termref def="dt-static-type">static types</termref> of the function parameters and  result.</p><p diff="add">
                        <termdef id="dt-known-func-signatures" term="statically known function signatures">
                           <term>Statically known function signatures.</term>
        This is a mapping from (expanded QName, arity) to 
        <xtermref spec="DM30" ref="dt-signature"/>. 
    </termdef>
    The entries in this mapping define the set of 
    <term>statically known functions</term>
    — those functions that are available to be called from a 
    <termref def="dt-static-function-call">static function call</termref>,
    or referenced from a 
    <termref def="dt-named-function-ref">named function reference</termref>.
    Each such function is uniquely identified by its 
    <termref def="dt-expanded-qname">expanded QName</termref>
    and arity (number of parameters).
    Given a statically known function's expanded QName and arity,
    this component supplies the function's 
    <xtermref spec="DM30" ref="dt-signature">signature</xtermref>,
    which specifies various static properties of the function,
    including types. 
</p><p>The <phrase diff="add">statically known</phrase> function signatures include the signatures of functions from a variety of sources, including built-in functions described in <bibref ref="xpath-functions-30"/>, <phrase role="xpath"> and <termref def="dt-constructor-function">constructor functions</termref>
                        </phrase>.


<phrase role="xpath" diff="add">Implementations must ensure that no two functions have the same <termref def="dt-expanded-qname">expanded QName</termref> and the same
arity (even if the signatures are consistent).</phrase>
                     </p></item><item><p> 
                        <termdef id="dt-static-collations" term="statically known collations">
                           <term>Statically known collations.</term> This is an <termref def="dt-implementation-defined">implementation-defined</termref> 
                           <phrase diff="del">set of (URI,
				collation) pairs.</phrase>
                           <phrase diff="add">mapping from URI to collation.</phrase> It defines the names of the collations that are available for
				use in processing  expressions.</termdef> 
                        <termdef term="collation" id="dt-collation">A <term>collation</term> is a specification of the manner in which strings and URIs are compared and, by extension, ordered. For a more complete definition of collation, see <bibref ref="xpath-functions-30"/>.</termdef>
                     </p></item><item><p> 
                        <termdef id="dt-def-collation" term="default collation">
                           <term>Default
				collation.</term> This identifies one of the collations in <termref def="dt-static-collations">statically known collations</termref> as the  collation to be
				used by functions and operators for comparing and ordering values of type <code>xs:string</code> and <code>xs:anyURI</code> (and types derived from them) when no
				explicit collation is
				specified.</termdef>
                     </p></item><item><p diff="del">
                        <termdef id="dt-base-uri" term="base URI">
                           <term>Base
    URI.</term> This is an absolute URI, used when necessary to
    <termref def="dt-resolve-relative-uri">resolve a relative
    URI</termref>.</termdef> The URI value is whitespace normalized
    according to the rules for the <code>xs:anyURI</code> type in
    <bibref ref="XMLSchema10"/> or  <bibref ref="XMLSchema11"/>.</p><p diff="add">
                        <termdef id="dt-static-base-uri" term="Static Base URI">
                           <term>Static Base URI.</term>
        This is an absolute URI, used to resolve
        
        <phrase role="xpath">relative URI references.</phrase>
                        </termdef>
      
                        <phrase role="xpath">
        If <var>E</var> is a subexpression of <var>F</var> then the Static 
        Base URI of <var>E</var> is the same as the Static Base URI of <var>F</var>.
        There are no constructs in XPath that require resolution of relative URI references 
        during static analysis.
      </phrase>
      The Static Base URI is available during dynamic evaluation by use of the 
      <code>fn:static-base-uri</code> function, and is used implicitly during dynamic 
      evaluation by functions such as <code>fn:doc</code>. Relative URI references are 
      resolved as described in <specref ref="id-resolve-relative-uri"/>.</p></item><item><p> 
                        <termdef id="dt-known-docs" term="statically known  documents">
                           <term>Statically known documents.</term> This is a mapping
from strings <phrase diff="del">on</phrase>to types.  The string represents the absolute URI of a
resource that is potentially available using the <code>fn:doc</code>
function.  The type is the <termref def="dt-static-type">static type</termref> of a call to <code>fn:doc</code>  with the given URI as its
literal argument. </termdef>
If the argument to <code>fn:doc</code> is a
string literal that is not present in <term>statically known documents</term>, then the
<termref def="dt-static-type">static type</termref> of
<code>fn:doc</code> is <code>document-node()?</code>.</p><note><p>The purpose of the <term>statically known
documents</term> is to provide static type information, not to determine
which documents are available. A URI need not be found in the
<term>statically known documents</term> to be accessed using
<code>fn:doc</code>. </p></note></item><item><p>
                        <termdef id="dt-known-collections" term="statically known  collections">
                           <term>Statically known collections.</term> This is a
mapping from strings <phrase diff="del">on</phrase>to types.  The string represents the absolute
URI of a resource that is potentially available using the
<code>fn:collection</code> function.  The type is the type of the
sequence of nodes that would result from calling the
<code>fn:collection</code> function with this URI as its
argument.</termdef> If the argument to
<code>fn:collection</code> is a string literal that is not present in
<term>statically known collections</term>, then the <termref def="dt-static-type">static type</termref> of
<code>fn:collection</code> is <code>node()*</code>.</p><note><p>The purpose of the <term>statically known
collections</term> is to provide static type information, not to determine
which collections are available. A URI need not be found in the
<term>statically known collections</term> to be accessed using
<code>fn:collection</code>.
</p></note></item><item><p>
                        <termdef id="dt-known-default-collection" term="statically known default collection type">
                           <term>Statically known default collection type.</term> This is the type of the sequence of nodes that would result from calling the <code>fn:collection</code> function with no arguments.</termdef> Unless initialized to some other value by an implementation, the value of <term>statically known default collection type</term> is <code>node()*</code>.</p></item><item><p>
                        <termdef id="dt-static-decimal-formats" term="statically   known decimal formats">
                           <term>Statically known decimal
  formats.</term> This is <phrase diff="del">the set of known decimal formats.</phrase>
                           <phrase diff="add">a mapping from QName to decimal format, with one default format that has no visible name.</phrase> Each
  format is used for serializing decimal numbers using <code>fn:format-number()</code>.</termdef>
                        <phrase diff="del"> Each format is identified by an <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EQName" xlink:type="simple">EQName</nt>, except
  for the default format, which has no visible name.  Each format
  contains the properties described in the following paragraphs.</phrase>
                     </p><p>
                        <phrase diff="del">The following properties</phrase>
                        <phrase diff="add">Each decimal format contains three sets of properties, which</phrase> control the interpretation of characters
  in the picture string supplied to the <code>fn:format-number</code>
  function, and also specify characters that may appear in the result
  of formatting the number.</p><p>The following attributes specify characters used to format the number per se:</p><ulist diff="chg"><item><p>
                              <termdef id="id-static-decimal-separator" term="decimal-separator">
                                 <term>decimal-separator</term>
  specifies the character used for the decimal-separator-symbol; the
  default value is the period character (.)</termdef>
                           </p></item><item><p>
                              <termdef id="id-static-decimal-format-grouping-separator" term="grouping-separator">
                                 <term>grouping-separator</term>
    specifies the character used for the grouping-separator-symbol, which is
    typically used as a thousands separator; the default value is the
    comma character (,)</termdef>
                           </p></item><item><p>
                              <termdef id="id-static-decimal-format-percent-sign" term="percent-sign">
                                 <term>percent</term>
    specifies the character used for the percent-symbol; the default
    value is the percent character (%)</termdef>
                           </p></item><item><p>
                              <termdef id="id-static-decimal-format-per-mille-sign" term="per-mille-sign">
                                 <term>per-mille</term>
    specifies the character used for the per-mille-symbol; the default
    value is the Unicode per-mille character
    (#x2030)</termdef>
                           </p></item><item><p>
                              <termdef id="id-static-decimal-format-zero-digit" term="zero-digit">
                                 <term>zero-digit</term>
    specifies the character used for the zero-digit-symbol; the default
    value is the digit zero (0). This character must be a digit
    (category Nd in the Unicode property database), and it must have
    the numeric value zero. This attribute implicitly defines the
    Unicode character that is used to represent each of the values 0
    to 9 in the final result string: Unicode is organized so that each
    set of decimal digits forms a contiguous block of characters in
    numerical sequence.</termdef>
                           </p></item></ulist><p>The following attributes control the interpretation of
  characters in the picture string supplied to the format-number
  function. In each case the value must be a single character.
  </p><ulist><item><p>
                              <termdef id="id-static-decimal-format-digit-sign" term="digit-sign">
                                 <term>digit-sign</term> specifies the character used for the digit-sign in the picture string; the default value is the number sign character (#)</termdef>
                           </p></item><item><p>
                              <termdef id="id-static-decimal-format-pattern-separator-sign" term="pattern-separator-sign">
                                 <term>pattern-separator</term> specifies the character used for the
pattern-separator-symbol, which separates positive and negative sub-pictures
in a picture string; the default value is the semi-colon character (;)</termdef>
                           </p></item></ulist><p>The following attributes specify characters or strings that
  may appear in the result of formatting the number:</p><ulist><item><p>
                              <termdef id="id-static-decimal-format-infinity" term="infinity">
                                 <term>infinity</term> specifies the string used for the infinity-symbol; the
default value is the string "Infinity"</termdef>
                           </p></item><item><p>
                              <termdef id="id-static-decimal-format-NaN" term="NaN">
                                 <term>NaN</term> specifies the string used for the NaN-symbol, which is used to
represent the value NaN (not-a-number); the default value is the string "NaN"</termdef>
                           </p></item><item><p>
                              <termdef id="id-static-decimal-format-minus-sign" term="minus-sign">
                                 <term>minus-sign</term> specifies the character used for the minus-sign-symbol; the
default value is the hyphen-minus character (-, #x2D). The value must be a
single character.</termdef>
                           </p></item></ulist></item></ulist></div3><div3 id="eval_context"><head>Dynamic Context</head><p>
                  <termdef id="dt-dynamic-context" term="dynamic context">The <term>dynamic
context</term> of an expression is defined as information that is
available at the time the expression is evaluated.</termdef> If
evaluation of an expression relies on some part of the <termref def="dt-dynamic-context">dynamic context</termref> that 
<phrase diff="del">has not been assigned a value</phrase>
                  <phrase diff="add">is <xtermref spec="DM30" ref="dt-absent"/>
                  </phrase>, a <termref def="dt-dynamic-error">dynamic
error</termref> is raised <errorref class="DY" code="0002"/>.</p><p>The individual
components of the <termref def="dt-dynamic-context">dynamic
context</termref> are <phrase diff="del">summarized</phrase>
                  <phrase diff="add">described</phrase> below. 

<phrase role="xpath">Further rules governing the semantics of these components can be found in <specref ref="id-xp-evaluation-context-components" role="xpath"/>.</phrase>
               </p><p>The
<termref def="dt-dynamic-context">dynamic context</termref> consists
of all the components of the <termref def="dt-static-context">static
context</termref>, and the additional components listed below.</p><p>
                  <termdef id="dt-focus" term="focus">The first three components of
the <termref def="dt-dynamic-context">dynamic context</termref>
(context item, context position, and context size) are called the
<term>focus</term> of the expression. </termdef> The focus enables the
processor to keep track of which items are being processed by the
expression.

<phrase diff="add">If any component in the focus is defined, all components of the focus are defined.</phrase>

                  <termdef id="dt-singleton-focus" term="singleton focus">A <term>singleton focus</term> is a focus that refers to a single item; in a singleton focus, context item is set to the item, context position = 1 and context size = 1.</termdef>
               </p><p>Certain language constructs, notably the <termref def="dt-path-expression">path
operator</termref> 
                  <code role="parse-test">E1/E2</code>, <phrase diff="add">the <termref def="dt-path-expression">simple mapping operator</termref>,</phrase> and the <termref def="dt-predicate">predicate</termref> 
                  <code role="parse-test">E1[E2]</code>, create a new focus
for the evaluation of a sub-expression. In these constructs, <code role="parse-test">E2</code> is evaluated once for each item in the
sequence that results from evaluating <code role="parse-test">E1</code>. Each time <code role="parse-test">E2</code> is evaluated, it is evaluated with a
different focus. The focus for evaluating <code role="parse-test">E2</code> is referred to below as the <term>inner
focus</term>, while the focus for evaluating <code role="parse-test">E1</code> is referred to as the <term>outer
focus</term>. The inner focus exists only while <code role="parse-test">E2</code> is being evaluated. When this evaluation
is complete, evaluation of the containing expression continues with
its original focus unchanged.</p><ulist><item><p>
                        <termdef id="dt-context-item" term="context item">The <term>context item</term>
is the <termref def="dt-item">item</termref> currently being processed.</termdef>
                        <termdef id="dt-context-node" term="context node">When the context item is a
node, it can also be referred to as the <term>context
node</term>.</termdef> The context item is returned by an expression
consisting of a single dot (<code role="parse-test">.</code>). When an expression <code role="parse-test">E1/E2</code> or <code role="parse-test">E1[E2]</code> is evaluated, each item in the
sequence obtained by evaluating <code role="parse-test">E1</code>
becomes the context item in the inner focus for an evaluation of <code role="parse-test">E2</code>. </p><p diff="add">
                        <termdef id="dt-initial-context-item" term="initial context item">The <term>initial context item</term> is a context item that an implementation can set before processing a query begins. 
  The query body and the prolog of every module in a query share the same initial context item.</termdef>
                     </p></item><item><p>
                        <termdef id="dt-context-position" term="context position">The <term>context
position</term> is the position of the context item within the
sequence of items currently being processed.</termdef> It changes whenever the context item
changes. When the focus is defined, the value of the context position is an integer greater than zero. The context
position is returned by the expression <code role="parse-test">fn:position()</code>. When an expression <code role="parse-test">E1/E2</code> or <code role="parse-test">E1[E2]</code> is evaluated, the context position in
the inner focus for an evaluation of <code role="parse-test">E2</code>
is the position of the context item in the sequence obtained by
evaluating <code role="parse-test">E1</code>. The position of the
first item in a sequence is always 1 (one). The context position is
always less than or equal to the context size.</p></item><item><p>
                        <termdef id="dt-context-size" term="context size">The <term>context
size</term> is the number of items in the sequence of items currently
being processed.</termdef> Its value is always an
integer greater than zero. The context size is returned by the
expression <code role="parse-test">fn:last()</code>. When an expression
<code role="parse-test">E1/E2</code> or <code role="parse-test">E1[E2]</code> is evaluated, the context size in the
inner focus for an evaluation of <code role="parse-test">E2</code> is
the number of items in the sequence obtained by evaluating <code role="parse-test">E1</code>. </p></item><item><p diff="del">
                        <termdef id="dt-dynamic-base-uri" term="Dynamic Base     URI">
                           <term>Dynamic Base URI.</term> This is an absolute URI, used
    to resolve relative URIs during dynamic evaluation.</termdef> The
    URI value is whitespace normalized according to the rules for the
    <code>xs:anyURI</code> type in <bibref ref="XMLSchema10"/> or
    <bibref ref="XMLSchema11"/>.  The Dynamic Base URI corresponds to
    the location in which the query is executed; it is set by the
    implementation.</p></item><item><p> 
                        <termdef id="dt-variable-values" term="variable values">
                           <term>Variable values</term>. This is a <phrase diff="del">set of
				(<termref def="dt-expanded-qname">expanded QName</termref>, value) pairs.</phrase>
                           <phrase diff="add">mapping from <termref def="dt-expanded-qname">expanded QName</termref> to value.</phrase>  It contains the
				same <termref def="dt-expanded-qname">expanded QNames</termref> as the <termref def="dt-in-scope-variables">in-scope variables</termref> in the
				<termref def="dt-static-context">static context</termref> for the expression. The <termref def="dt-expanded-qname">expanded QName</termref> is the name of the variable and the value is the dynamic value of the variable, which includes its <termref def="dt-dynamic-type">dynamic type</termref>.</termdef>
                     </p></item><item><p diff="del">
                        <termdef term="function implementation" id="dt-function-implementation">
                           <term>Function implementations</term>. Each function in <termref def="dt-function-signature">function signatures</termref> has a function implementation that enables the function to map instances of its parameter types into an instance of its result type. </termdef>
                     </p><p diff="add">
                        <termdef term="named functions" id="dt-named-functions">
                           <term>Named functions</term>.
        This is a mapping from (expanded QName, arity) to 
        <xtermref spec="DM30" ref="dt-function-item">function</xtermref>.
      </termdef>
      It supplies a function for each signature in 
      <termref def="dt-known-func-signatures">
        statically known function signatures
      </termref>
      and may supply other functions 
      (see <specref ref="id-consistency-constraints"/>).  Named functions can include functions with implementation-dependent implementations; these functions do not have a static context or a dynamic context of their own.
    </p></item><item><p> 
                        <termdef id="dt-date-time" term="current dateTime">
                           <term>Current dateTime.</term> This information represents
				an <termref def="dt-implementation-dependent">implementation-dependent</termref> point in time during the processing of <phrase role="xpath">an expression</phrase>, and includes an explicit timezone. It can be retrieved by the  <code>fn:current-dateTime</code> function. If invoked multiple times during the execution of <phrase role="xpath">an expression</phrase>,
				this function always returns the same result.</termdef>
                     </p></item><item><p>
                        <termdef id="dt-timezone" term="implicit timezone">
                           <term>Implicit timezone.</term> This is the timezone to be used when a date,
time, or dateTime value that does not have a timezone is used in a
comparison or arithmetic operation. The implicit timezone is an  <termref def="dt-implementation-defined">implementation-defined</termref> value of type
<code>xs:dayTimeDuration</code>. See <bibref ref="XMLSchema10"/> or <bibref ref="XMLSchema11"/> for the range of valid values of a timezone.</termdef>
                     </p></item><item><p diff="add">
                        <termdef id="dt-default-language" term="default language">
                           <term>Default language.</term>
  This is the natural language used when creating human-readable output
  (for example, by the functions <code>fn:format-date</code> and <code>fn:format-integer</code>)
  if no other language is requested. 
  The value is a language code as defined by the type <code>xs:language</code>.</termdef>
                     </p></item><item><p diff="add">
                        <termdef id="dt-default-calendar" term="default calendar">
                           <term>Default calendar.</term>
    This is the calendar used when formatting dates in human-readable output
    (for example, by the functions <code>fn:format-date</code> and <code>fn:format-dateTime</code>)
    if no other calendar is requested. 
    The value is a string.</termdef>
                     </p></item><item><p diff="add">
                        <termdef id="dt-default-place" term="default place">
                           <term>Default place.</term>
    This is a geographical location used to identify the place where events happened (or will happen) when
    formatting dates and times using functions such as <code>fn:format-date</code> and <code>fn:format-dateTime</code>,
    if no other place is specified. It is used when translating timezone offsets to civil timezone names,
    and when using calendars where the translation from ISO dates/times to a local representation is dependent
    on geographical location. Possible representations of this information are an ISO country code or an
    Olson timezone name, but implementations are free to use other representations from which the above
    information can be derived.</termdef>
                     </p></item><item><p>
                        <termdef id="dt-available-docs" term="available documents">
                           <term>Available
    documents.</term> This is a mapping of strings <phrase diff="del">on</phrase>to document nodes.  Each string
    represents the absolute URI of a resource. The document node is the root of a tree that represents that resource 
    using the <termref def="dt-datamodel">data model</termref>. The document node is returned by the <code>fn:doc</code> 
    function when applied to that URI.</termdef> The set of available documents is not limited to the set of 
    <termref def="dt-known-docs">statically known documents</termref>, and it may be empty.</p><p>If there are one or more 
    URIs in <termref def="dt-available-docs">available documents</termref> that map to a document
    node <code>D</code>, then the document-uri property of <code>D</code> must either be absent, or must
    be one of these URIs.</p><note><p>This means that given a document node <code>$N</code>, the result of
    <code role="parse-test">fn:doc(fn:document-uri($N)) is $N</code> will always be <code>true</code>, unless
  <code role="parse-test">fn:document-uri($N)</code> is an empty sequence.</p></note></item><item diff="add"><p>
                        <termdef id="dt-available-text-resources" term="available text resources">
                           <term>Available text resources</term>. 
  This is a mapping of strings to text resources. Each string
  represents the absolute URI of a resource. The resource is returned
  by the <code>fn:unparsed-text</code> function when applied to that
  URI.</termdef> The set of available text resources is not limited to
  the set of <termref def="dt-known-docs">statically known
  documents</termref>, and it may be empty.</p></item><item><p>
                        <termdef id="dt-available-collections" term="available node collections">
                           <term>Available
                         node collections.</term> This is a mapping of
                         strings <phrase diff="del">on</phrase>to sequences of nodes. Each string
                         represents the absolute URI of a
                         resource. The sequence of nodes represents
                         the result of the <code>fn:collection</code>
                         function when that URI is supplied as the
                         argument. </termdef> The set of available
                         node collections is not limited to the set of <termref def="dt-known-collections">statically known
                         collections</termref>, and it may be empty.</p><p>For every document node <code>D</code> that is in the target of a mapping in <termref def="dt-available-collections">available node collections</termref>, or that is the root of a tree containing such a node, the document-uri property of <code>D</code> must either be absent, or must be a
URI <code>U</code> such that <termref def="dt-available-docs">available documents</termref> contains a mapping from <code>U</code> to <code>D</code>.

</p><note><p>This means that for any document node <code>$N</code> retrieved using the
<code>fn:collection</code> function, either directly or by navigating to the root of a
node that was returned, the result of <code role="parse-test">fn:doc(fn:document-uri($N)) is $N</code>
will always be <code>true</code>, unless <code>fn:document-uri($N)</code> is an empty sequence. This
implies a requirement for the <code>fn:doc</code> and <code>fn:collection</code> functions to be
consistent in their effect. If the implementation uses catalogs or
user-supplied URI resolvers to dereference URIs supplied to the <code>fn:doc</code>
function, the implementation of the <code>fn:collection</code> function must take these
mechanisms into account. For example, an implementation might achieve this
by mapping the collection URI to a set of document URIs, which are then
resolved using the same catalog or URI resolver that is used by the <code>fn:doc</code> function.</p></note></item><item><p>
                        <termdef id="dt-default-collection" term="default node collection">
                           <term>Default node collection.</term>
    This is the sequence of nodes that would result from calling the <code>fn:collection</code> function
    with no arguments.</termdef> The value of <term>default collection</term> may be initialized by the
    implementation.</p></item><item><p>
                        <termdef id="dt-available-resource-collections" term="available resource collections">
                           <term>Available
    resource collections.</term> This is a mapping of
    strings <phrase diff="del">on</phrase>to sequences of URIs. The string
    represents the absolute URI of a
    resource which can be interpreted as an aggregation of a number of individual resources each of which
    has its own URI. The sequence of URIs represents
    the result of the <code>fn:uri-collection</code>
    function when that URI is supplied as the
    argument. </termdef> There is no implication that the URIs in this sequence
    can be successfully dereferenced, or that the resources they refer to have any particular media type.</p><note><p>An implementation <rfc2119>may</rfc2119> maintain some consistent relationship between the available
  node collections and the available resource collections, for example by ensuring that the result of
  <code>fn:uri-collection(X)!fn:doc(.)</code> is the same as the result of <code>fn:collection(X)</code>.
    However, this is not required. The <code>fn:uri-collection</code> function is more 
    general than <code>fn:collection</code> in that it allows access to resources other 
    than XML documents; at the same time, <code>fn:collection</code> allows access to 
    nodes that might lack individual URIs, for example nodes corresponding 
    to XML fragments stored in the rows of a relational database.</p></note></item><item><p>
                        <termdef id="dt-default-resource-collection" term="default resource collection">
                           <term>Default resource collection.</term>
    This is the sequence of URIs that would result from calling the <code>fn:uri-collection</code> function
    with no arguments.</termdef> The value of <term>default resource collection</term> may be initialized by the
    implementation.</p></item><item><p>
                        <termdef id="dt-environment-variables" term="environment variables">
                           <term>Environment variables.</term>
  This is a <phrase diff="del">set of (name, value) pairs.</phrase>
                           <phrase diff="add">mapping from names to values.</phrase>
    Both the names and the values are strings. The names are compared using an
    <termref def="dt-implementation-defined">implementation-defined</termref> collation, and are unique under this collation. The set of environment variables is
  <termref def="dt-implementation-defined">implementation-defined</termref> and <rfc2119>may</rfc2119> be empty.</termdef>
                     </p><note><p>A possible implementation is to provide the set of POSIX environment variables (or their equivalent on other
      operating systems) appropriate to the process in which the <phrase role="xpath">expression is evaluated</phrase>.</p></note></item></ulist></div3></div2><div2 id="id-processing-model"><head>Processing
                         Model</head><p>XPath 3.0 is defined in terms
                         of the <termref def="dt-datamodel">data
                         model</termref> and the <termref def="dt-expression-context">expression
                         context</termref>.</p><graphic xmlns:xlink="http://www.w3.org/1999/xlink" source="ProcMod-XPath.gif" alt="Processing                          Model Overview" role="xpath" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad"/><p>Figure 1:
                         Processing Model Overview</p><p>Figure 1 provides a schematic overview of the processing steps that
are discussed in detail below. Some of these steps are completely
outside the domain of XPath 3.0; in Figure 1, these are depicted
outside the line that represents the boundaries of the language, an
area labeled <term>external processing</term>. The external processing
domain includes generation of an <termref def="dt-data-model-instance">XDM instance</termref> that represents the data to be queried (see <specref ref="id-data-model-generation"/>), schema import processing (see
<specref ref="id-schema-import-processing"/>) and serialization. The area inside the boundaries of
the language is known as the <phrase role="xpath">
                  <term>XPath processing domain</term>
               </phrase>, which includes the static
analysis and dynamic evaluation phases (see <specref ref="id-expression-processing"/>).  Consistency constraints on the
<phrase role="xpath">XPath</phrase> processing domain are defined in <specref ref="id-consistency-constraints"/>.</p><div3 id="id-data-model-generation"><head>Data Model Generation</head><p>Before <phrase role="xpath">an expression</phrase> can be processed, its input data must be represented as an <termref def="dt-data-model-instance">XDM instance</termref>. This process occurs outside
the domain of XPath 3.0, which is why Figure 1 represents it in the
external processing domain. Here are some steps by which an XML
document might be converted to an <termref def="dt-data-model-instance">XDM instance</termref>:</p><olist><item><p>A document may be parsed using an XML parser that
generates an <term>XML Information Set</term> (see <bibref ref="XINFO"/>). The parsed document may then be validated against one
or more schemas. This process, which is described in <bibref ref="XMLSchema10"/> or <bibref ref="XMLSchema11"/>, results in an abstract information structure called
the <term>Post-Schema Validation Infoset</term> (PSVI). If a document
has no associated schema, its Information Set is preserved. (See DM1
in Fig. 1.)</p></item><item><p>The Information Set or PSVI may be
transformed into an <termref def="dt-data-model-instance">XDM instance</termref>
by a process described in <bibref ref="xpath-datamodel-30"/>. (See DM2 in
Fig. 1.)</p></item></olist><p>The above steps provide an example of how an <termref def="dt-data-model-instance">XDM instance</termref> might be constructed. An XDM instance might
also be synthesized directly from a relational database, or
constructed in some other way (see DM3 in Fig. 1.) XPath 3.0 is defined in terms
of the <termref def="dt-datamodel">data model</termref>,
but it does not place any constraints on how XDM instances are constructed.</p><p>
                  <termdef term="type annotation" id="dt-type-annotation">Each element node and attribute node in an <termref def="dt-data-model-instance">XDM instance</termref> has a <term>type annotation</term> (<phrase diff="del">referred to</phrase>
                     <phrase diff="add">described</phrase> in <bibref ref="xpath-datamodel-30"/>. <phrase diff="del">as its <code>type-name</code> property.</phrase>) The type annotation of a node is a <phrase diff="add">reference to an XML Schema type.</phrase> 
                     <phrase diff="del">
                        <termref def="dt-schema-type">schema type</termref> that describes the relationship between the <termref def="dt-string-value">string value</termref> of the node and its <termref def="dt-typed-value">typed value</termref>.</phrase>
                  </termdef>  
                  <phrase diff="add">The <code>type-name</code> of a node is the name of the type referenced by its <termref def="dt-type-annotation">type annotation</termref>.</phrase> If the <termref def="dt-data-model-instance">XDM instance</termref> was derived from a validated XML document as described in <xspecref spec="DM30" ref="const-psvi"/>, the type annotations of the element and attribute nodes are derived from schema
validation. XPath 3.0 does
not provide a way to directly access the type annotation of an element
or attribute node.</p><p>The value of an attribute is represented directly within the
attribute node. An attribute node whose type is unknown (such as might
occur in a schemaless document) is given the <termref def="dt-type-annotation">type annotation</termref>
                  <code>xs:untypedAtomic</code>.</p><p>The value of an element is represented by the children of the
element node, which may include text nodes and other element
nodes. The <termref def="dt-type-annotation">type annotation</termref> of an element node indicates how the values in
its child text nodes are to be interpreted. An element that has not been validated (such as might occur in a schemaless document) is annotated
with the schema type <code>xs:untyped</code>. An element that has been validated and found to be partially valid is annotated with the schema type <code>xs:anyType</code>. If an element node is annotated as <code>xs:untyped</code>, all its descendant element nodes are also annotated as <code>xs:untyped</code>. However, if an element node is annotated as <code>xs:anyType</code>, some of its descendant element nodes may have a more specific <termref def="dt-type-annotation">type annotation</termref>.</p></div3><div3 id="id-schema-import-processing"><head>Schema Import Processing</head><p role="xpath">The <termref def="dt-issd">in-scope schema
definitions</termref> in the <termref def="dt-static-context">static
context</termref> are provided by the host language (see step SI1 in
Figure 1) and must satisfy the consistency constraints defined in
<specref ref="id-consistency-constraints"/>.

</p></div3><div3 id="id-expression-processing"><head>Expression
Processing</head><p>XPath 3.0 defines two phases of processing called
the <termref def="dt-static-analysis">static analysis phase</termref>
and the <termref def="dt-dynamic-evaluation">dynamic evaluation
phase</termref> (see Fig. 1).  During the static analysis phase, <termref def="dt-static-error">static errors</termref>,  <termref def="dt-dynamic-error">dynamic errors</termref>, or <termref def="dt-type-error">type errors</termref> may be raised. During the dynamic evaluation phase, only <termref def="dt-dynamic-error">dynamic errors</termref> or <termref def="dt-type-error">type errors</termref> may be raised. These kinds of errors are defined in <specref ref="id-kinds-of-errors"/>.  </p><p>Within each phase, an implementation is free to use any
strategy or algorithm whose result conforms to the
specifications in this document.</p><div4 id="id-static-analysis"><head>Static Analysis Phase</head><p>
                     <termdef id="dt-static-analysis" term="static analysis phase">The
<term>static analysis phase</term> depends on the expression itself
and on the <termref def="dt-static-context">static context</termref>. The <term>static analysis phase</term> does
not depend on input data (other than schemas).</termdef>
                  </p><p>During the static analysis phase, the <phrase role="xpath">XPath expression</phrase> is parsed into an
internal representation called the <term>operation tree</term> (step
SQ1 in Figure 1).  A parse error is raised as a <termref def="dt-static-error">static error</termref> 
                     <errorref class="ST" code="0003"/>. The <termref def="dt-static-context">static context</termref> is initialized by the implementation (step SQ2).  The <termref def="dt-static-context">static context</termref> is used to resolve schema type names, function names, namespace prefixes, and variable names (step
SQ4).
If a name of one of these kinds in the <term>operation tree</term> is
not found in the <termref def="dt-static-context">static context</termref>, a <termref def="dt-static-error">static error</termref> (<errorref class="ST" code="0008"/> or <errorref class="ST" code="0017"/>) is raised (however, see exceptions to this rule in <specref ref="id-element-test"/> and <specref ref="id-attribute-test"/>.)</p><p>The <term>operation tree</term> is then
<term>normalized</term> by making explicit the implicit operations
such as <termref def="dt-atomization">atomization</termref> and extraction of <termref def="dt-ebv">Effective Boolean Values</termref> (step SQ5).</p><p>During the <termref def="dt-static-analysis">static analysis
phase</termref>, a processor may perform type analysis. The
effect of type analysis is to assign a <termref def="dt-static-type">static type</termref> to each expression in the
operation tree. <termdef id="dt-static-type" term="static type">The
<term>static type</term> of an expression is the best inference that
the processor is able to make statically about the type of the result
of the expression.</termdef> This specification does not define the
rules for type analysis nor the static types that are assigned to
particular expressions: the only constraint is that the inferred type
must match all possible values that the expression is capable of
returning.</p><p>Examples of inferred static types might be:</p><ulist><item><p>For the expression <code>concat(a,b)</code> the inferred static type is <code>xs:string</code>
                        </p></item><item><p>For the expression <code>$a = $v</code> the inferred static type is <code>xs:boolean</code>
                        </p></item><item><p>For the expression <code>$s[exp]</code> the inferred static
    type has the same item type as the static type of <code>$s</code>,
    but a cardinality that allows the empty sequence even if the
    static type of <code>$s</code> does not allow an empty
    sequence.</p></item><item><p>The inferred static type of the expression <code>data($x)</code> (whether written
    explicitly or inserted into the operation tree in places where atomization
    is implicit) depends on the inferred static type of <code>$x</code>: for example, if <code>$x</code>
    has type <code>element(*, xs:integer)</code> then <code>data($x)</code> has static type <code>xs:integer</code>.</p></item></ulist><p>In XQuery 1.0 and XPath 2.0, rules for static type inferencing were published
normatively in <bibref ref="xquery-semantics"/>, but implementations were allowed to
refine these rules to infer a more precise type where possible. In
XQuery 3.0 and XPath 3.0, the rules for static type inferencing are entirely implementation-defined.</p><p>Every kind of expression also imposes requirements on the type of its
operands. For example, with the expression <code>substring($a, $b, $c)</code>, <code>$a</code> must be
of type <code>xs:string</code> (or something that can be converted to <code>xs:string</code> by the
function calling rules), while <code>$b</code> and <code>$c</code> must be of type <code>xs:double</code>.</p><p>If the Static Typing Feature is in effect, a processor must raise a
type error during static analysis if the inferred static type of an
expression is not subsumed by the required type of the context where the
expression is used. For example, the call of substring above would cause a
type error if the inferred static type of <code>$a</code> is <code>xs:integer</code>; equally, a type
error would be reported during static analysis if the inferred static type
is <code>xs:anyAtomicType</code>.</p><p>If the Static Typing Feature is not in effect, a processor may raise a type
error during static analysis only if the inferred static type of an
expression has no overlap (intersection) with the required type: so for the
first argument of substring, the processor may raise an error if the
inferred type is <code>xs:integer</code>, but not if it is <code>xs:anyAtomicType</code>.
Alternatively, if the Static Typing Feature is not in effect, the processor
may defer all type checking until the dynamic evaluation phase.</p></div4><div4 id="id-dynamic-evaluation"><head>Dynamic Evaluation Phase</head><p>
                     <termdef id="dt-dynamic-evaluation" term="dynamic evaluation phase">The <term>dynamic evaluation phase</term> is the phase during which the value of an expression is computed.</termdef> It occurs after completion of the <termref def="dt-static-analysis">static analysis phase</termref>.</p><p>The dynamic evaluation phase can occur only if no errors were detected during the <termref def="dt-static-analysis">static analysis phase</termref>. If the <termref def="dt-xpath-static-typing-feature" role="xpath">Static Typing Feature</termref> is in effect, all <termref def="dt-type-error">type errors</termref> are detected during static analysis and serve to inhibit the dynamic evaluation phase.</p><p>The dynamic evaluation phase depends on the <term>operation
tree</term> of the expression being evaluated (step DQ1), on the input
data (step DQ4), and on the <termref def="dt-dynamic-context">dynamic context</termref> (step DQ5), which in turn draws information from  the external environment (step DQ3) and the <termref def="dt-static-context">static context</termref> (step DQ2). The dynamic evaluation phase may create new data-model values (step DQ4) and it may extend the <termref def="dt-dynamic-context">dynamic context</termref> (step DQ5)—for example, by binding values to variables.</p><p>
                     <termdef term="dynamic type" id="dt-dynamic-type">A <term>dynamic type</term> is associated with each value as it is computed. The dynamic type of a value may be more specific than the <termref def="dt-static-type">static type</termref> of the expression that computed it (for example, the  static type of an expression might be <code>xs:integer*</code>, denoting a sequence of zero or more integers, but at evaluation time its value may have the dynamic type <code>xs:integer</code>, denoting exactly one integer.)</termdef>
                  </p><p> If an operand of an expression is found
to have a <termref def="dt-dynamic-type">dynamic type</termref> that is not appropriate for that operand, a
<termref def="dt-type-error">type error</termref> is
raised <errorref class="TY" code="0004"/>.</p><p>Even though static typing can catch many <termref def="dt-type-error">type errors</termref> before an expression is executed, it is possible for an expression to raise an error during evaluation that was not detected by static  analysis. For example, an expression may contain a cast of a string into an integer, which is statically valid. However, if the actual value of the string at run time cannot be cast into an integer, a <termref def="dt-dynamic-error">dynamic error</termref> will result. Similarly, an expression may apply an arithmetic operator to a value whose <termref def="dt-static-type">static type</termref> is <code>xs:untypedAtomic</code>. This is not a <termref def="dt-static-error">static error</termref>, but at run time, if the value cannot be successfully cast to a <termref def="dt-numeric">numeric</termref> type, a <termref def="dt-dynamic-error">dynamic error</termref> will be raised.</p><p>When the <termref def="dt-xpath-static-typing-feature" role="xpath">Static Typing Feature</termref> is in effect, it is also possible for static analysis of an expression to raise a <termref def="dt-type-error">type error</termref>, even though execution of the expression on certain inputs would be successful. For example, an expression might contain a function that requires an element as its parameter, and the static analysis phase might infer the <termref def="dt-static-type">static type</termref> of the function parameter to be an optional element. This case is treated as a <termref def="dt-type-error">type error</termref> and inhibits evaluation, even though the function call would have been successful for input data in which the optional element is present.</p></div4></div3><div3 id="id-consistency-constraints"><head>Consistency Constraints</head><p>In order for XPath 3.0 to
be well defined, the input <termref def="dt-data-model-instance">XDM instance</termref>, the <termref def="dt-static-context">static context</termref>, and the <termref def="dt-dynamic-context">dynamic context</termref> must be mutually
consistent. The consistency constraints listed below are prerequisites
for correct functioning of an XPath 3.0 implementation. Enforcement
of these consistency constraints is beyond the scope of this
specification. This specification does not
define the result of   <phrase role="xpath">an expression</phrase> under any condition in which one
or more of these constraints is not satisfied.</p><p diff="del">Some of the consistency constraints use the term
<term>data model schema</term>. <termdef id="dt-data-model-schema" term="data model schema">For a given node in an <termref def="dt-data-model-instance">XDM instance</termref>, the  <term>data model schema</term> is defined as the schema from which the
<termref def="dt-type-annotation">type annotation</termref> of that node was derived.</termdef> For a node that was constructed by some
process other than schema validation, the <term>data model schema</term>
consists simply of the schema type definition that is represented by the <termref def="dt-type-annotation">type annotation</termref> of the node.</p><ulist><item><p>For every  node that has a type annotation, if that type annotation is found in the <termref def="dt-issd">in-scope schema definitions</termref> (ISSD), then its definition in the ISSD must be equivalent to its definition in the <phrase diff="add">type annotation</phrase>
                        <termref diff="del" def="dt-data-model-schema">data model schema</termref>.
<phrase diff="del">Furthermore, all types that are derived by extension from the given type in the <termref def="dt-data-model-schema">data model schema</termref> must also be known by equivalent definitions in the ISSD.</phrase>
                     </p></item><item diff="del"><p>For every element name <emph>EN</emph> that is found both in an <termref def="dt-data-model-instance">XDM instance</termref> and in the <termref def="dt-issd">in-scope schema definitions</termref> (ISSD), all elements that are known in the <termref def="dt-data-model-schema">data model schema</termref> to be in the <termref def="dt-substitution-group">substitution group</termref> headed by <emph>EN</emph> must also be known in the ISSD to be in the <termref def="dt-substitution-group">substitution group</termref> headed by <emph>EN</emph>.</p></item><item><p>Every element name, attribute name, or schema type name referenced in <termref def="dt-in-scope-variables">in-scope variables</termref> or <termref def="dt-known-func-signatures">
                           <phrase diff="add">statically known</phrase> function signatures</termref> must be in the <termref def="dt-issd">in-scope schema definitions</termref>, unless it is an element name referenced as part of an <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementTest" xlink:type="simple">ElementTest</nt> or an attribute name referenced as part of an <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeTest" xlink:type="simple">AttributeTest</nt>.</p></item><item><p>Any reference to a global element, attribute, or type name in
the <termref def="dt-issd">in-scope schema definitions</termref> must have a corresponding element, attribute or type
definition in the <termref def="dt-issd">in-scope schema definitions</termref>.</p></item><item><p> For each mapping of a string to a
document node in <termref def="dt-available-docs">available
documents</termref>, if there exists a mapping of the same string to a document type in <termref def="dt-known-docs">statically known documents</termref>, the document node must match the document type, using the matching rules in <specref ref="id-sequencetype-matching"/>.</p></item><item><p> For each mapping of a string to a sequence of nodes in
<termref def="dt-available-collections">available node
collections</termref>, if there exists a mapping of the same string to
a type in <termref def="dt-known-collections">statically known collections</termref>, the sequence of nodes must match the type, using the matching rules in  <specref ref="id-sequencetype-matching"/>.</p></item><item><p>The sequence of nodes in the <termref def="dt-default-collection">default collection</termref> must match the <termref def="dt-known-default-collection">statically known default collection type</termref>, using the matching rules in  <specref ref="id-sequencetype-matching"/>.</p></item><item><p>The value of the <termref def="dt-context-item">context item</termref> must match the <termref def="dt-context-item-static-type">context item static type</termref>, using the
matching rules in <specref ref="id-sequencetype-matching"/>.</p></item><item><p>For each (variable, type) pair in <termref def="dt-in-scope-variables">in-scope variables</termref> and the corresponding (variable, value) pair in <termref def="dt-variable-values">variable values</termref> such that the variable names are equal, the value must match the type, using the matching rules in  <specref ref="id-sequencetype-matching"/>.</p></item><item><p>In the <termref def="dt-static-namespaces">statically known namespaces</termref>, the prefix <code>xml</code> must not be bound to any namespace URI other than <code>http://www.w3.org/XML/1998/namespace</code>, and no prefix other than <code>xml</code> may be bound to this namespace URI.
The prefix <code>xmlns</code> must not be bound to any namespace URI, and no prefix may be bound to the namespace URI <code>http://www.w3.org/2000/xmlns/</code>.</p></item><item diff="add"><p>
      For each 
      <code>(expanded QName, arity) -&gt; FunctionTest</code>
      entry in 
      <termref def="dt-known-func-signatures">statically known function signatures</termref>,
      there must exist an 
      <code>(expanded QName, arity) -&gt; function</code>
      entry in 
      <termref def="dt-named-functions">named functions</termref>
      such that the function's 
      <xtermref spec="DM30" ref="dt-signature">signature</xtermref>
      is 
      <code>FunctionTest</code>. 
    </p></item></ulist></div3></div2><div2 id="errors"><head>Error Handling</head><div3 id="id-kinds-of-errors"><head>Kinds of Errors</head><p>
As described in <specref ref="id-expression-processing"/>, XPath 3.0
defines a <termref def="dt-static-analysis">static analysis phase</termref>, which does not depend on input
data, and a <termref def="dt-dynamic-evaluation">dynamic evaluation
phase</termref>, which does depend on input
data.  Errors may be raised during each phase.</p><p>
                  <termdef id="dt-static-error" term="static error" diff="chg">
An error that <phrase diff="del">must</phrase>
                     <phrase diff="add">can</phrase> be detected during the static analysis phase<phrase diff="add">, and is not a type error,</phrase> is a <term>static error</term>.</termdef> A syntax error is an example of a <termref def="dt-static-error">static error</termref>.</p><p>
                  <termdef id="dt-dynamic-error" term="dynamic error">A <term>dynamic
error</term> is an error that
must be detected during the dynamic evaluation phase and may be detected
during the static analysis phase.
Numeric overflow is an example of a dynamic error.
</termdef>
               </p><p>
                  <termdef id="dt-type-error" term="type error">A <term>type
error</term> may be raised during the static analysis phase or the dynamic evaluation phase.
During the static analysis phase, a <termref def="dt-type-error">type error</termref> occurs
when the <termref def="dt-static-type">static type</termref> of an expression does not match the expected type
of the context in which the expression occurs.
During the dynamic evaluation phase, a <termref def="dt-type-error">type error</termref> occurs
when the <termref def="dt-dynamic-type">dynamic type</termref> of a value does not match the expected type of
the context in which the value occurs.</termdef>
               </p><p>The outcome of the <termref def="dt-static-analysis">static analysis
phase</termref> is either success or one or more <termref def="dt-type-error">type errors</termref>, <termref def="dt-static-error">static errors</termref>, or statically-detected <termref def="dt-dynamic-error">dynamic errors</termref>. The result of the <termref def="dt-dynamic-evaluation">dynamic evaluation
phase</termref> is either a result value, a <termref def="dt-type-error">type
error</termref>, or a <termref def="dt-dynamic-error">dynamic error</termref>.</p><p>If more than one error is present, or if an error condition comes within the
scope of more than one error defined in this specification, then any non-empty
subset of these errors may be reported.</p><p> During the <termref def="dt-static-analysis">static
analysis phase</termref>, if the <termref def="dt-xpath-static-typing-feature" role="xpath">Static Typing Feature</termref> is in effect and the <termref def="dt-static-type">static type</termref> assigned to an expression other than <code>()</code> or <code>data(())</code> is <code>empty-sequence()</code>, a <termref def="dt-static-error">static error</termref> is raised <errorref class="ST" code="0005"/>. This catches cases in which a query refers to an element or attribute that is not present in the <termref def="dt-issd">in-scope schema definitions</termref>, possibly because of a spelling error.</p><p>Independently of whether the <termref def="dt-xpath-static-typing-feature" role="xpath">Static Typing Feature</termref> is in effect, if an implementation can determine during the
<termref def="dt-static-analysis">static
analysis phase</termref> that <phrase role="xpath">an XPath <phrase diff="add">expression</phrase>
                  </phrase>, if evaluated, would necessarily
raise a <termref def="dt-dynamic-error">dynamic error</termref> or that an expression, if evaluated, would necessarily raise a <termref def="dt-type-error">type error</termref>, the implementation may (but is not required to) report that
error during the <termref def="dt-static-analysis">static
analysis phase</termref>.</p><p>An implementation can raise a dynamic error for a <phrase role="xpath">an XPath <phrase diff="add">expression</phrase>
                  </phrase> statically only if the query can never execute without raising that error, as in the following example:</p><eg role="parse-test" xml:space="preserve">
error()
</eg><p>The following example contains a type error, which can be reported statically even if the implementation can not prove that the expression will actually be evaluated.</p><eg role="parse-test" xml:space="preserve">
if (empty($arg))
then
  "cat" * 2
else
  0
</eg><p>
                  <termdef id="dt-warning" term="warning">In addition to <termref def="dt-static-error">static errors</termref>, <termref def="dt-dynamic-error">dynamic errors</termref>, and <termref def="dt-type-error">type
errors</termref>, an XPath 3.0
implementation may raise <term>warnings</term>, either during the <termref def="dt-static-analysis">static analysis
phase</termref> or the
<termref def="dt-dynamic-evaluation">dynamic evaluation
phase</termref>. The circumstances in which warnings are raised, and
the ways in which warnings are handled, are <termref def="dt-implementation-defined">implementation-defined</termref>.</termdef>
               </p><p>In addition to the errors defined in this
specification, an implementation may raise a <termref def="dt-dynamic-error">dynamic error</termref> for a reason beyond the scope of this specification. For
example, limitations may exist on the maximum
numbers or sizes of various objects. 
<phrase diff="del">Any such  limitations, and the
consequences of exceeding them, are <termref def="dt-implementation-dependent">implementation-dependent</termref>.</phrase>
                  <phrase diff="add" id="id-error-limit-exceeded">An error must be raised if such a limitation is exceeded  <errorref class="DY" code="0130"/>.</phrase>



               </p></div3><div3 id="id-identifying-errors"><head>Identifying and Reporting Errors</head><p>The errors defined in this specification are identified by QNames that have the form <code role="xpath">err:XPYYnnnn</code>, where:</p><ulist><item><p>
                        <code>err</code> denotes the namespace for XPath and XQuery errors, <code>http://www.w3.org/2005/xqt-errors</code>. This binding of the namespace prefix <code>err</code> is used for convenience in this document, and is not normative.</p></item><item role="xpath"><p>
                        <code>XP</code> identifies the error as an XPath error (some errors, originally defined by XQuery and later added to XPath, use the code <code>XQ</code> instead).</p></item><item><p>
                        <code>YY</code> denotes the error category, using the following encoding:</p><ulist><item><p>
                              <code>ST</code> denotes a static error.</p></item><item><p>
                              <code>DY</code> denotes a dynamic error.</p></item><item><p>
                              <code>TY</code> denotes a type error.</p></item></ulist></item><item><p>
                        <code>nnnn</code> is a unique numeric code.</p></item></ulist><note><p>The namespace URI for  XPath and XQuery errors is not expected to
change from one version of <phrase role="xpath">XPath</phrase> to another. However, the contents of this
namespace may be extended to include additional error definitions.</p></note><p>The method by which an XPath 3.0 processor reports error information to the external environment is <termref def="dt-implementation-defined">implementation-defined</termref>.</p><p>An error can be represented by a URI reference that is derived from the error QName as follows: an error with namespace URI <emph>
                     <code>NS</code>
                  </emph> and local part <emph>
                     <code>LP</code>
                  </emph> can be represented as the URI reference <emph>
                     <code>NS</code>
                  </emph>
                  <code>#</code>
                  <emph>
                     <code>LP</code>
                  </emph>. For example, an error whose QName is <code>err:XPST0017</code> could be represented as <code>http://www.w3.org/2005/xqt-errors#XPST0017</code>.</p><note><p>Along with a code identifying an error, implementations may wish to return additional information, such
as the location of the error or the processing phase in which it was detected. If an implementation chooses to do so, then the mechanism that
it uses to return this information is <termref def="dt-implementation-defined">implementation-defined</termref>.</p></note></div3><div3 id="id-handling-dynamic"><head>Handling Dynamic Errors</head><p>Except as noted in this document, if any operand of an expression
raises a <termref def="dt-dynamic-error">dynamic error</termref>, the expression also raises a <termref def="dt-dynamic-error">dynamic error</termref>.
If an expression can <phrase diff="del">validly</phrase> return a value or raise a dynamic
error, the implementation may choose to return the value or raise
the dynamic error <phrase diff="add">(see <specref ref="id-errors-and-opt"/>)</phrase>.  For example, the logical expression
<code>expr1 and expr2</code> may return the value <code>false</code>
if either operand returns <code>false</code>,
or may raise a dynamic error if either operand raises a dynamic
error.</p><p> If more than one operand of an expression raises
an error, the
implementation may choose which error is raised by the expression.
For example, in this expression:

</p><eg role="parse-test" xml:space="preserve">($x div $y) + xs:decimal($z)</eg><p>

both the sub-expressions <code role="parse-test">($x div $y)</code> and <code role="parse-test">xs:decimal($z)</code> may
raise an error.  The
implementation may choose which error is raised by the "<code>+</code>"
expression.  Once one operand raises an error, the implementation is
not required, but is permitted, to evaluate any other operands.</p><p>
                  <termdef id="dt-error-value" term="error value">In addition to its identifying QName, a dynamic error may also carry a descriptive string and one or more additional values called <term>error values</term>.</termdef> An implementation may provide a mechanism whereby an application-defined error handler can process error values and produce diagnostic messages<phrase diff="chg">. XQuery 3.0 provides standard error handling via <xspecref spec="XQ30" ref="id-try-catch"/>
                  </phrase>.</p><p>A dynamic error may be raised by a <termref def="dt-built-in-function">built-in
function</termref> or operator.  For example,
the <code>div</code> operator raises an error if its operands are <code>xs:decimal</code> values and its second operand
is equal to zero. Errors raised by built-in functions and operators are defined in <bibref ref="xpath-functions-30"/>.</p><p>A dynamic error can also be raised explicitly by calling the
<code>fn:error</code> function, which <phrase diff="del">only</phrase> 
                  <phrase diff="add">always</phrase> raises <phrase diff="add">a dynamic</phrase> error and never
returns a value.  This function is defined in <bibref ref="xpath-functions-30"/>. For example, the following
function call raises a dynamic
error, providing a QName that identifies the error, a descriptive string, and a diagnostic value (assuming that the prefix <code>app</code> is bound to a namespace containing application-defined error codes):</p><eg role="parse-test" xml:space="preserve">fn:error(xs:QName("app:err057"), "Unexpected value", fn:string($v))</eg></div3><div3 id="id-errors-and-opt"><head>Errors and
      Optimization</head><p>Because different implementations may
      choose to evaluate or optimize an expression in different ways,
      certain aspects of raising <termref def="dt-dynamic-error">dynamic errors</termref> are <termref def="dt-implementation-dependent">implementation-dependent</termref>, as described in this section.</p><p>An implementation is always free to evaluate the operands of an operator in any order.</p><p>In some cases,  a processor can determine the result of an expression without accessing all the data that would be implied by the formal expression semantics. For example, the formal description of <termref def="dt-filter-expression">filter expressions</termref> suggests that <code role="parse-test">$s[1]</code> should be evaluated by examining all the items in sequence <code>$s</code>, and selecting all those that satisfy the predicate <code role="parse-test">position()=1</code>. In practice, many implementations will recognize that they can evaluate this expression by taking the first item in the sequence and then exiting. If <code>$s</code> is defined by an expression such as <code role="parse-test">//book[author eq 'Berners-Lee']</code>, then this strategy may avoid a complete scan of a large document and may therefore greatly improve performance. However, a consequence of this strategy is that a dynamic error or type error that would be detected if the expression semantics were followed literally might not be detected at all if the evaluation exits early. In this example, such an error might occur if there is a <code>book</code> element in the input data with more than one <code>author</code> subelement.</p><p>The extent to which a processor may optimize its access to data, at the cost of not raising errors, is defined by the following rules.</p><p>Consider an expression <emph>Q</emph> that has an operand (sub-expression) <emph>E</emph>. In general the value of <emph>E</emph> is a sequence. At an intermediate stage during evaluation of the sequence, some of its items will be known and others will be unknown. If, at such an intermediate stage of evaluation, a processor is able to establish that there are only two possible outcomes of evaluating <emph>Q</emph>, namely the value <emph>V</emph> or an error, then the processor may deliver the result <emph>V</emph> without evaluating further items in the operand <emph>E</emph>. For this purpose, two values are considered to represent the same outcome if their items are pairwise the same, where nodes are the same if they have the same identity, and values are the same if they are equal and have exactly the same type.</p><p>There is an exception to this rule: If a processor evaluates an operand <emph>E</emph> (wholly or in part), then it  is required to establish that the actual value of the operand <emph>E</emph> does not violate any constraints on its cardinality. For example, the expression <code role="parse-test">$e eq 0</code> results in a type error if the value of <code>$e</code> contains two or more items. A processor is not allowed to decide, after evaluating the first item in the value of <code>$e</code> and finding it equal to zero, that the only possible outcomes are the value <code>true</code> or a type error caused by the cardinality violation. It must establish that the value of <code>$e</code> contains no more than one item.</p><p>These rules apply to all the operands of an expression considered in combination: thus if an expression has two operands <emph>E1</emph> and <emph>E2</emph>, it may be evaluated using any samples of the respective sequences that satisfy the above rules.</p><p>The rules cascade: if <emph>A</emph> is an operand of <emph>B</emph> and <emph>B</emph> is an operand of <emph>C</emph>, then the processor needs to evaluate only a sufficient sample of <emph>B</emph> to determine the value of <emph>C</emph>, and needs to evaluate only a sufficient sample of <emph>A</emph> to determine this sample of <emph>B</emph>.</p><p>The effect of these rules is that the processor is free to stop examining further items in a sequence as soon as it can establish that further items would not affect the result except possibly by causing an error. For example, the processor may return <code>true</code> as the result of the expression <code role="parse-test">S1 = S2</code> as soon as it finds a pair of equal values from the two sequences.</p><p>Another consequence of these rules is that where none of the items in a sequence contributes to the result of an expression, the processor is not obliged to evaluate any part of the sequence. Again, however, the processor cannot dispense with a required cardinality check: if an empty sequence is not permitted in the relevant context, then the processor must ensure that the operand is not an empty sequence.</p><p>Examples:</p><ulist><item><p>If an implementation can find (for example, by using an index) that at
least one item returned by <code>$expr1</code> in the following example has the value <code>47</code>, it is allowed to
return <code>true</code> as the result of the <code>some</code> expression, without searching for
another item returned by <code>$expr1</code> that would raise an error if it were evaluated.
</p><eg role="parse-test" xml:space="preserve">some $x in $expr1 satisfies $x = 47</eg></item><item><p>In the following example, if an implementation can find (for example, by using an index) the
<code>product</code> element-nodes that have an <code>id</code> child with the value <code>47</code>, it is allowed to return these nodes as the
result of the <termref def="dt-path-expression">path expression</termref>, without searching for another <code>product</code> node that
would raise an error because it has an <code>id</code> child whose value is not an integer.</p><eg role="parse-test" xml:space="preserve">//product[id = 47]</eg></item></ulist><!-- <change diff="chg" at="XQ.E4 and XP.E4"> --><p>For a variety of reasons, including optimization, implementations
          may rewrite expressions into a different
          form. There are a number of rules that limit the extent of this freedom:
          </p><ulist><item><p>
                Other than the raising or not raising of errors, the result
                of evaluating a rewritten expression must
                conform to the semantics
                defined in this specification for the original expression.
             </p><note><p>
                This allows an implementation to return a result in cases where the
                original expression would have raised an error, or to raise an error in cases
                where the original expression would have returned a result. The main cases
                where this is likely to arise in practice are (a) where a rewrite changes the
                order of evaluation, such that a subexpression causing an error is evaluated
                when the expression is written one way and is not evaluated when the expression
                is written a different way, and (b) where intermediate results of the
                evaluation cause overflow or other out-of-range conditions.
             </p></note><note><p>
                This rule does not mean that the result of the expression will always
                be the same in non-error cases as if it had not been rewritten, because there
                are many cases where the result of an expression is to some degree
                <termref def="dt-implementation-dependent">implementation-dependent</termref>
                or <termref def="dt-implementation-defined">implementation-defined</termref>.
             </p></note></item><item><p>
                Conditional and typeswitch expressions
                must not raise a dynamic error in
                respect of subexpressions occurring in a branch that is not selected,
                and must not
                return the value delivered by a branch unless that branch is selected.
                Thus, the following example must not raise a
                dynamic error if the document <code>abc.xml</code> does not exist:
             </p><eg xml:space="preserve" role="parse-test">if (doc-available('abc.xml')) then doc('abc.xml') else ()</eg></item><item><p>
                As stated earlier, an expression
                must not be rewritten to dispense with a
                required cardinality check: for example, <code role="parse-test">string-length(//title)</code>
                must raise an
                error if the document contains more than one title element.
             </p></item><item><p>
                Expressions must not be rewritten in such a way
                as to create or remove static errors.

                The static errors in this specification are defined
                for the original expression, and must be preserved if
                the expression is rewritten.</p></item></ulist><p>
          Expression rewrite is illustrated by the following examples.
          </p><!-- </change> --><ulist><item><p>Consider the expression <code role="parse-test">//part[color eq "Red"]</code>. An implementation might
choose to rewrite this expression as <code role="parse-test">//part[color = "Red"][color eq
"Red"]</code>. The implementation might then process the expression as follows:
First process the "<code>=</code>" predicate by probing an index on parts by color to
quickly find all the parts that have a Red color; then process the "<code>eq</code>"
predicate by checking each of these parts to make sure it has only a
single color. The result would be as follows:

<ulist><item><p>Parts that have exactly one color that is Red are returned.</p></item><item><p>If some part has color Red together with some other color, an error is
raised.</p></item><item><p>The existence of some part that has no color Red but has multiple non-Red
colors does not trigger an error.</p></item></ulist>
                     </p></item><item><p>The expression in the following example cannot raise a casting error if it is evaluated
exactly as written (i.e., left to right). Since neither predicate depends on the context position, an implementation might choose to reorder the predicates to achieve better
performance (for example, by taking advantage of an index). This
reordering could cause the expression to raise an
error.</p><eg role="parse-test" xml:space="preserve">$N[@x castable as xs:date][xs:date(@x) gt xs:date("2000-01-01")]</eg><p diff="chg" at="XQ.E4 and XP.E4">To avoid unexpected errors caused by expression rewrite,
tests that are designed to prevent dynamic errors should be expressed
using conditional  expressions. For example, the above expression can be written as
follows:</p><eg role="parse-test" xml:space="preserve">$N[if (@x castable as xs:date)
   then xs:date(@x) gt xs:date("2000-01-01")
   else false()]</eg></item></ulist></div3></div2><div2 id="id-important-concepts"><head>Concepts</head><p>This section explains some concepts that are important to the processing of XPath 3.0 expressions.</p><div3 id="id-document-order"><head>Document Order</head><p>An ordering called <term>document order</term> is defined among all the nodes accessible during processing of a given <phrase role="xpath">expression</phrase>, which may consist of one or more <term>trees</term> (documents or fragments). 

Document order is defined in <bibref ref="xpath-datamodel-30"/>, and its definition is repeated here for convenience. 

Document order is a total ordering, although the relative order of some nodes is <termref def="dt-implementation-dependent">implementation-dependent</termref>.  

<termdef term="document order" id="dt-document-order">Informally, <term>document order</term> is the order in which nodes appear in the XML serialization of a document.</termdef>  

                  <termdef term="stable" id="stable">Document order is <term>stable</term>, which means that the relative order of two nodes will not change during the processing of a given <phrase role="xpath">expression</phrase>, even if this order is <termref def="dt-implementation-dependent">implementation-dependent</termref>.</termdef>

                  <termdef term="reverse document order" id="dt-reverse-document-order">The node ordering that is the reverse of document order is called <term>reverse document order</term>.</termdef>
               </p><p>Within a tree, document order satisfies the following constraints:</p><olist><item><p>The root node is the first node.</p></item><item><p>Every node occurs before all of its children and descendants.</p></item><item role="xpath"><p>Namespace nodes immediately follow the element node with
which they are associated. The relative order of namespace nodes is
stable but <termref def="dt-implementation-dependent">implementation-dependent</termref>.</p></item><item><p>Attribute nodes immediately follow the <phrase role="xpath">namespace nodes of the
</phrase> element node with which they are associated. The relative order of
attribute nodes is stable but <termref def="dt-implementation-dependent">implementation-dependent</termref>.</p></item><item><p>The relative order of siblings is the order in which they occur
in the <code>children</code> property of their parent node.</p></item><item><p>Children and descendants occur before following siblings.</p></item></olist><p>The relative order of nodes in distinct trees is stable but
<termref def="dt-implementation-dependent">implementation-dependent</termref>,
subject to the following constraint: If any node in a given tree T1 is before
any node in a different tree T2, then all nodes in tree T1 are before all nodes in
tree T2.</p></div3><div3 id="id-atomization"><head>Atomization</head><p>The semantics of some
XPath 3.0 operators depend on a process called <termref def="dt-atomization">atomization</termref>. Atomization is
applied to a value when the value is used in a context in which a
sequence of atomic values is required. The result of atomization is
either a sequence of atomic values or a <termref def="dt-type-error">type error</termref>  [err:FOTY0012].  <termdef id="dt-atomization" term="atomization">
                     <term>Atomization</term> of a sequence
is defined as the result of invoking the <code>fn:data</code> function
on the sequence, as defined in <bibref ref="xpath-functions-30"/>.</termdef>
               </p><p> The semantics of
<code>fn:data</code> are repeated here for convenience. The result of
<code>fn:data</code> is the sequence of atomic values produced by
applying the following rules to each item in the input
sequence:</p><ulist><item><p>If the item is an atomic value, it is
returned.</p></item><item><p>If the item is a node,
its <termref def="dt-typed-value">typed value</termref> is returned ([err:FOTY0012] is raised if the node has no typed value.)</p></item><item><p>If the item is a <xtermref diff="chg" spec="DM30" ref="dt-function-item">function</xtermref> [err:FOTY0012] is raised.</p></item></ulist><p>Atomization is  used in
processing the following types of expressions: </p><ulist><item><p>Arithmetic expressions</p></item><item><p>Comparison expressions</p></item><item><p>Function calls and returns</p></item><item><p>Cast expressions</p></item></ulist></div3><div3 id="id-ebv"><head>Effective Boolean Value</head><p>Under certain circumstances (listed below), it is necessary to find
the <termref def="dt-ebv">effective boolean value</termref> of a
value. <termdef id="dt-ebv" term="effective boolean value">The
<term>effective boolean value</term> of a value is defined as the result
of applying the <code>fn:boolean</code> function to the value, as
defined in <bibref ref="xpath-functions-30"/>.</termdef>
               </p><p>The dynamic semantics of <code>fn:boolean</code> are repeated here for convenience:</p><olist><item><p>If its operand is an empty sequence, <code>fn:boolean</code> returns <code>false</code>.</p></item><item><p>If its operand is a sequence whose first item is a node, <code>fn:boolean</code> returns <code>true</code>.</p></item><item><p>If its operand is a <termref def="dt-singleton">singleton</termref> value of type <code>xs:boolean</code> or derived from <code>xs:boolean</code>, <code>fn:boolean</code> returns the value of its operand unchanged.</p></item><item><p>If its operand is a <termref def="dt-singleton">singleton</termref> value of type <code>xs:string</code>, <code>xs:anyURI</code>, <code>xs:untypedAtomic</code>, or a type derived from one of these, <code>fn:boolean</code> returns <code>false</code> if the operand value has zero length; otherwise it returns <code>true</code>.</p></item><item><p>If its operand is a <termref def="dt-singleton">singleton</termref> value of any <termref def="dt-numeric">numeric</termref> type or derived from a numeric type, <code>fn:boolean</code> returns <code>false</code> if the operand value is <code>NaN</code> or is numerically equal to zero; otherwise it returns <code>true</code>.</p></item><item><p>



In all other cases, <code>fn:boolean</code> raises a type error [err:FORG0006].
</p></item></olist><p>The <termref def="dt-ebv">effective boolean value</termref> of a sequence is computed implicitly during  processing of the following types of expressions: </p><ulist><item><p>Logical expressions (<code>and</code>, <code>or</code>)</p></item><item><p>The <code>fn:not</code> function</p></item><item><p>Certain types of <termref def="dt-predicate">predicates</termref>, such as <code>a[b]</code>
                     </p></item><item><p>Conditional expressions (<code>if</code>)</p></item><item><p>Quantified expressions (<code>some</code>, <code>every</code>)</p></item><item role="xpath"><p>General comparisons, in <termref def="dt-xpath-compat-mode">XPath 1.0
		compatibility mode</termref>.</p></item></ulist><note><p>The definition of <termref def="dt-ebv">effective boolean
  value</termref> is <emph>not</emph> used when casting a value to the
  type <code>xs:boolean</code>, for example in a <code>cast</code>
  expression or when passing a value to a function whose expected
  parameter is of type <code>xs:boolean</code>.</p></note></div3><div3 id="id-input-sources"><head>Input Sources</head><p>XPath 3.0 has a set of functions that provide access to
    input data. These functions are of particular importance because they provide a way in which an expression can reference a document or a collection of documents. The  input functions are described informally here; they are defined in <bibref ref="xpath-functions-30"/>.</p><p>An expression can access input data either by calling one
    of the input functions or by referencing some part of the
    <termref def="dt-dynamic-context">dynamic context</termref> that is initialized by the external
    environment, such as a <termref def="dt-variable-values">variable</termref> or
    <termref def="dt-context-item">context item</termref>.</p><p>The input functions supported by XPath 3.0 are as follows:</p><ulist><item><p>The <code>fn:doc</code> function takes a string containing a URI. If that URI is associated with a document in <termref def="dt-available-docs">available documents</termref>, <code>fn:doc</code> returns a document node whose content is the <termref def="dt-datamodel">data model</termref> representation of the given document; otherwise it raises a <termref def="dt-dynamic-error">dynamic error</termref>.</p></item><item><p>The <code>fn:unparsed-text</code> function takes a string containing a URI, which must identify a resource that can be read as text;  otherwise it raises a <termref def="dt-dynamic-error">dynamic error</termref>.</p></item><item><p>The <code>fn:environment-variable</code> and <code>fn:available-environment-variables</code> identify environment variables that are available in the dynamic context.</p></item><item><p>The <code>fn:collection</code> function with one argument takes a string containing a URI. 
    If that URI is associated with a collection in <termref def="dt-available-collections">available node collections</termref>, <code>fn:collection</code> returns the data model representation of that collection; otherwise it raises a <termref def="dt-dynamic-error">dynamic error</termref>.  A collection may be any sequence of nodes. For example, the expression
    <code role="parse-test">fn:collection("http://example.org")//customer</code>
    identifies all the <code>customer</code> elements that are
    descendants of nodes found in the collection whose URI is
    <code>http://example.org</code>.</p></item><item><p>The <code>fn:collection</code> function with zero arguments returns the <termref def="dt-default-collection">default collection</termref>, an <termref def="dt-implementation-dependent">implementation-dependent</termref> sequence of nodes.</p></item><item><p>The <code>fn:uri-collection</code> function returns a sequence of <code>xs:anyURI</code> values representing the URIs in a resource collection.</p></item><item><p>The <code>fn:uri-collection</code> function with zero arguments returns the URIs in the <termref def="dt-default-resource-collection">default resource collection</termref>.</p></item></ulist><p>These input functions are all specified in  <bibref ref="xpath-functions-30"/>, which specifies error conditions and other details not described here.</p></div3><div3 id="id-uri-literals" diff="chg"><head>URI Literals</head><p>XPath 3.0 requires a statically known, valid URI in a <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-BracedURILiteral" xlink:type="simple">BracedURILiteral</nt>. 

      An implementation may raise a <termref def="dt-static-error">static error</termref> 
                  <errorref class="ST" code="0046"/> if the value of  a Braced URI Literal is of nonzero length
      and is <phrase diff="del">not in the lexical space of
      <code>xs:anyURI</code>
                  </phrase>
                  <phrase diff="add">neither an
      absolute URI nor a relative URI</phrase>.</p><note><p>The <code>xs:anyURI</code>
      type is designed to anticipate the introduction of
      Internationalized Resource Identifiers (IRI's) as defined in
      <bibref ref="RFC3987"/>.</p></note><p diff="del">A Braced URI Literal or URI Literal is subjected
      to whitespace normalization as defined for the
      <code>xs:anyURI</code> type in <bibref ref="XMLSchema10"/> or
      <bibref ref="XMLSchema11"/>: this means that leading and
      trailing whitespace is removed, and any other sequence of
      whitespace characters is replaced by a single space (#x20)
      character. </p><p diff="add">Whitespace is normalized using the whitespace normalization rules
      of <code>fn:normalize-space</code>. If the result of whitespace
      normalization contains only whitespace, the corresponding URI
      consists of the empty string.  </p><p>A Braced URI Literal or URI Literal is not <phrase diff="del">automatically</phrase> subjected to percent-encoding
      or decoding as defined in <bibref ref="RFC3986"/>.</p></div3><div3 id="id-resolve-relative-uri" diff="chg"><head>Resolving a Relative URI Reference</head><p>
                  <termdef id="dt-resolve-relative-uri" term="resolve">To
      <term>resolve a relative URI</term> 
                     <code>$rel</code> against a
      base URI <code>$base</code> is to expand it to an absolute URI,
      as if by calling the function <code>fn:resolve-uri($rel,
      $base)</code>.</termdef> During static analysis, the base URI is
      the Static Base URI. During dynamic evaluation, the base URI
      used to resolve a relative URI reference depends on the semantics of the
      expression.</p><p>Any process that attempts to <termref def="dt-resolve-relative-uri">resolve URI</termref> against a
      base URI, or to dereference the URI, may apply percent-encoding
      or decoding as defined in the relevant RFCs.</p></div3></div2><div2 id="id-types"><head>Types</head><p>The type system of XPath 3.0 is based on
		<bibref ref="XMLSchema10"/> or <bibref ref="XMLSchema11"/>.</p><p>
               <termdef id="dt-sequence-type" term="sequence type">A <term>sequence type</term> is a type that can be expressed using the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SequenceType" xlink:type="simple">SequenceType</nt>
syntax. Sequence types are used whenever it is necessary to refer to a type in an XPath 3.0 expression. The term <term>sequence type</term> suggests that this syntax is used to describe the type of an XPath 3.0 value, which is always a sequence.</termdef>
            </p><p>
               <termdef id="dt-schema-type" term="schema type">A <term>schema type</term> is a type that is (or could be) defined using the facilities of <bibref ref="XMLSchema10"/> or <bibref ref="XMLSchema11"/> (including the built-in types of <bibref ref="XMLSchema10"/> or <bibref ref="XMLSchema11"/>).</termdef> A schema type  can be used as a type annotation on an
element or attribute node (unless it is a non-instantiable type such as <code>xs:NOTATION</code> or <code>xs:anyAtomicType</code>, in which case its derived
types can be so used). Every schema type is either a <term>complex type</term> or a
<term>simple type</term>; simple types are further subdivided into <term>list types</term>, <term>union
types</term>, and <term>atomic types</term> (see <bibref ref="XMLSchema10"/> or <bibref ref="XMLSchema11"/> for definitions and explanations of these terms.)</p><p diff="add">
               <termdef id="dt-generalized-atomic-type" term="generalized atomic type">A <term>generalized atomic type</term> is a type which is either (a) an atomic type or (b) a <phrase diff="del"> 
                     <termref def="dt-pure-union-type">pure union type</termref>.</phrase>
                  <phrase diff="add">
                     <termref def="dt-pure-union-type">pure union type</termref>
                  </phrase>
               </termdef>.</p><p diff="add">
               <termdef id="dt-pure-union-type" term="pure union type">A <term>pure union type</term> is an XML Schema union type that satisfies the following constraints:
(1) <code>{variety}</code> is <code>union</code>, (2) the <code>{facets}</code> property is empty, (3) no type in the transitive membership of the union type has <code>{variety}</code> 
                  <code>list</code>, and (4) no type in the transitive membership of the union type is a type with <code>{variety}</code> 
                  <code>union</code> having a non-empty <code>{facets}</code> property</termdef>.</p><note><p diff="add">The definition of <termref def="dt-pure-union-type">pure union type</termref>
excludes union types derived by non-trivial restriction from other
union types, as well as union types that include list types in their
membership. Pure union types have the property that every
instance of an atomic type defined as one of the member types of the
union is also a valid instance of the union type.</p></note><note><p diff="chg">The current (second) edition of XML Schema 1.0 contains an
error in respect of the substitutability of a union type by one of its
members: it fails to recognize that this is unsafe if the union is
derived by restriction from another union.</p><p diff="chg">This problem is fixed in XSD 1.1, but the effect of the resolution
is that an atomic value labeled with an atomic type cannot be treated
as being substitutable for a union type without explicit validation.
This specification therefore allows union types to be used as item
types only if they are defined directly as the union of a number of
atomic types.</p></note><p diff="chg">
               <termref def="dt-generalized-atomic-type">Generalized atomic types</termref>
represent the intersection between the categories of <termref def="dt-sequence-type">sequence type</termref> and <termref def="dt-schema-type">schema type</termref>. A generalized atomic type, such as <code>xs:integer</code> or <code>my:hatsize</code>, is both a <termref def="dt-sequence-type">sequence type</termref> and a
<termref def="dt-schema-type">schema type</termref>.</p><div3 id="id-predefined-types"><head>Predefined Schema Types</head><p role="xpath">The <termref def="dt-is-types">in-scope schema types</termref>
                 in the <termref def="dt-static-context">static
                 context</termref> are initialized with a set of
                 predefined schema types that is determined by the host
                 language. This set may include some or all of the
                 schema types in the
                 namespace
                 <code>http://www.w3.org/2001/XMLSchema</code>,
                 represented in this document by the namespace prefix
                 <code>xs</code>. The schema types in this namespace are defined in <bibref ref="XMLSchema10"/> or <bibref ref="XMLSchema11"/>
                 and augmented by additional types defined in <bibref ref="xpath-datamodel-30"/>. An implementation
                 that has based its type system on <bibref ref="XMLSchema10"/> is not required to support the <code>xs:dateTimeStamp</code> type.</p><p>The schema types defined in  <bibref ref="xpath-datamodel-30"/> are summarized below.</p><olist><item><p>
                        <termdef term="xs:untyped" id="dt-untyped">
                           <code>xs:untyped</code> is  used as the <termref def="dt-type-annotation">type annotation</termref> of an element node that has not been validated, or has been validated in <code>skip</code> mode.</termdef> No predefined schema types are derived from <code>xs:untyped</code>.</p></item><item><p>
                        <termdef id="dt-untypedAtomic" term="xs:untypedAtomic">
                           <code>xs:untypedAtomic</code>
is an atomic type that is used to denote untyped atomic data, such as text that has not been assigned a more specific type.</termdef> An attribute that has been validated in <code>skip</code> mode is represented in the <termref def="dt-datamodel">data model</termref> by an attribute node with the <termref def="dt-type-annotation">type annotation</termref> 
                        <code>xs:untypedAtomic</code>. No predefined schema types are derived from <code>xs:untypedAtomic</code>.</p></item><item><p>
                        <termdef term="xs:dayTimeDuration" id="dt-dayTimeDuration">
                           <code>xs:dayTimeDuration</code> is derived by restriction from <code>xs:duration</code>. The  lexical representation of <code>xs:dayTimeDuration</code>
is restricted to contain only day, hour, minute, and second
components.</termdef>
                     </p></item><item><p>
                        <termdef term="xs:yearMonthDuration" id="dt-yearMonthDuration">
                           <code>xs:yearMonthDuration</code> is derived by restriction from <code>xs:duration</code>. The lexical representation of <code>xs:yearMonthDuration</code> is
restricted to contain only year and month
components.</termdef>
                     </p></item><item><p>
                        <termdef term="xs:anyAtomicType" id="dt-anyAtomicType" diff="chg" at="XQ.E20 and XP.E11">
                           <code>xs:anyAtomicType</code> is an atomic type that includes all atomic values (and no values that
are not atomic). Its base type is
<code>xs:anySimpleType</code> from which all simple types, including atomic,
list, and union types, are derived. All primitive atomic types, such as
<code>xs:decimal</code> and <code>xs:string</code>, have <code>xs:anyAtomicType</code> as their base type.</termdef>
                     </p><note><p>
                           <code>xs:anyAtomicType</code>  will not appear as the type of an actual value in an <termref def="dt-data-model-instance">XDM instance</termref>.</p></note></item><item><p diff="add">
                        <termdef term="xs:error" id="dt-xs-error">
                           <code>xs:error</code> is a simple type with no value space, defined in <bibref ref="XMLSchema11"/>. In implementations that support XML Schema 1.1, it can be used in the <specref ref="id-sequencetype-syntax"/> to raise errors.</termdef>
                     </p></item></olist><p>The relationships among the schema types in the <code>xs</code> namespace are illustrated in Figure 2. A more complete description of the XPath 3.0 type hierarchy can be found in <bibref ref="xpath-functions-30"/>.</p><graphic xmlns:xlink="http://www.w3.org/1999/xlink" source="types.jpg" alt="Type Hierarchy Diagram" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad"/><p>Figure 2: Hierarchy of Schema Types used in XPath 3.0.</p></div3><div3 id="id-namespace-sensitive" diff="add"><head>Namespace-sensitive Types</head><p>
                  <termdef term="namespace-sensitive" id="dt-namespace-sensitive">The <term>namespace-sensitive</term>
  types are <code>xs:QName</code>, <code>xs:NOTATION</code>, types
  derived by restriction from <code>xs:QName</code> or
  <code>xs:NOTATION</code>, list types that have a namespace-sensitive
  item type, and union types with a namespace-sensitive type in their
  transitive membership.</termdef>
               </p><p>It is not possible to preserve the type of a <termref def="dt-namespace-sensitive">namespace-sensitive</termref> value without also preserving the namespace binding that defines the meaning of each namespace prefix used in the value. Therefore, XPath 3.0 defines some error conditions that occur only with <termref def="dt-namespace-sensitive">namespace-sensitive</termref> values. For instance, <phrase diff="add">casting to a <termref def="dt-namespace-sensitive">namespace-sensitive</termref> type raises 
 a <termref def="dt-type-error">type error</termref> 
                     <errorref diff="del" class="TY" code="0117"/> 
                     <phrase diff="add">
                        <code>[err:FONS0004]</code>
                     </phrase>if the namespace bindings for the result cannot be determined.</phrase>
                  <phrase diff="del"> casts to <termref def="dt-namespace-sensitive">namespace-sensitive</termref> types raise an error if the input expression, when evaluated, contains a node (see <specref ref="id-cast"/>).</phrase>
               </p></div3><div3 id="id-typed-value"><head>Typed Value and String Value</head><p>Every node has a <term>typed value</term> and a <term>string value</term>
                  <phrase diff="add">, except for nodes whose value is <xtermref spec="DM30" ref="dt-absent"/>.</phrase>

                  <termdef term="typed value" id="dt-typed-value">The <term>typed value</term> of a node is a sequence of atomic values
and can be extracted by applying the <code>fn:data</code> function to
the node.</termdef>  
                  <termdef id="dt-string-value" term="string value">The <term>string
 value</term> of a node is a string and
 can be extracted by applying the <code>fn:string</code>
 function to the node.</termdef>
Definitions of <code>fn:data</code> and <code>fn:string</code> can be found in <bibref ref="xpath-functions-30"/>.</p><p>An implementation may store both the <termref def="dt-typed-value">typed value</termref> and the <termref def="dt-string-value">string value</termref> of a node, or it may store only one of these and derive the other as needed. The string value of a node must be a valid lexical representation of the typed value of the node, but the node is not required to preserve the string representation from the original source document. For example, if the typed value of a node is the <code>xs:integer</code> value <code>30</code>, its string value might be "<code>30</code>" or "<code>0030</code>".</p><p role="xpath">The <termref def="dt-typed-value">typed value</termref>, <termref def="dt-string-value">string value</termref>, and <termref def="dt-type-annotation">type annotation</termref> of a node are closely related.  If the node was created by mapping from an Infoset or PSVI, the relationships among these properties are defined by rules in <bibref ref="xpath-datamodel-30"/>.</p><p>As a convenience to the reader, the relationship between <termref def="dt-typed-value">typed value</termref> and
 <termref def="dt-string-value">string value</termref> for various kinds of nodes is summarized and illustrated
 by examples below.</p><olist><item><p>For text and document nodes, the typed value of the node is the same as its
string value, as an instance of  the type <code>xs:untypedAtomic</code>. The
string value of a document node is formed by concatenating the string
values of all its descendant text nodes, in <termref def="dt-document-order">document
order</termref>.</p></item><item><p>The typed value of a comment<phrase role="xpath">, namespace,</phrase> or processing instruction node is the same as its string value. It is an instance of the type <code>xs:string</code>.</p></item><item><p>The typed value of an attribute node with
the <termref def="dt-type-annotation">type annotation</termref> 
                        <code>xs:anySimpleType</code> or <code>xs:untypedAtomic</code> is the same as its
string value, as an instance of <code>xs:untypedAtomic</code>. The
typed value of an attribute node with any other type annotation is
derived from its string value and type annotation using the lexical-to-value-space mapping defined in <bibref ref="XMLSchema10"/> or <bibref ref="XMLSchema11"/> Part 2 for
the relevant type.</p><p>Example: A1 is an attribute
having string value <code>"3.14E-2"</code> and type annotation
<code>xs:double</code>.  The typed value of A1 is the
<code>xs:double</code> value whose lexical representation is
<code>3.14E-2</code>. </p><p>Example: A2 is an attribute with type
annotation <code>xs:IDREFS</code>, which is a list datatype whose item type is the atomic datatype <code>xs:IDREF</code>. Its string value is
"<code>bar baz faz</code>". The typed value of A2 is a sequence of
three atomic values ("<code>bar</code>", "<code>baz</code>",
"<code>faz</code>"), each of type <code>xs:IDREF</code>. The typed
value of a node is never treated as an instance of a named list
type. Instead, if the type annotation of a node is a list type (such
as <code>xs:IDREFS</code>), its typed value is treated as a sequence
of the <termref def="dt-generalized-atomic-type">generalized atomic type</termref> from which it is derived (such as
<code>xs:IDREF</code>).</p></item><item><p>For an element node, the
relationship between typed value and string value depends on the
node's <termref def="dt-type-annotation">type annotation</termref>, as follows:</p><olist><item><p>If the type annotation is <code>xs:untyped</code> or <code>xs:anySimpleType</code> or
denotes a complex type with mixed content (including <code>xs:anyType</code>), then the typed value of the
node is equal to its string value, as an instance of
<code>xs:untypedAtomic</code>.  However, if the <code>nilled</code>
property of the node is <code>true</code>, then its typed value is the empty sequence.</p><p>Example: E1 is an element node
having type annotation <code>xs:untyped</code> and string value
"<code>1999-05-31</code>". The typed value of E1 is
"<code>1999-05-31</code>", as an instance of
<code>xs:untypedAtomic</code>.</p><p>Example: E2 is an element node
with the type annotation <code>formula</code>, which is a complex type
with mixed content. The content of E2 consists of the character
"<code>H</code>", a child element named <code>subscript</code> with
string value "<code>2</code>", and the character "<code>O</code>". The
typed value of E2 is "<code>H2O</code>" as an instance of
<code>xs:untypedAtomic</code>.</p></item><item><p>If the type
annotation denotes a simple type or a complex type with simple
content, then the typed value of the node is derived from its string
value and its type annotation in a way that is consistent with schema
validation. However, if the <code>nilled</code>
property of the node is <code>true</code>, then its typed value is the empty sequence.</p><p>Example: E3 is an element node with the type
annotation <code>cost</code>, which is a complex type that has several
attributes and a simple content type of <code>xs:decimal</code>. The
string value of E3 is "<code>74.95</code>". The typed value of E3 is
<code>74.95</code>, as an instance of
<code>xs:decimal</code>.</p><p>Example: E4 is an element node with the
type annotation <code>hatsizelist</code>, which is a simple type
derived from the atomic type <code>hatsize</code>, which in turn is
derived from <code>xs:integer</code>. The string value of E4 is
"<code>7 8 9</code>". The typed value of E4 is a sequence of three
values (<code>7</code>, <code>8</code>, <code>9</code>), each of type
<code>hatsize</code>.</p><p>Example: E5 is an element node with the type annotation <code>my:integer-or-string</code> which is a union type with member types <code>xs:integer</code> and <code>xs:string</code>. The string value of E5 is "<code>47</code>". The typed value of E5 is <code>47</code> as an <code>xs:integer</code>, since <code>xs:integer</code> is the member type that validated the content of E5. In general, when the type annotation of a node is a union type, the typed value of the node will be an instance of one of the member types of the union.</p><note><p>If an implementation stores only the string value of a node, and the type annotation of the node is a union type, the implementation must be able to deliver the typed value of the node as an instance of the appropriate member type.</p></note></item><item><p>If the type annotation
denotes a complex type with empty content, then the typed value of the
node is the empty sequence and its string value is the zero-length string.</p></item><item><p>If the type annotation
denotes a complex type with element-only content, then the typed value
of the node is <phrase diff="del">undefined</phrase>
                              <xtermref spec="DM30" ref="dt-absent" diff="add"/>. The <code>fn:data</code> function raises a
<termref def="dt-type-error">type error</termref> 
                              <code>[err:FOTY0012]</code> when applied to such a node. The string value of such a node is equal to the concatenated string values of all its text node descendants, in document order.</p><p>Example: E6 is an
element node with the type annotation <code>weather</code>, which is a
complex type whose content type specifies
<code>element-only</code>. E6 has two child elements named
<code>temperature</code> and <code>precipitation</code>. The typed
value of E6 is <phrase diff="del">undefined</phrase>
                              <xtermref spec="DM30" ref="dt-absent" diff="add"/>, and the <code>fn:data</code> function
applied to E6 raises an error.
</p></item></olist></item></olist></div3><div3 id="id-sequencetype-syntax"><head>SequenceType Syntax</head><p>Whenever it is necessary to refer to a type in an XPath 3.0 expression, the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SequenceType" xlink:type="simple">SequenceType</nt> syntax is used.</p><scrap headstyle="show"><head/><prod num="67" id="doc-xpath30-SequenceType"><lhs>SequenceType</lhs><rhs>("empty-sequence"  "("  ")")<br/>|  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ItemType" xlink:type="simple">ItemType</nt>  
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-OccurrenceIndicator" xlink:type="simple">OccurrenceIndicator</nt>?)</rhs></prod><prod num="69" id="doc-xpath30-ItemType"><lhs>ItemType</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-KindTest" xlink:type="simple">KindTest</nt>  |  ("item"  "("  ")")  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-FunctionTest" xlink:type="simple">FunctionTest</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AtomicOrUnionType" xlink:type="simple">AtomicOrUnionType</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ParenthesizedItemType" xlink:type="simple">ParenthesizedItemType</nt>
                     </rhs></prod><prod num="68" id="doc-xpath30-OccurrenceIndicator"><lhs>OccurrenceIndicator</lhs><rhs>"?"  |  "*"  |  "+"</rhs></prod><prod num="70" id="doc-xpath30-AtomicOrUnionType"><lhs>AtomicOrUnionType</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EQName" xlink:type="simple">EQName</nt>
                     </rhs></prod><prod num="71" id="doc-xpath30-KindTest"><lhs>KindTest</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-DocumentTest" xlink:type="simple">DocumentTest</nt>
                        <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementTest" xlink:type="simple">ElementTest</nt>
                        <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeTest" xlink:type="simple">AttributeTest</nt>
                        <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SchemaElementTest" xlink:type="simple">SchemaElementTest</nt>
                        <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SchemaAttributeTest" xlink:type="simple">SchemaAttributeTest</nt>
                        <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-PITest" xlink:type="simple">PITest</nt>
                        <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-CommentTest" xlink:type="simple">CommentTest</nt>
                        <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TextTest" xlink:type="simple">TextTest</nt>
                        <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-NamespaceNodeTest" xlink:type="simple">NamespaceNodeTest</nt>
                        <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AnyKindTest" xlink:type="simple">AnyKindTest</nt>
                     </rhs></prod><prod num="73" id="doc-xpath30-DocumentTest"><lhs>DocumentTest</lhs><rhs>"document-node"  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementTest" xlink:type="simple">ElementTest</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SchemaElementTest" xlink:type="simple">SchemaElementTest</nt>)?  ")"</rhs></prod><prod num="82" id="noid_d3e4817.doc-xpath30-ElementTest"><lhs>ElementTest</lhs><rhs>"element"  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementNameOrWildcard" xlink:type="simple">ElementNameOrWildcard</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypeName" xlink:type="simple">TypeName</nt>  "?"?)?)?  ")"</rhs></prod><prod num="84" id="noid_d3e4818.doc-xpath30-SchemaElementTest"><lhs>SchemaElementTest</lhs><rhs>"schema-element"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementDeclaration" xlink:type="simple">ElementDeclaration</nt>  ")"</rhs></prod><prod num="85" id="noid_d3e4819.doc-xpath30-ElementDeclaration"><lhs>ElementDeclaration</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementName" xlink:type="simple">ElementName</nt>
                     </rhs></prod><prod num="78" id="noid_d3e4820.doc-xpath30-AttributeTest"><lhs>AttributeTest</lhs><rhs>"attribute"  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttribNameOrWildcard" xlink:type="simple">AttribNameOrWildcard</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypeName" xlink:type="simple">TypeName</nt>)?)?  ")"</rhs></prod><prod num="80" id="noid_d3e4822.doc-xpath30-SchemaAttributeTest"><lhs>SchemaAttributeTest</lhs><rhs>"schema-attribute"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeDeclaration" xlink:type="simple">AttributeDeclaration</nt>  ")"</rhs></prod><prod num="81" id="noid_d3e4823.doc-xpath30-AttributeDeclaration"><lhs>AttributeDeclaration</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeName" xlink:type="simple">AttributeName</nt>
                     </rhs></prod><prod num="83" id="noid_d3e4824.doc-xpath30-ElementNameOrWildcard"><lhs>ElementNameOrWildcard</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementName" xlink:type="simple">ElementName</nt>  |  "*"</rhs></prod><prod num="87" id="doc-xpath30-ElementName"><lhs>ElementName</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EQName" xlink:type="simple">EQName</nt>
                     </rhs></prod><prod num="79" id="noid_d3e4826.doc-xpath30-AttribNameOrWildcard"><lhs>AttribNameOrWildcard</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeName" xlink:type="simple">AttributeName</nt>  |  "*"</rhs></prod><prod num="86" id="doc-xpath30-AttributeName"><lhs>AttributeName</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EQName" xlink:type="simple">EQName</nt>
                     </rhs></prod><prod num="89" id="doc-xpath30-TypeName"><lhs>TypeName</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EQName" xlink:type="simple">EQName</nt>
                     </rhs></prod><prod num="77" id="doc-xpath30-PITest"><lhs>PITest</lhs><rhs>"processing-instruction"  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-NCName" xlink:type="simple">NCName</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-StringLiteral" xlink:type="simple">StringLiteral</nt>)?  ")"</rhs></prod><prod num="75" id="doc-xpath30-CommentTest"><lhs>CommentTest</lhs><rhs>"comment"  "("  ")"</rhs></prod><prod num="76" id="doc-xpath30-NamespaceNodeTest"><lhs>NamespaceNodeTest</lhs><rhs>"namespace-node"  "("  ")"</rhs></prod><prod num="74" id="doc-xpath30-TextTest"><lhs>TextTest</lhs><rhs>"text"  "("  ")"</rhs></prod><prod num="72" id="doc-xpath30-AnyKindTest"><lhs>AnyKindTest</lhs><rhs>"node"  "("  ")"</rhs></prod><prod num="90" id="noid_d3e4835.doc-xpath30-FunctionTest"><lhs>FunctionTest</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AnyFunctionTest" xlink:type="simple">AnyFunctionTest</nt>
                        <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypedFunctionTest" xlink:type="simple">TypedFunctionTest</nt>
                     </rhs></prod><prod num="91" id="noid_d3e4836.doc-xpath30-AnyFunctionTest"><lhs>AnyFunctionTest</lhs><rhs>"function"  "("  "*"  ")"</rhs></prod><prod num="92" id="noid_d3e4837.doc-xpath30-TypedFunctionTest"><lhs>TypedFunctionTest</lhs><rhs>"function"  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SequenceType" xlink:type="simple">SequenceType</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SequenceType" xlink:type="simple">SequenceType</nt>)*)?  ")"  "as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SequenceType" xlink:type="simple">SequenceType</nt>
                     </rhs></prod><prod num="93" id="doc-xpath30-ParenthesizedItemType"><lhs>ParenthesizedItemType</lhs><rhs>"("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ItemType" xlink:type="simple">ItemType</nt>  ")"</rhs></prod></scrap><p>With the exception of the special type
<code>empty-sequence()</code>, a <termref def="dt-sequence-type">sequence type</termref> consists of an
<term>item type</term> that constrains the type of each item in the
sequence, and a <term>cardinality</term> that constrains the number of
items in the sequence. Apart from the item type <code>item()</code>,
which permits any kind of item, item types divide into <term>node
types</term> (such as <code>element()</code>), <term>generalized atomic
types</term> (such as <code>xs:integer</code>) and function types
(such as function() as item()*).</p><p>
                  <termref def="dt-qname">Lexical QNames</termref> appearing in a <termref def="dt-sequence-type">sequence type</termref> have their
		  prefixes expanded to namespace URIs by means of the
		  <termref def="dt-static-namespaces">statically known namespaces</termref> and (where applicable) the
		  <termref def="dt-def-elemtype-ns">default element/type namespace</termref> 
                  <phrase diff="del">or
		  <termref def="dt-def-fn-ns">default function namespace</termref>
                  </phrase>.
      Equality of QNames is defined by the <code>eq</code> operator.</p><p>Item types representing element
and attribute nodes may specify the required <termref def="dt-type-annotation">type annotations</termref> of those nodes, in
the form of a <termref def="dt-schema-type">schema
type</termref>. Thus the item type <code>element(*, us:address)</code>
denotes any element node whose type annotation is (or is derived from)
the schema type named <code>us:address</code>.</p><p diff="chg">The occurrence indicators '+', '*', and '?' bind to the last <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ItemType" xlink:type="simple">ItemType</nt> in the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SequenceType" xlink:type="simple">SequenceType</nt>, as described in <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#parse-note-occurrence-indicators" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">occurrence-indicators</loc> constraint.</p><p>Here are some examples of <termref def="dt-sequence-type">sequence types</termref> that
		  might be used in XPath 3.0:</p><ulist><item><p> 
                        <code>xs:date</code> refers to the built-in atomic schema type named <code>xs:date</code>
                     </p></item><item><p> 
                        <code>attribute()?</code> refers to an optional attribute node</p></item><item><p> 
                        <code>element()</code> refers to any element node</p></item><item><p> 
                        <code>element(po:shipto, po:address)</code> refers to an element node that has the name <code>po:shipto</code> and has the type annotation <code>po:address</code> (or a schema type derived from <code>po:address</code>)</p></item><item><p> 
                        <code>element(*, po:address)</code> refers to an element node of any name that has the type annotation <code>po:address</code> (or a type derived from <code>po:address</code>)</p></item><item><p>
                        <code>element(customer)</code> refers to an element node named <code>customer</code> with any type annotation</p></item><item><p>
                        <code>schema-element(customer)</code> refers to an element node whose name is <code>customer</code> (or is in the substitution group headed by <code>customer</code>) and whose type annotation matches the schema type declared for a <code>customer</code> element in the <termref def="dt-is-elems">in-scope element declarations</termref>
                     </p></item><item><p> 
                        <code>node()*</code> refers to a sequence of zero or more nodes of any kind</p></item><item><p> 
                        <code>item()+</code> refers to a sequence of one or more <termref def="dt-item">items</termref>
                     </p></item><item><p> 
                        <code>function(*)</code> refers to any <xtermref diff="chg" spec="DM30" ref="dt-function-item">function</xtermref>, regardless of arity or type</p></item><item><p> 
                        <code>function(node()) as xs:string*</code> refers to a <xtermref diff="chg" spec="DM30" ref="dt-function-item">function</xtermref> that takes a single argument whose value is a single node,
        and returns a sequence of zero or more xs:string values</p></item><item><p> 
                        <code>(function(node()) as xs:string)*</code> refers to a sequence of zero or more <xtermref diff="chg" spec="DM30" ref="dt-function-item">functions</xtermref>, each of which takes a single
        argument whose value is a single node, and returns as its result a single xs:string value</p></item></ulist></div3><div3 id="id-sequencetype-matching"><head>SequenceType Matching</head><p> 
                  <termdef id="dt-sequencetype-matching" term="SequenceType matching" diff="chg">
                     <term>SequenceType matching</term> compares the <termref def="dt-dynamic-type">dynamic type</termref> of a value
with an expected <termref def="dt-sequence-type">sequence type</termref>.<phrase diff="del">During evaluation of an expression, it is sometimes necessary to determine whether a value with a known <termref def="dt-dynamic-type">dynamic type</termref> "matches" an expected  <termref def="dt-sequence-type">sequence type</termref>. This process is known as <term>SequenceType matching</term>.</phrase>
                  </termdef> For example, an <code>instance of</code> expression returns <code>true</code> if the <termref def="dt-dynamic-type">dynamic type</termref> of a given value matches a given <termref def="dt-sequence-type">sequence type</termref>, or <code>false</code> if it does not.</p><p diff="add">An XPath 3.0 implementation must be able to determine relationships among the types in type annotations in an <termref def="dt-data-model-instance">XDM instance</termref> and the types in the  <termref def="dt-issd">in-scope schema definitions</termref> (ISSD). </p><p diff="del">Some of the rules for <termref def="dt-sequencetype-matching">SequenceType matching</termref> require
determining whether a given schema type encountered as a type
annotation in an instance document is the same as or derived from an
expected schema type. This determination is done by reference to a
schema <emph>S</emph> (that is, a set of schema components). This
schema <emph>S</emph> is the union of:</p><olist diff="del"><item><p>the in-scope schema definitions in the static context .</p></item><item><p>potentially, the schema used for validating the instance
document; whether a processor adds this schema to <emph>S</emph> is
<termref def="dt-implementation-defined">implementation-defined</termref>.</p></item><item><p>potentially, further schema components that have been made
available to the processor in an <termref def="dt-implementation-defined">implementation-defined</termref>
way.</p></item></olist><p diff="del">A type error <errorref class="TY" code="0004"/> may be raised if
this union does not constitute a valid schema (for example, if there
are conflicts between types present in the static context and types
used dynamically for validating instances.)</p><p diff="del">
Whether the schema used to validate the instance document is in
<emph>S</emph> is implementation-defined. Whether the implementation
provides further schema components in <emph>S</emph> is also
implementation-defined.</p><p>
                  <termdef term="subtype substitution" id="dt-subtype-substitution">The use of a value whose <termref def="dt-dynamic-type">dynamic type</termref> is derived from an
expected type is known as <term>subtype substitution</term>.</termdef>
Subtype substitution does not change the actual type of a value. For
example, if an <code>xs:integer</code> value is used where an
<code>xs:decimal</code> value is expected, the value retains its type
as <code>xs:integer</code>.</p><p>The definition of <termref def="dt-sequencetype-matching">SequenceType matching</termref> relies
on a pseudo-function named <code>derives-from(</code>
                  <emph>AT</emph>,
<emph>ET</emph>
                  <code>)</code>, which takes an actual simple or complex
schema type <emph>AT</emph> and an expected simple or complex schema
type <emph>ET</emph>, and either returns a boolean value or raises a
<termref def="dt-type-error">type error</termref> 
                  <errorref class="TY" code="0004"/>.  <phrase diff="add">This function is defined as follows:</phrase>
               </p><ulist diff="add"><item><p>
                        <code>derives-from(</code>
                        <emph>AT</emph>, <emph>ET</emph>
                        <code>)</code> raises a type error <errorref class="TY" code="0004"/> if <phrase diff="del">either <emph>AT</emph> or</phrase> 
                        <emph>ET</emph> is
not present in <emph diff="del">S</emph>
                        <phrase diff="add">the <termref def="dt-issd">in-scope schema definitions</termref> (ISSD).</phrase>
                     </p></item><item><p>
                        <code>derives-from(</code>
                        <emph>AT</emph>,
<emph>ET</emph>
                        <code>)</code> returns <code>true</code>  
                        <phrase diff="del">if <emph>AT</emph> is derived from <emph>ET</emph> by restriction or extension, or if <emph>ET</emph> is a union type of which <emph>AT</emph> is a member type.</phrase>
                        <phrase diff="add">if any of the following conditions applies:</phrase>
                        <ulist diff="add"><item><p>
                                 <emph>AT</emph> is <emph>ET</emph>
                              </p></item><item><p>
                                 <emph>ET</emph> is the base type of <emph>AT</emph>
                              </p></item><item><p>
                                 <emph>ET</emph> is a pure union type of which <emph>AT</emph> is a member type</p></item><item><p>There is a type <emph>MT</emph> such that <code>derives-from(</code>
                                 <emph>AT</emph>, <emph>MT</emph>
                                 <code>)</code> 
and <code>derives-from(</code>
                                 <emph>MT</emph>, <emph>ET</emph>
                                 <code>)</code>
                              </p></item></ulist>
                     </p><p diff="del">Formally, it returns <code>true</code> if <phrase diff="del">
                           <emph>AT</emph> and <emph>ET</emph>
are both present in <emph>S</emph> and</phrase>
                        <emph>AT</emph> is validly
derived from <emph>ET</emph> given the empty set, as defined in
<bibref ref="XMLSchema10"/> or <bibref ref="XMLSchema11"/> Part 1 constraints Type Derivation OK
(Complex) (if <emph>AT</emph> is a complex type), or Type
Derivation OK (Simple) (if <emph>AT</emph> is a simple
type). The phrase "given the empty set" is used because the rules in
the XML Schema specification are parameterized: the parameter is a
list of the kinds of derivation that are not allowed, and in this case
the list is always empty.</p></item><item><p>Otherwise, <code>derives-from(</code>
                        <emph>AT</emph>, <emph>ET</emph>
                        <code>)</code> returns <code>false</code>
                     </p></item></ulist><p>The rules for <termref def="dt-sequencetype-matching">SequenceType
matching</termref> are given below, with examples (the examples are
for purposes of illustration, and do not cover all possible
cases).</p><div4 id="id-matching-value"><head>Matching a SequenceType and a Value</head><ulist><item><p>The <termref def="dt-sequence-type">sequence type</termref> 
                           <code>empty-sequence()</code> matches a value that is the empty sequence.</p></item><item><p>An <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ItemType" xlink:type="simple">ItemType</nt> with no <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-OccurrenceIndicator" xlink:type="simple">OccurrenceIndicator</nt> matches any value that contains exactly one item if the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ItemType" xlink:type="simple">ItemType</nt> matches that item (see <specref ref="id-matching-item"/>).</p></item><item><p>An <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ItemType" xlink:type="simple">ItemType</nt> with an <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-OccurrenceIndicator" xlink:type="simple">OccurrenceIndicator</nt> matches a value if the number of items in the value matches the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-OccurrenceIndicator" xlink:type="simple">OccurrenceIndicator</nt> and the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ItemType" xlink:type="simple">ItemType</nt> matches each of the items in the value.</p></item></ulist><p>An <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-OccurrenceIndicator" xlink:type="simple">OccurrenceIndicator</nt> specifies the number of items in
		  a sequence, as follows:</p><ulist><item><p> 
                           <code>?</code> matches zero or one items</p></item><item><p> 
                           <code>*</code> matches zero or more items</p></item><item><p> 
                           <code>+</code> matches one or more items</p></item></ulist><p>As a consequence of these rules, any <termref def="dt-sequence-type">sequence type</termref> whose
<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-OccurrenceIndicator" xlink:type="simple">OccurrenceIndicator</nt> is <code>*</code> or <code>?</code> matches a
value that is an empty sequence.</p></div4><div4 id="id-matching-item"><head>Matching an ItemType and an
Item</head><ulist><item><p>An <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ItemType" xlink:type="simple">ItemType</nt> consisting simply of an
EQName is interpreted as an <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AtomicOrUnionType" xlink:type="simple">AtomicOrUnionType</nt>.

The expected type <emph>AtomicOrUnionType</emph> matches an atomic value whose
actual type is <emph>AT</emph> if <code>derives-from(</code>
                           <emph>AT,
AtomicOrUnionType</emph>
                           <code>)</code> is <code>true</code>.</p><note diff="del"><p>
                              <code>derives-from()</code> is defined for both union types and atomic types.</p></note><p>
  The name of an <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AtomicOrUnionType" xlink:type="simple">AtomicOrUnionType</nt>
  has its prefix expanded to a namespace URI by means of the
  <termref def="dt-static-namespaces">statically known namespaces</termref>, or if unprefixed, the
  <termref def="dt-def-elemtype-ns">default element/type namespace</termref>.
If the <termref def="dt-expanded-qname">expanded QName</termref> of an
<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AtomicOrUnionType" xlink:type="simple">AtomicOrUnionType</nt> is not defined as a  <termref def="dt-generalized-atomic-type">generalized atomic type</termref> in the <termref def="dt-is-types">in-scope schema
types</termref>, a <termref def="dt-static-error">static
error</termref> is raised <errorref class="ST" code="0051"/>.</p><p>Example: The <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ItemType" xlink:type="simple">ItemType</nt>
                           <code>xs:decimal</code> matches any value of type
<code>xs:decimal</code>.  It also matches any value of type
<code>shoesize</code>, if <code>shoesize</code> is an atomic type
derived by restriction from <code>xs:decimal</code>.</p><p>Example: Suppose <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ItemType" xlink:type="simple">ItemType</nt> 
                           <code>dress-size</code> is a union type that allows
either <code>xs:decimal</code> values for numeric sizes (e.g. 4, 6, 10, 12),
or one of an enumerated set of <code>xs:strings</code> (e.g. "small", "medium", "large"). The <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ItemType" xlink:type="simple">ItemType</nt> 
                           <code>dress-size</code> matches any of these values.</p><note><p diff="chg">The names of non-atomic
types such as <code>xs:IDREFS</code> are not accepted in this context,
but can often be replaced by a <termref def="dt-generalized-atomic-type">generalized atomic type</termref> with an occurrence indicator, such as
<code>xs:IDREF+</code>.</p></note></item><item><p>
                           <code>item()</code> matches
any single <termref def="dt-item">item</termref>.</p><p>Example: <code>item()</code> matches the atomic
value <code>1</code>, the element <code>&lt;a/&gt;</code>, or the function<phrase diff="del"> item</phrase> 
                           <code>fn:concat#3</code>.</p></item><item><p>
                           <code>node()</code>
matches any node.</p></item><item><p>
                           <code>text()</code> matches any
text node.</p></item><item><p>
                           <code>processing-instruction()</code>
matches any processing-instruction
node.</p></item><item><p diff="chg" at="XQ.E27 and XP.E19">
                           <code>processing-instruction(</code>
                           <emph>N</emph>
                           <code>)</code>
matches any processing-instruction node whose PITarget is equal to <code role="parse-test">fn:normalize-space(N)</code>. If <code>fn:normalize-space(N)</code> is not in the lexical space of NCName, a type error is raised <errorref class="TY" code="0004"/>
                        </p><p>Example:
<code role="parse-test">processing-instruction(xml-stylesheet)</code> matches any
processing instruction whose PITarget is
<code>xml-stylesheet</code>.</p><p>For backward compatibility with
                                XPath 1.0, the PITarget of a
                                processing instruction may also be expressed as a
                                string literal, as in this example:
				<code role="parse-test">processing-instruction("xml-stylesheet")</code>.</p><p>If the specified PITarget is not a syntactically valid NCName, a type error is raised <errorref class="TY" code="0004"/>.</p></item><item><p>
                           <code role="parse-test">comment()</code> matches any comment node.</p></item><item><p>
                           <code role="parse-test">namespace-node()</code> matches any
		  namespace node.</p></item><item><p>
                           <code role="parse-test">document-node()</code> matches any document
node.</p></item><item><p>
                           <code>document-node(</code>
                           <emph>E</emph>
                           <code>)</code>
matches any document node that contains exactly one element node, optionally accompanied by one or more comment and processing instruction nodes, if
<emph>E</emph> is an <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementTest" xlink:type="simple">ElementTest</nt> or <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SchemaElementTest" xlink:type="simple">SchemaElementTest</nt> that matches the element node (see
<specref ref="id-element-test"/> and <specref ref="id-schema-element-test"/>).</p><p>Example:
<code role="parse-test">document-node(element(book))</code> matches a document node
containing
exactly one element node that is matched by the ElementTest
<code role="parse-test">element(book)</code>.</p></item><item><p>A <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ParenthesizedItemType" xlink:type="simple">ParenthesizedItemType</nt> matches an item if and only if the
  item matches the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ItemType" xlink:type="simple">ItemType</nt> that is in parentheses.</p></item><item><p>An <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ItemType" xlink:type="simple">ItemType</nt> that is an
  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementTest" xlink:type="simple">ElementTest</nt>, <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SchemaElementTest" xlink:type="simple">SchemaElementTest</nt>, <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeTest" xlink:type="simple">AttributeTest</nt>,
  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SchemaAttributeTest" xlink:type="simple">SchemaAttributeTest</nt>, or <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-FunctionTest" xlink:type="simple">FunctionTest</nt> matches an item as described in the following sections.
  </p></item></ulist></div4><div4 id="id-element-test"><head>Element Test</head><scrap headstyle="show"><head/><prod num="82" id="doc-xpath30-ElementTest"><lhs>ElementTest</lhs><rhs>"element"  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementNameOrWildcard" xlink:type="simple">ElementNameOrWildcard</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypeName" xlink:type="simple">TypeName</nt>  "?"?)?)?  ")"</rhs></prod><prod num="83" id="doc-xpath30-ElementNameOrWildcard"><lhs>ElementNameOrWildcard</lhs><rhs>
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementName" xlink:type="simple">ElementName</nt>  |  "*"</rhs></prod><prod num="87" id="noid_d3e5755.doc-xpath30-ElementName"><lhs>ElementName</lhs><rhs>
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EQName" xlink:type="simple">EQName</nt>
                        </rhs></prod><prod num="89" id="noid_d3e5756.doc-xpath30-TypeName"><lhs>TypeName</lhs><rhs>
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EQName" xlink:type="simple">EQName</nt>
                        </rhs></prod></scrap><p>
    An <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementTest" xlink:type="simple">ElementTest</nt> is used to match an
    element node by its name and/or <termref def="dt-type-annotation">type annotation</termref>.
  </p><p>
    The <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementName" xlink:type="simple">ElementName</nt> and <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypeName" xlink:type="simple">TypeName</nt> of an <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementTest" xlink:type="simple">ElementTest</nt>
    have their prefixes expanded to namespace URIs by means of the
    <termref def="dt-static-namespaces">statically known namespaces</termref>, or if unprefixed, the
    <termref def="dt-def-elemtype-ns">default element/type namespace</termref>.

    The <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementName" xlink:type="simple">ElementName</nt> need not be
    present in the <termref def="dt-is-elems">in-scope element declarations</termref>, but the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypeName" xlink:type="simple">TypeName</nt> must be present in the
    <termref def="dt-is-types">in-scope schema types</termref> 
                     <errorref class="ST" code="0008"/>. Note that
    <termref def="dt-substitution-group">substitution groups</termref> do not affect the semantics of <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementTest" xlink:type="simple">ElementTest</nt>.
  </p><p>
    An <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementTest" xlink:type="simple">ElementTest</nt> may take any of the following forms:
  </p><olist><item><p>
                           <code role="parse-test">element()</code> and

<code role="parse-test">element(*)</code>  match any
single element node, regardless of its name or
type annotation.</p></item><item><p>
                           <code>element(</code>
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementName" xlink:type="simple">ElementName</nt>
                           <code>)</code>
matches any element node whose name is <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementName" xlink:type="simple">ElementName</nt>, regardless of its type annotation or <code>nilled</code> property.</p><p>Example: <code role="parse-test">element(person)</code> matches any element node whose name is <code>person</code>.</p></item><item><p>
                           <code>element(</code>
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementName" xlink:type="simple">ElementName</nt>
                           <code>,</code> 
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypeName" xlink:type="simple">TypeName</nt>
                           <code>)</code>
matches an element node whose name is <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementName" xlink:type="simple">ElementName</nt> if <code>derives-from(</code>
                           <emph>AT</emph>, <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypeName" xlink:type="simple">TypeName</nt> 
                           <code>)</code> is <code>true</code>, where <emph>AT</emph> is the type annotation of the element node, and the <code>nilled</code> property of the node is <code>false</code>.</p><p>Example: <code role="parse-test">element(person, surgeon)</code> matches a
non-nilled element node whose name is <code>person</code> and whose
type annotation is <code>surgeon</code> (or is derived from <code>surgeon</code>). </p></item><item><p>
                           <code>element(</code>
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementName" xlink:type="simple">ElementName</nt>, <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypeName" xlink:type="simple">TypeName</nt>
                           <code> ?)</code>
matches an element node whose name is <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementName" xlink:type="simple">ElementName</nt> if <code>derives-from(</code>
                           <emph>AT</emph>, <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypeName" xlink:type="simple">TypeName</nt>
                           <code>)</code> is <code>true</code>, where <emph>AT</emph> is the type annotation of the element node. The <code>nilled</code> property of the node may be either <code>true</code> or  <code>false</code>.</p><p>Example: <code role="parse-test">element(person, surgeon?)</code> matches a nilled or non-nilled element node whose name is <code>person</code> and whose type
annotation is <code>surgeon</code> (or is derived from <code>surgeon</code>).</p></item><item><p>
                           <code>element(*,
</code>
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypeName" xlink:type="simple">TypeName</nt>
                           <code>)</code> matches an element
node regardless of its name, if
<code>derives-from(</code>
                           <emph>AT</emph>, <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypeName" xlink:type="simple">TypeName</nt> 
                           <code>)</code> is
<code>true</code>, where <emph>AT</emph> is the type annotation of the element node, and the <code>nilled</code> property of the node is <code>false</code>.</p><p>Example: <code role="parse-test">element(*, surgeon)</code>
matches any non-nilled element node whose type annotation is
<code>surgeon</code> (or is derived from <code>surgeon</code>), regardless of its name.</p></item><item><p>
                           <code>element(*,
</code>
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypeName" xlink:type="simple">TypeName</nt>
                           <code> ?)</code> matches an element
node regardless of its name, if
<code>derives-from(</code>
                           <emph>AT</emph>, <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypeName" xlink:type="simple">TypeName</nt> 
                           <code>)</code> is
<code>true</code>, where <emph>AT</emph> is the type annotation of the element node. The <code>nilled</code> property of the node may be either <code>true</code> or  <code>false</code>.</p><p>Example: <code role="parse-test">element(*, surgeon?)</code>
matches any nilled or non-nilled element node whose type annotation is
<code>surgeon</code> (or is derived from <code>surgeon</code>), regardless of its name.</p></item></olist></div4><div4 id="id-schema-element-test"><head>Schema Element Test</head><scrap headstyle="show"><head/><prod num="84" id="doc-xpath30-SchemaElementTest"><lhs>SchemaElementTest</lhs><rhs>"schema-element"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementDeclaration" xlink:type="simple">ElementDeclaration</nt>  ")"</rhs></prod><prod num="85" id="doc-xpath30-ElementDeclaration"><lhs>ElementDeclaration</lhs><rhs>
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementName" xlink:type="simple">ElementName</nt>
                        </rhs></prod><prod num="87" id="noid_d3e6074.doc-xpath30-ElementName"><lhs>ElementName</lhs><rhs>
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EQName" xlink:type="simple">EQName</nt>
                        </rhs></prod></scrap><p>
    A <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SchemaElementTest" xlink:type="simple">SchemaElementTest</nt> matches an element node against a corresponding
    element declaration found in the <termref def="dt-is-elems">in-scope element declarations</termref>.
  </p><p>
    The <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementName" xlink:type="simple">ElementName</nt> of a <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SchemaElementTest" xlink:type="simple">SchemaElementTest</nt>
    has its prefixes expanded to a namespace URI by means of the
    <termref def="dt-static-namespaces">statically known namespaces</termref>, or if unprefixed, the
    <termref def="dt-def-elemtype-ns">default element/type namespace</termref>.

    If the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementName" xlink:type="simple">ElementName</nt> specified in the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SchemaElementTest" xlink:type="simple">SchemaElementTest</nt>
    is not found in the <termref def="dt-is-elems">in-scope element declarations</termref>, a
    <termref def="dt-static-error">static error</termref> is raised <errorref class="ST" code="0008"/>.
  </p><p>
    A <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SchemaElementTest" xlink:type="simple">SchemaElementTest</nt> matches a candidate element node if all of the following conditions are satisfied:
  </p><olist><item diff="del"><p>The name of the candidate node matches the specified <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementName" xlink:type="simple">ElementName</nt>, or it matches the name of an element in a
<termref def="dt-substitution-group">substitution group</termref> headed by an element named <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementName" xlink:type="simple">ElementName</nt> and the substituted element is not abstract. <phrase diff="add">Call this element the substituted element.</phrase>
                        </p></item><item diff="del"><p>
                           <code>derives-from(</code>
                           <emph>AT, ET</emph>
                           <code>)</code> is <code>true</code>, where <emph>AT</emph> is the type annotation of the candidate node and <emph>ET</emph> is the schema type declared for <phrase diff="del">element <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementName" xlink:type="simple">ElementName</nt>
                           </phrase>
                           <phrase diff="add">the substituted element</phrase> in the <termref def="dt-is-elems">in-scope element declarations</termref>.</p></item><item diff="del"><p>If the <phrase diff="del">element declaration for
<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementName" xlink:type="simple">ElementName</nt> in the <termref def="dt-is-elems">in-scope element declarations</termref>
                           </phrase>
                           <phrase diff="add">substituted element</phrase> is not <code>nillable</code>, then the
<code>nilled</code> property of the candidate node is <code>false</code>.</p></item><item diff="add"><p>Either:</p><olist><item><p>The name <emph>N</emph> of the candidate node matches the specified <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementName" xlink:type="simple">ElementName</nt>, or</p></item><item><p>The name <emph>N</emph> of the candidate node matches the name of an element declaration that is a member of the actual substitution group headed by the declaration of element <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementName" xlink:type="simple">ElementName</nt>.</p></item></olist><note><p>The term "actual substitution group" is defined in <bibref ref="XMLSchema11"/>. The actual substitution group of an element declaration <emph>H</emph> includes those element declarations <emph>P</emph> that are declared to have <emph>H</emph> as their direct or indirect substitution group head, provided that <emph>P</emph> is not declared as abstract, and that <emph>P</emph> is validly substitutable for <emph>H</emph>, which means that there must be no blocking constraints that prevent substitution.</p></note></item><item diff="add"><p>The schema element declaration named <emph>N</emph> is not abstract.</p></item><item diff="add"><p>
                           <code>derives-from( AT, ET )</code> is true, where <emph>AT</emph> is the type annotation of the candidate node and <emph>ET</emph> is the schema type declared in the schema element declaration named <emph>N</emph>.</p></item><item diff="add"><p>If the schema element declaration named <emph>N</emph> is not nillable, then the nilled property of the candidate node is false.</p></item></olist><p>Example: The <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SchemaElementTest" xlink:type="simple">SchemaElementTest</nt> 
                     <code role="parse-test">schema-element(customer)</code> matches a candidate element node 
<phrase diff="del">if <code>customer</code> is a top-level element declaration in the <termref def="dt-is-elems">in-scope element declarations</termref>, the name of the candidate node is <code>customer</code> or is in a <termref def="dt-substitution-group">substitution group</termref> headed by <code>customer</code>, the type annotation of the candidate node  is the same as or derived from the schema type declared for the <code>customer</code> element, and either the candidate node is not <code>nilled</code> or <code>customer</code> is declared to be <code>nillable</code>.</phrase>

                     <phrase diff="add">in the following two situations:</phrase>
                     <olist diff="add"><item><p>customer is a top-level element declaration in the in-scope element declarations; the name of the candidate node is customer; the element declaration of customer is not abstract; the type annotation of the candidate node is the same as or derived from the schema type declared in the customer element declaration; and either the candidate node is not nilled, or customer is declared to be nillable.</p></item><item><p>customer is a top-level element declaration in the in-scope element declarations; the name of the candidate node is client; client is an actual (non-abstract and non-blocked) member of the substitution group of customer; the type annotation of the candidate node is the same as or derived from the schema type declared for the client element; and either the candidate node is not nilled, or client is declared to be nillable.</p></item></olist>
                  </p></div4><div4 id="id-attribute-test"><head>Attribute Test</head><scrap headstyle="show"><head/><prod num="78" id="doc-xpath30-AttributeTest"><lhs>AttributeTest</lhs><rhs>"attribute"  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttribNameOrWildcard" xlink:type="simple">AttribNameOrWildcard</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypeName" xlink:type="simple">TypeName</nt>)?)?  ")"</rhs></prod><prod num="79" id="doc-xpath30-AttribNameOrWildcard"><lhs>AttribNameOrWildcard</lhs><rhs>
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeName" xlink:type="simple">AttributeName</nt>  |  "*"</rhs></prod><prod num="86" id="noid_d3e6321.doc-xpath30-AttributeName"><lhs>AttributeName</lhs><rhs>
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EQName" xlink:type="simple">EQName</nt>
                        </rhs></prod><prod num="89" id="noid_d3e6322.doc-xpath30-TypeName"><lhs>TypeName</lhs><rhs>
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EQName" xlink:type="simple">EQName</nt>
                        </rhs></prod></scrap><p>
    An <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeTest" xlink:type="simple">AttributeTest</nt> is used to match an
    attribute node by its name and/or <termref def="dt-type-annotation">type annotation</termref>.
  </p><p>
    The <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeName" xlink:type="simple">AttributeName</nt> and <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypeName" xlink:type="simple">TypeName</nt> of an <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeTest" xlink:type="simple">AttributeTest</nt>
    have their prefixes expanded to namespace URIs by means of the
    <termref def="dt-static-namespaces">statically known namespaces</termref>. If unprefixed, the
    <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeName" xlink:type="simple">AttributeName</nt> is in no namespace, but an unprefixed <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypeName" xlink:type="simple">TypeName</nt> is in the
    <termref def="dt-def-elemtype-ns">default element/type namespace</termref>.

    The <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeName" xlink:type="simple">AttributeName</nt> need not be present in the <termref def="dt-is-attrs">in-scope attribute declarations</termref>,
    but the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypeName" xlink:type="simple">TypeName</nt> must be present in the <termref def="dt-is-types">in-scope schema types</termref> 
                     <errorref class="ST" code="0008"/>.
  </p><p>
    An <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeTest" xlink:type="simple">AttributeTest</nt> may take any of the following forms:
  </p><olist><item><p>
                           <code role="parse-test">attribute()</code> and <code role="parse-test">attribute(*)</code> match any single attribute node,
regardless of its name or type annotation.</p></item><item><p>
                           <code>attribute(</code>
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeName" xlink:type="simple">AttributeName</nt>
                           <code>)</code>
matches any attribute node whose name is <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeName" xlink:type="simple">AttributeName</nt>, regardless of its type annotation.</p><p>Example: <code role="parse-test">attribute(price)</code>
matches any attribute node whose name is <code>price</code>.</p></item><item><p>
                           <code>attribute(</code>
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeName" xlink:type="simple">AttributeName</nt>, <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypeName" xlink:type="simple">TypeName</nt>
                           <code>)</code>
matches an attribute node whose name is <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeName" xlink:type="simple">AttributeName</nt> if <code>derives-from(</code>
                           <emph>AT</emph>, <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypeName" xlink:type="simple">TypeName</nt> 
                           <code>)</code> is <code>true</code>, where <emph>AT</emph> is the type annotation of the attribute node.</p><p>Example: <code role="parse-test">attribute(price, currency)</code> matches an
attribute node whose name is <code>price</code> and whose type
annotation is
<code>currency</code> (or is derived from <code>currency</code>).</p></item><item><p>
                           <code>attribute(*,
</code>
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypeName" xlink:type="simple">TypeName</nt>
                           <code>)</code> matches an attribute
node regardless of its name, if
<code>derives-from(</code>
                           <emph>AT</emph>, <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypeName" xlink:type="simple">TypeName</nt>
                           <code>)</code> is
<code>true</code>, where <emph>AT</emph> is the type annotation of the attribute node.</p><p>Example:
<code role="parse-test">attribute(*, currency)</code> matches any attribute node whose
type annotation is <code>currency</code> (or is derived from <code>currency</code>), regardless of its
name.</p></item></olist></div4><div4 id="id-schema-attribute-test"><head>Schema Attribute Test</head><scrap headstyle="show"><head/><prod num="80" id="doc-xpath30-SchemaAttributeTest"><lhs>SchemaAttributeTest</lhs><rhs>"schema-attribute"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeDeclaration" xlink:type="simple">AttributeDeclaration</nt>  ")"</rhs></prod><prod num="81" id="doc-xpath30-AttributeDeclaration"><lhs>AttributeDeclaration</lhs><rhs>
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeName" xlink:type="simple">AttributeName</nt>
                        </rhs></prod><prod num="86" id="noid_d3e6508.doc-xpath30-AttributeName"><lhs>AttributeName</lhs><rhs>
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EQName" xlink:type="simple">EQName</nt>
                        </rhs></prod></scrap><p>
    A <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SchemaAttributeTest" xlink:type="simple">SchemaAttributeTest</nt> matches an attribute node against a corresponding
    attribute declaration found in the <termref def="dt-is-attrs">in-scope attribute declarations</termref>.
  </p><p>
    The <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeName" xlink:type="simple">AttributeName</nt> of a <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SchemaAttributeTest" xlink:type="simple">SchemaAttributeTest</nt>
    has its prefixes expanded to a namespace URI by means of the
    <termref def="dt-static-namespaces">statically known namespaces</termref>. If unprefixed, an
    <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeName" xlink:type="simple">AttributeName</nt> is in no namespace.

    If the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeName" xlink:type="simple">AttributeName</nt> specified in the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SchemaAttributeTest" xlink:type="simple">SchemaAttributeTest</nt>
    is not found in the <termref def="dt-is-attrs">in-scope attribute declarations</termref>, a
    <termref def="dt-static-error">static error</termref> is raised <errorref class="ST" code="0008"/>.
  </p><p>
    A <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SchemaAttributeTest" xlink:type="simple">SchemaAttributeTest</nt> matches a candidate attribute node if both of the
  following conditions are satisfied:
  </p><olist><item><p>The name of the candidate node matches the specified <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeName" xlink:type="simple">AttributeName</nt>.</p></item><item><p>
                           <code>derives-from(</code>
                           <emph>AT, ET</emph>
                           <code>)</code> is <code>true</code>, where <emph>AT</emph> is the type annotation of the candidate node and <emph>ET</emph> is the schema type declared for attribute <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeName" xlink:type="simple">AttributeName</nt> in the <termref def="dt-is-attrs">in-scope attribute declarations</termref>.</p></item></olist><p>Example: The <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SchemaAttributeTest" xlink:type="simple">SchemaAttributeTest</nt> 
                     <code role="parse-test">schema-attribute(color)</code> matches a candidate attribute node if <code>color</code> is a top-level attribute declaration in the <termref def="dt-is-attrs">in-scope attribute declarations</termref>, the name of the candidate node is <code>color</code>, and the type annotation of the candidate node  is the same as or derived from the schema type declared for the <code>color</code> attribute.</p></div4><div4 id="id-function-test"><head>Function Test</head><scrap headstyle="show"><head/><prod num="90" id="doc-xpath30-FunctionTest"><lhs>FunctionTest</lhs><rhs>
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AnyFunctionTest" xlink:type="simple">AnyFunctionTest</nt>
                           <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypedFunctionTest" xlink:type="simple">TypedFunctionTest</nt>
                        </rhs></prod><prod num="91" id="doc-xpath30-AnyFunctionTest"><lhs>AnyFunctionTest</lhs><rhs>"function"  "("  "*"  ")"</rhs></prod><prod num="92" id="doc-xpath30-TypedFunctionTest"><lhs>TypedFunctionTest</lhs><rhs>"function"  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SequenceType" xlink:type="simple">SequenceType</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SequenceType" xlink:type="simple">SequenceType</nt>)*)?  ")"  "as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SequenceType" xlink:type="simple">SequenceType</nt>
                        </rhs></prod></scrap><p>
    A <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-FunctionTest" xlink:type="simple">FunctionTest</nt> matches a <xtermref diff="chg" spec="DM30" ref="dt-function-item">function</xtermref>,
    potentially also checking its <xtermref spec="DM30" ref="dt-signature">function signature</xtermref> .

    An <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AnyFunctionTest" xlink:type="simple">AnyFunctionTest</nt>
    matches any item that is a function.

    A <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypedFunctionTest" xlink:type="simple">TypedFunctionTest</nt> matches an
    item if it is a <xtermref diff="chg" spec="DM30" ref="dt-function-item">function</xtermref> and the function<phrase diff="del"> item</phrase>'s type signature (as defined in
    <xspecref spec="DM30" ref="function-items"/>) is a <termref def="dt-subtype">subtype</termref> of the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypedFunctionTest" xlink:type="simple">TypedFunctionTest</nt>.
  </p><p diff="chg">
    Here are some examples of <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-FunctionTest" xlink:type="simple">FunctionTest</nt>s:
  </p><olist><item><p>
                           <code>function(*)</code> matches any <xtermref diff="chg" spec="DM30" ref="dt-function-item">function</xtermref>.</p></item><item><p>
                           <code>function(int, int) as int</code> matches any <xtermref diff="chg" spec="DM30" ref="dt-function-item">function</xtermref> with the function signature <code>function(int, int) as int</code>.
    </p></item></olist></div4></div3><div3 id="id-sequencetype-subtype"><head>SequenceType Subtype Relationships</head><p diff="chg">
  Given two <termref def="dt-sequence-type">sequence types</termref>, it is possible to determine if one is a subtype of the other.
  <termdef term="subtype" id="dt-subtype">A <termref def="dt-sequence-type">sequence type</termref> 
                     <code>A</code> is a <term>subtype</term> of a sequence type <code>B</code>
  if the judgement <code>subtype(A, B)</code> is true.</termdef>
  
  When the judgement <code>subtype(A, B)</code> is true, it is always the case that for any value <code>V</code>, <code>(V instance of A)</code> implies <code>(V instance of B)</code>.</p><note diff="del"><p>The converse is not necessarily true: for example every
    instance of <code>union(P, Q)</code> is also an instance of
    <code>union(P, Q, R)</code>, but there is no subtype relationship
    between these two types.
    </p></note><div4 id="id-seqtype-subtype"><head diff="chg">The judgement <code>subtype(A, B)</code>
                  </head><p>The judgement <code>subtype(A, B)</code> determines if the <termref def="dt-sequence-type">sequence type</termref> 
                     <code>A</code>
    is a <termref def="dt-subtype">subtype</termref> of the sequence type <code>B</code>.

    <code>A</code> can either be <code>empty-sequence()</code>
                     <phrase diff="add">, <code>xs:error</code>,</phrase> or an <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ItemType" xlink:type="simple">ItemType</nt>, <code>Ai</code>, possibly followed by an occurrence indicator. Similarly
    <code>B</code> can either be <code>empty-sequence()</code>
                     <phrase diff="add">, <code>xs:error</code>,</phrase> or an <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ItemType" xlink:type="simple">ItemType</nt>, <code>Bi</code>, possibly followed by an occurrence indicator.
    The result of the <code>subtype(A, B)</code> judgement can be determined from the table below, which makes use of the auxiliary judgement <code>subtype-itemtype(Ai, Bi)</code> defined
    in <specref ref="id-itemtype-subtype"/>.
    </p><table border="1" summary="Special characters"><tbody><tr><th rowspan="2" colspan="2"/><th colspan="6" rowspan="1">
                              <termref def="dt-sequence-type">Sequence type</termref> 
                              <code>B</code>
                           </th></tr><tr><th rowspan="1" colspan="1">
                              <code>empty-sequence()</code>
                           </th><th rowspan="1" colspan="1">
                              <code>Bi?</code>
                           </th><th rowspan="1" colspan="1">
                              <code>Bi*</code>
                           </th><th rowspan="1" colspan="1">
                              <code>Bi</code>
                           </th><th rowspan="1" colspan="1">
                              <code>Bi+</code>
                           </th><td diff="add" rowspan="1" colspan="1">xs:error</td></tr><tr><th rowspan="6" colspan="1">
                              <termref def="dt-sequence-type">Sequence type</termref> 
                              <code>A</code>
                           </th><th rowspan="1" colspan="1">
                              <code>empty-sequence()</code>
                           </th><td rowspan="1" colspan="1">true</td><td rowspan="1" colspan="1">true</td><td rowspan="1" colspan="1">true</td><td rowspan="1" colspan="1">false</td><td rowspan="1" colspan="1">false</td><td diff="add" rowspan="1" colspan="1">false</td></tr><tr><th rowspan="1" colspan="1">
                              <code>Ai?</code>
                           </th><td rowspan="1" colspan="1">false</td><td rowspan="1" colspan="1">
                              <code>subtype-itemtype(Ai, Bi)</code>
                           </td><td rowspan="1" colspan="1">
                              <code>subtype-itemtype(Ai, Bi)</code>
                           </td><td rowspan="1" colspan="1">false</td><td rowspan="1" colspan="1">false</td><td diff="add" rowspan="1" colspan="1">false</td></tr><tr><th rowspan="1" colspan="1">
                              <code>Ai*</code>
                           </th><td rowspan="1" colspan="1">false</td><td rowspan="1" colspan="1">false</td><td rowspan="1" colspan="1">
                              <code>subtype-itemtype(Ai, Bi)</code>
                           </td><td rowspan="1" colspan="1">false<phrase diff="del">(exception: <code>true</code> when Ai is a pure union type with no member types)</phrase>
                           </td><td rowspan="1" colspan="1">false</td><td diff="add" rowspan="1" colspan="1">false</td></tr><tr><th rowspan="1" colspan="1">
                              <code>Ai</code>
                           </th><td rowspan="1" colspan="1">false</td><td rowspan="1" colspan="1">
                              <code>subtype-itemtype(Ai, Bi)</code>
                           </td><td rowspan="1" colspan="1">
                              <code>subtype-itemtype(Ai, Bi)</code>
                           </td><td rowspan="1" colspan="1">
                              <code>subtype-itemtype(Ai, Bi)</code>
                           </td><td rowspan="1" colspan="1">
                              <code>subtype-itemtype(Ai, Bi)</code>
                           </td><td diff="add" rowspan="1" colspan="1">false</td></tr><tr><th rowspan="1" colspan="1">
                              <code>Ai+</code>
                           </th><td rowspan="1" colspan="1">false</td><td rowspan="1" colspan="1">false</td><td rowspan="1" colspan="1">
                              <code>subtype-itemtype(Ai, Bi)</code>
                           </td><td rowspan="1" colspan="1">false</td><td rowspan="1" colspan="1">
                              <code>subtype-itemtype(Ai, Bi)</code>
                           </td><td diff="add" rowspan="1" colspan="1">false</td></tr><tr diff="add"><th rowspan="1" colspan="1">
                              <code>xs:error</code>
                           </th><td rowspan="1" colspan="1">true</td><td rowspan="1" colspan="1">true</td><td rowspan="1" colspan="1">true</td><td rowspan="1" colspan="1">true</td><td rowspan="1" colspan="1">true</td><td rowspan="1" colspan="1">true</td></tr></tbody></table><p diff="add">
                     <code>xs:error+</code> is treated the same way as <code>xs:error</code> in the above table. <code>xs:error?</code> and <code>xs:error*</code> are treated the same way as <code>empty-sequence()</code>.</p><note diff="del"><p>
                        <code>xs:error</code> is a pure union type with no member types; this is the main motivation for the exception noted in the above table.</p></note></div4><div4 id="id-itemtype-subtype"><head diff="chg">The judgement <code>subtype-itemtype(Ai, Bi)</code> 
                  </head><p>The judgement <code>subtype-itemtype(Ai, Bi)</code> determines if the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ItemType" xlink:type="simple">ItemType</nt> 
                     <code>Ai</code>
    is a <termref def="dt-subtype">subtype</termref> of the ItemType <code>Bi</code>. <code>Ai</code> is a subtype of <code>Bi</code>
    if and only if at least one of the following conditions applies:
    </p><olist><item><p>
                           <code>Ai</code> and <code>Bi</code> are <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AtomicOrUnionType" xlink:type="simple">AtomicOrUnionTypes</nt>, and <code>derives-from(Ai, Bi)</code> returns <code>true</code>.
      </p></item><item><p diff="del">
                           <code>Ai</code> and <code>Bi</code> are both <termref def="dt-pure-union-type">pure union types</termref>, 
      and every type <code>t</code> in the transitive membership of <code>Ai</code>
      is also in the transitive membership of <code>Bi</code>.
      </p><p diff="add">
                           <code>Ai</code> is a pure union type, 
      and every type <code>t</code> in the transitive membership of <code>Ai</code>
      satisfies <code>subtype-itemType(t, Bi)</code>.</p></item><item diff="add"><p>
                           <code>Ai</code> is <code>xs:error</code> and <code>Bi</code> is a <termref def="dt-generalized-atomic-type">generalized atomic type</termref>.</p></item><item><p>
                           <code>Bi</code> is <code>item()</code>.
      </p></item><item><p>
                           <code>Bi</code> is <code>node()</code>, and <code>Ai</code> is a <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-KindTest" xlink:type="simple">KindTest</nt>.
      </p></item><item><p>
                           <code>Bi</code> is <code>text()</code> and <code>Ai</code> is also <code>text()</code>.
      </p></item><item><p>
                           <code>Bi</code> is <code>comment()</code> and <code>Ai</code> is also <code>comment()</code>.
      </p></item><item><p>
                           <code>Bi</code> is <code>namespace-node()</code> and <code>Ai</code> is also <code>namespace-node()</code>.
      </p></item><item><p>
                           <code>Bi</code> is <code>processing-instruction()</code> and <code>Ai</code> is either <code>processing-instruction()</code> or
      <code>processing-instruction(N)</code> for any name N.
      </p></item><item><p>
                           <code>Bi</code> is <code>processing-instruction(Bn)</code>, and <code>Ai</code> is also <code>processing-instruction(Bn)</code>.
      </p></item><item><p>
                           <code>Bi</code> is <code>document-node()</code> and <code>Ai</code> is either <code>document-node()</code> or
      <code>document-node(E)</code> for any <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementTest" xlink:type="simple">ElementTest</nt> E.
      </p></item><item><p>
                           <code>Bi</code> is <code>document-node(Be)</code> and <code>Ai</code> is <code>document-node(Ae)</code>, and <code>subtype-itemtype(Ae, Be)</code>.
      </p></item><item><p>
                           <code>Bi</code> is either <code>element()</code> or <code>element(*)</code>, and <code>Ai</code> is an <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementTest" xlink:type="simple">ElementTest</nt>.
      </p></item><item><p diff="chg">
                           <code>Bi</code> is either <code>element(Bn)</code> or <code>element(Bn, xs:anyType?)</code>,
      the <termref def="dt-expanded-qname">expanded QName</termref> of <code>An</code> equals the <termref def="dt-expanded-qname">expanded QName</termref> of <code>Bn</code>,
      and <code>Ai</code> is either <code>element(An)</code>,
      or <code>element(An, T?)</code> for any type T.
      </p></item><item><p diff="chg">
                           <code>Bi</code> is <code>element(Bn, Bt)</code>,
      the <termref def="dt-expanded-qname">expanded QName</termref> of <code>An</code> equals the <termref def="dt-expanded-qname">expanded QName</termref> of <code>Bn</code>,
      <code>Ai</code> is <code>element(An, At)</code>, and <code>derives-from(At, Bt)</code> returns <code>true</code>.
      </p></item><item><p diff="chg">
                           <code>Bi</code> is <code>element(Bn, Bt?)</code>,
      the <termref def="dt-expanded-qname">expanded QName</termref> of <code>An</code> equals the <termref def="dt-expanded-qname">expanded QName</termref> of <code>Bn</code>,
      <code>Ai</code> is either <code>element(An, At)</code> or <code>element(An, At?)</code>,
      and <code>derives-from(At, Bt)</code> returns <code>true</code>.
      </p></item><item><p>
                           <code>Bi</code> is <code>element(*, Bt)</code>, <code>Ai</code> is either <code>element(*, At)</code> or <code>element(N, At)</code> for any name N, and <code>derives-from(At, Bt)</code> returns <code>true</code>.
      </p></item><item><p>
                           <code>Bi</code> is <code>element(*, Bt?)</code>, <code>Ai</code> is either <code>element(*, At)</code>, <code>element(*, At?)</code>, <code>element(N, At)</code>, or <code>element(N, At?)</code> for any name N, and <code>derives-from(At, Bt)</code> returns <code>true</code>.
      </p></item><item><p>
                           <code>Bi</code> is <code>schema-element(Bn)</code>,
      <code>Ai</code> is <code>schema-element(An)</code>,
      and every element declaration that is an actual member of the substitution group of <code>An</code> is also an actual member of the substitution group of <code>Bn</code>.
      <note><p>The fact that <code>P</code> is a member of the substitution group of <code>Q</code> does not mean that every element declaration in the substitution group of <code>P</code> is also in the substitution group of <code>Q</code>. For example, <code>Q</code> might block substitution of elements whose type is derived by extension, while <code>P</code> does not.</p></note>
                        </p></item><item><p>
                           <code>Bi</code> is either <code>attribute()</code> or <code>attribute(*)</code>, and <code>Ai</code> is an <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeTest" xlink:type="simple">AttributeTest</nt>.
      </p></item><item><p diff="chg">
                           <code>Bi</code> is either <code>attribute(Bn)</code> or <code>attribute(Bn, xs:anyType)</code>,
      the <termref def="dt-expanded-qname">expanded QName</termref> of <code>An</code> equals the <termref def="dt-expanded-qname">expanded QName</termref> of <code>Bn</code>,
      and <code>Ai</code> is either <code>attribute(An)</code>, or <code>attribute(An, T)</code> for any type T.
      </p></item><item><p diff="chg">
                           <code>Bi</code> is <code>attribute(Bn, Bt)</code>,
      the <termref def="dt-expanded-qname">expanded QName</termref> of <code>An</code> equals the <termref def="dt-expanded-qname">expanded QName</termref> of <code>Bn</code>,
      <code>Ai</code> is <code>attribute(An, At)</code>,
      and <code>derives-from(At, Bt)</code> returns <code>true</code>.
      </p></item><item><p>
                           <code>Bi</code> is <code>attribute(*, Bt)</code>, <code>Ai</code> is either <code>attribute(*, At)</code>, or <code>attribute(N, At)</code> for any name N, and <code>derives-from(At, Bt)</code> returns <code>true</code>.
      </p></item><item><p diff="chg">
                           <code>Bi</code> is <code>schema-attribute(Bn)</code>,
      the <termref def="dt-expanded-qname">expanded QName</termref> of <code>An</code> equals the <termref def="dt-expanded-qname">expanded QName</termref> of <code>Bn</code>,
      and <code>Ai</code> is <code>schema-attribute(An)</code>.
      </p></item><item><p>
                           <code>Bi</code> is <code diff="chg">function(*)</code>.
      </p></item><item><p>
                           <code>Bi</code> is <code>function(Ba_1, Ba_2, ... Ba_N) as Br</code>,
      <code>Ai</code> is <code>function(Aa_1, Aa_2, ... Aa_M) as Ar</code>,
      where 
      ;
      <code>N</code> (arity of Bi) equals <code>M</code> (arity of Ai);
      <code>subtype(Ar, Br)</code>;
      <phrase role="xpath">and</phrase>
      for values of <code>I</code> between 1 and <code>N</code>, <code>subtype(Ba_I, Aa_I)</code>.
      </p><note diff="add"><p>Function return types are covariant because this rule invokes subtype(Ar, Br) for  return types. Function arguments are contravariant because this rule invokes subtype(Ba_I, Aa_I) for arguments.</p></note></item></olist></div4></div3><div3 id="id-xs-error" diff="add"><head>xs:error</head><p>The type <code>xs:error</code> has an empty value space; it never appears as a dynamic type or as the content type of a dynamic element or attribute type. 
		<code>xs:error</code> offers an alternative way of raising errors, in addition to fn:error.</p><p>A cast to <code>xs:error</code> raises an error or returns the empty sequence. Promotion to <code>xs:error</code> is not possible.
		Neither <code>xs:error</code> nor <code>xs:error+</code> can ever match a value.  <code>xs:error</code> is a subtype of all simple types, and a supertype only of itself.
		<code>xs:error?</code> and <code>xs:error*</code> are identical to empty-sequence(). A variable binding with a type declaration xs:error always raises a type error.
		<phrase diff="del">Calling a function in the signature in which <code>xs:error</code> appears always raises a type error <errorref class="TY" code="0004"/>
                  </phrase>.</p></div3></div2><div2 id="comments"><head>Comments</head><scrap headstyle="suppress"><head/><prod num="103" id="doc-xpath30-Comment"><lhs>Comment</lhs><rhs>"(:"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-CommentContents" xlink:type="simple">CommentContents</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Comment" xlink:type="simple">Comment</nt>)*  ":)"</rhs></prod><prod num="108" id="doc-xpath30-CommentContents"><lhs>CommentContents</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Char" xlink:type="simple">Char</nt>+ - (Char* ('(:' | ':)') Char*))</rhs></prod></scrap><p>Comments may be used to provide <phrase diff="del">informative annotation for</phrase>
               <phrase diff="add">information relevant to programmers who read</phrase> 
               <phrase role="xpath">an expression</phrase>. Comments are lexical constructs only, and do not affect  <phrase role="xpath">expression</phrase> processing.</p><p>Comments are strings, delimited by the symbols <code>(:</code> and <code>:)</code>. Comments may be nested.</p><p>A comment may be used anywhere <termref def="IgnorableWhitespace">ignorable whitespace</termref> is allowed (see <specref ref="DefaultWhitespaceHandling"/>).</p><p>The following is an example of a comment:</p><eg xml:space="preserve">(: Houston, we have a problem :)</eg></div2></div1><div1 id="id-expressions"><head>Expressions</head><p>This section discusses each of the basic kinds of expression. Each kind of expression has a name such as <code>PathExpr</code>, which is introduced on the left side of the grammar production that defines the expression. Since XPath 3.0 is a composable language, each kind of expression is defined in terms of other expressions whose operators have a higher precedence. In this way, the precedence of operators is represented explicitly in the grammar.</p><p>The order in which expressions are discussed in this document does not reflect the order of operator precedence. In general, this document introduces the simplest kinds of expressions first, followed by more complex expressions.  For the complete grammar, see Appendix [<specref ref="nt-bnf"/>].</p><p> 
            <phrase role="xpath">The highest-level symbol in the XPath grammar is XPath.</phrase> 
         </p><scrap headstyle="show"><head/><prod num="1" id="doc-xpath30-XPath"><lhs>XPath</lhs><rhs>
                  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Expr" xlink:type="simple">Expr</nt>
               </rhs></prod><prod num="6" id="doc-xpath30-Expr"><lhs>Expr</lhs><rhs>
                  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>)*</rhs></prod><prod num="7" id="doc-xpath30-ExprSingle"><lhs>ExprSingle</lhs><rhs>
                  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ForExpr" xlink:type="simple">ForExpr</nt>
                  <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-LetExpr" xlink:type="simple">LetExpr</nt>
                  <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-QuantifiedExpr" xlink:type="simple">QuantifiedExpr</nt>
                  <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-IfExpr" xlink:type="simple">IfExpr</nt>
                  <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-OrExpr" xlink:type="simple">OrExpr</nt>
               </rhs></prod></scrap><p>The XPath 3.0 operator that has lowest precedence is the <termref def="dt-comma-operator">comma operator</termref>, which is used to combine two operands to form a sequence. As shown in the grammar, a general expression (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Expr" xlink:type="simple">Expr</nt>) can consist of multiple <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt> operands, separated by commas. The name <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt> denotes an expression that does not contain a top-level <termref def="dt-comma-operator">comma operator</termref> (despite its name, an <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt> may evaluate to a sequence containing more than one item.)</p><p>The symbol <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt> is used in various places in the grammar where an expression is not allowed to contain a top-level comma. For example, each of the arguments of a function call must be an <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>, because commas are used to separate the arguments of a function call.</p><p>After the comma, the expressions that have next lowest precedence are

<phrase role="xpath">
               <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ForExpr" xlink:type="simple">ForExpr</nt>, <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-LetExpr" xlink:type="simple">LetExpr</nt>, </phrase>
            <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-QuantifiedExpr" xlink:type="simple">QuantifiedExpr</nt>,

<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-IfExpr" xlink:type="simple">IfExpr</nt>,

and <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-OrExpr" xlink:type="simple">OrExpr</nt>. Each of these expressions is described in a separate section of this document.</p><div2 id="id-primary-expressions"><head>Primary Expressions</head><p> 
               <termdef id="dt-primary-expression" term="primary expression">
                  <term>Primary expressions</term> are the basic primitives of the
	 language. They include literals, variable references,  context item expressions,  and function calls. A primary expression may also be created by enclosing any expression in parentheses, which is sometimes helpful in controlling the precedence of operators.</termdef>  
            </p><scrap headstyle="show"><head/><prod num="52" id="doc-xpath30-PrimaryExpr"><lhs>PrimaryExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Literal" xlink:type="simple">Literal</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-VarRef" xlink:type="simple">VarRef</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ParenthesizedExpr" xlink:type="simple">ParenthesizedExpr</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ContextItemExpr" xlink:type="simple">ContextItemExpr</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-FunctionCall" xlink:type="simple">FunctionCall</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-FunctionItemExpr" xlink:type="simple">FunctionItemExpr</nt>
                  </rhs></prod><prod num="62" id="doc-xpath30-FunctionItemExpr"><lhs>FunctionItemExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-NamedFunctionRef" xlink:type="simple">NamedFunctionRef</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-InlineFunctionExpr" xlink:type="simple">InlineFunctionExpr</nt>
                  </rhs></prod></scrap><div3 id="id-literals"><head>Literals</head><p> 
                  <termdef id="dt-literal" term="literal">A <term>literal</term> is a direct syntactic representation of an
		atomic value.</termdef> XPath 3.0 supports two kinds of literals: numeric literals and
		string literals.</p><scrap headstyle="show"><head/><prod num="53" id="doc-xpath30-Literal"><lhs>Literal</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-NumericLiteral" xlink:type="simple">NumericLiteral</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-StringLiteral" xlink:type="simple">StringLiteral</nt>
                     </rhs></prod><prod num="54" id="doc-xpath30-NumericLiteral"><lhs>NumericLiteral</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-IntegerLiteral" xlink:type="simple">IntegerLiteral</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-DecimalLiteral" xlink:type="simple">DecimalLiteral</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-DoubleLiteral" xlink:type="simple">DoubleLiteral</nt>
                     </rhs></prod><prod num="95" id="doc-xpath30-IntegerLiteral"><lhs>IntegerLiteral</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Digits" xlink:type="simple">Digits</nt>
                     </rhs></prod><prod num="96" id="doc-xpath30-DecimalLiteral"><lhs>DecimalLiteral</lhs><rhs>("."  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Digits" xlink:type="simple">Digits</nt>)  |  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Digits" xlink:type="simple">Digits</nt>  "."  [0-9]*)</rhs></prod><prod num="97" id="doc-xpath30-DoubleLiteral"><lhs>DoubleLiteral</lhs><rhs>(("."  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Digits" xlink:type="simple">Digits</nt>)  |  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Digits" xlink:type="simple">Digits</nt>  ("."  [0-9]*)?))  [eE]  [+-]?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Digits" xlink:type="simple">Digits</nt>
                     </rhs></prod><prod num="98" id="doc-xpath30-StringLiteral"><lhs>StringLiteral</lhs><rhs>('"'  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EscapeQuot" xlink:type="simple">EscapeQuot</nt>  |  [^"])*  '"')  |  ("'"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EscapeApos" xlink:type="simple">EscapeApos</nt>  |  [^'])*  "'")</rhs></prod><prod num="101" id="doc-xpath30-EscapeQuot"><lhs>EscapeQuot</lhs><rhs>'""'</rhs></prod><prod num="102" id="doc-xpath30-EscapeApos"><lhs>EscapeApos</lhs><rhs>"''"</rhs></prod><prod num="107" id="doc-xpath30-Digits"><lhs>Digits</lhs><rhs>[0-9]+</rhs></prod></scrap><p> The value of a <term>numeric literal</term> containing no "<code>.</code>" and no <code>e</code> or <code>E</code> character is  an atomic value of type <code>xs:integer</code>. The value of a numeric literal containing "<code>.</code>" but no <code>e</code> or <code>E</code> character is an atomic value of type <code>xs:decimal</code>. The value of a numeric literal containing an <code>e</code> or <code>E</code> character is an atomic value of type <code>xs:double</code>. The value of the numeric literal is determined by casting it to the
appropriate type according to the rules for casting from <code>xs:untypedAtomic</code>
to a numeric type as specified in <xspecref spec="FO30" ref="casting-from-strings"/>.</p><p id="id-string-literal">The value of a <term>string literal</term> is an atomic value whose  type is <code>xs:string</code> and whose value is the string denoted by the characters between the
		delimiting apostrophes or quotation marks. If the literal is delimited by apostrophes, two adjacent apostrophes within the literal are interpreted as a single apostrophe. Similarly, if the literal is delimited by quotation marks, two adjacent quotation marks within the literal are interpreted as one quotation mark.</p><p>Here are some examples of literal expressions:</p><ulist><item><p> 
                        <code role="parse-test">"12.5"</code> denotes the string containing the characters '1', '2', '.', and
			 '5'.</p></item><item><p> 
                        <code role="parse-test">12</code> denotes the <code>xs:integer</code> value twelve.</p></item><item><p> 
                        <code role="parse-test">12.5</code> denotes the <code>xs:decimal</code> value twelve and one half.</p></item><item><p> 
                        <code role="parse-test">125E2</code> denotes the <code>xs:double</code> value twelve thousand, five hundred.</p></item><item><p>
                        <code role="parse-test">"He said, ""I don't like it."""</code> denotes a string containing two quotation marks and one apostrophe.</p><note role="xpath"><p>When XPath expressions are embedded in contexts where quotation
marks have special significance, such as inside XML attributes, additional
escaping may be needed.</p></note></item></ulist><p>
      The <code>xs:boolean</code> values <code>true</code> and <code>false</code> can be constructed by calls to the
      <termref def="dt-built-in-function">built-in functions</termref> 
                  <code>fn:true()</code> and <code>fn:false()</code>, respectively.
    </p><p>Values of other atomic types can be constructed by
		calling the <termref def="dt-constructor-function">constructor function</termref> for the given type. The constructor functions for XML Schema
		built-in types are defined in <bibref ref="xpath-functions-30"/>. In general, the name of a constructor function for a given type is the same as the name of the type (including its namespace). For
		example:</p><ulist><item><p> 
                        <code role="parse-test">xs:integer("12")</code> returns the integer value twelve.</p></item><item><p> 
                        <code role="parse-test">xs:date("2001-08-25")</code> returns an item whose type is <code>xs:date</code> and whose value represents the date 25th August 2001.</p></item><item><p>
                        <code role="parse-test">xs:dayTimeDuration("PT5H")</code> returns an item whose type is <code>xs:dayTimeDuration</code> and whose value represents a duration of five hours.</p></item></ulist><p>Constructor functions can also be used to create special values that have no literal representation, as in the following examples:
<ulist><item><p>
                           <code role="parse-test">xs:float("NaN")</code> returns the special floating-point value, "Not a Number."</p></item><item><p>
                           <code role="parse-test">xs:double("INF")</code> returns the special double-precision value, "positive infinity."</p></item></ulist>
               </p><p>Constructor functions are available for all <termref def="dt-generalized-atomic-type">Generalized atomic types</termref>,
including union types. For example, if <code>my:dt</code> is a user-defined union
type whose member types are <code>xs:date</code>, <code>xs:time</code>, and <code>xs:dateTime</code>, then
the expression <code>my:dt("2011-01-10")</code> creates an atomic value of type
<code>xs:date</code>. The rules follow XML Schema validation rules for union types:
the effect is to choose the first member type that accepts the given
string in its lexical space.</p><p>It is also possible to construct values of various types by using a <code>cast</code> expression. For example:</p><ulist><item><p> 
                        <code role="parse-test">9 cast as
                        hatsize</code> returns the atomic value <code>9</code>
			 whose type is  <code>hatsize</code>.</p></item></ulist></div3><div3 id="id-variables"><head>Variable References</head><scrap headstyle="show"><head/><prod num="55" id="doc-xpath30-VarRef"><lhs>VarRef</lhs><rhs>"$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-VarName" xlink:type="simple">VarName</nt>
                     </rhs></prod><prod num="56" id="doc-xpath30-VarName"><lhs>VarName</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EQName" xlink:type="simple">EQName</nt>
                     </rhs></prod></scrap><p> 
                  <termdef id="dt-variable-reference" term="variable reference">A <term>variable reference</term> is an EQName preceded by a $-sign.</termdef> 
                  <phrase diff="del">Two variable references are equivalent if their local names are the same and their namespace prefixes are bound to the same namespace URI in the <termref def="dt-static-namespaces">statically known namespaces</termref>.</phrase>
An unprefixed variable reference is in no namespace. <phrase diff="add">Two variable references are equivalent if their  <termref def="dt-expanded-qname">expanded QNames</termref>  are equal (as defined by the <code>eq</code> operator).</phrase> The scope of a variable binding is defined separately for each kind of
expression that can bind variables.</p><p>Every variable reference must match a name in the <termref def="dt-in-scope-variables">in-scope variables</termref>.<phrase diff="del">, which include variables from the following sources:</phrase>
               </p><olist diff="del"><item><p>The <termref def="dt-in-scope-variables">in-scope variables</termref> may be augmented by <termref def="dt-implementation-defined">implementation-defined</termref> variables.</p></item><item><p>A variable may be bound by an XPath 3.0 expression. <phrase role="xpath">The kinds of expressions that can bind variables are <code>for</code> expressions (<specref ref="id-for-expressions"/>), let expressions (<specref ref="id-let-expressions"/>),  and quantified expressions (<specref ref="id-quantified-expressions"/>).</phrase>
                     </p></item></olist><p>Every variable binding has a static scope. The scope defines where
references to the variable can validly occur.

It is a <termref def="dt-static-error">static error</termref> 
                  <errorref class="ST" code="0008"/> to reference a variable that is not in scope. If a variable is bound in the <termref def="dt-static-context">static context</termref> for an expression, that variable is in scope for the entire expression <phrase diff="add">except where it is occluded by another binding that uses the same name within that scope</phrase>.</p><p>
                  <phrase diff="del">If a variable reference matches two or more variable bindings that are in scope,
then the reference is taken as referring to the
inner binding, that is, the one whose scope is smaller.</phrase>

At evaluation time, the value of a variable reference is the value <phrase diff="del">of
the expression</phrase> to which the relevant variable is bound.</p></div3><div3 id="id-paren-expressions"><head>Parenthesized Expressions</head><scrap headstyle="show"><head/><prod num="57" id="doc-xpath30-ParenthesizedExpr"><lhs>ParenthesizedExpr</lhs><rhs>"("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Expr" xlink:type="simple">Expr</nt>?  ")"</rhs></prod></scrap><p>Parentheses may be used to override the precedence rules.
        For example, the expression <code role="parse-test">(2 + 4)
		    * 5</code> evaluates to thirty, since the parenthesized expression <code role="parse-test">(2 + 4)</code> is evaluated first and its result is multiplied by five. Without
			 parentheses, the expression <code role="parse-test">2 + 4 * 5</code> evaluates to twenty-two, because the multiplication operator has higher
			 precedence than the addition operator.</p><p>Empty parentheses are used to denote an empty sequence, as
		described in <specref ref="construct_seq"/>.</p></div3><div3 id="id-context-item-expression"><head>Context Item Expression</head><scrap headstyle="show"><head/><prod num="58" id="doc-xpath30-ContextItemExpr"><lhs>ContextItemExpr</lhs><rhs>"."</rhs></prod></scrap><p>A <term>context item expression</term> evaluates to
              the <termref def="dt-context-item">context item</termref>, which may be either a node (as in the
              expression
              <code role="parse-test">fn:doc("bib.xml")/books/book[fn:count(./author)&gt;1]</code>),
              or an atomic value or function<phrase diff="del"> item</phrase> (as in the expression <code role="parse-test">(1 to
              100)[. mod 5 eq 0]</code>).</p><p>If the <termref def="dt-context-item">context item</termref> is <phrase diff="del">undefined</phrase>
                  <xtermref spec="DM30" ref="dt-absent" diff="add"/>, a context item expression raises a dynamic error <errorref class="DY" code="0002"/>.</p></div3><div3 id="id-function-calls"><head>
                  <phrase diff="add">Static</phrase> Function Calls</head><p> 
                  <termdef term="built-in function" id="dt-built-in-function">The <term>built-in functions</term> supported by XPath 3.0 are defined in <bibref ref="xpath-functions-30"/>.</termdef> 
                  <phrase role="xpath">Additional functions may be provided in
		the <termref def="dt-static-context">static
		context</termref>. XPath per se does not provide a way
		to declare named functions, but a host language may provide
		such a mechanism.</phrase>

		             </p><scrap headstyle="show"><head/><prod num="59" id="doc-xpath30-FunctionCall"><lhs>FunctionCall</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EQName" xlink:type="simple">EQName</nt>  
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ArgumentList" xlink:type="simple">ArgumentList</nt>
                     </rhs></prod><prod num="49" id="noid_d3e8226.doc-xpath30-ArgumentList"><lhs>ArgumentList</lhs><rhs>"("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Argument" xlink:type="simple">Argument</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Argument" xlink:type="simple">Argument</nt>)*)?  ")"</rhs></prod><prod num="60" id="doc-xpath30-Argument"><lhs>Argument</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ArgumentPlaceholder" xlink:type="simple">ArgumentPlaceholder</nt>
                     </rhs></prod><prod num="61" id="doc-xpath30-ArgumentPlaceholder"><lhs>ArgumentPlaceholder</lhs><rhs>"?"</rhs></prod></scrap><p>
                  <termdef term="static function call" id="dt-static-function-call">A <term>
                        <phrase diff="add">static</phrase> function call</term> consists of an EQName followed by a
		parenthesized list of zero or more arguments.</termdef> 
                  <termdef term="argument expression" id="dt-arg-expr">An argument to a function call is either an
    <term>argument expression</term> or an ArgumentPlaceholder ("?").</termdef> If the EQName in a <phrase diff="add">static</phrase> function
		call <phrase diff="add">is a <termref def="dt-qname">lexical QName</termref> that</phrase> has no namespace prefix, it is considered to be
		in the <termref def="dt-def-fn-ns">default function
		namespace.</termref>
               </p><p>If the <termref def="dt-expanded-qname">expanded QName</termref>
    and number of arguments in a <phrase diff="add">static</phrase> function call do not match the name and arity
		of a <termref def="dt-known-func-signatures">function signature</termref> in the
    <termref def="dt-static-context">static context</termref>,  a
    <termref def="dt-static-error">static error</termref> is raised <errorref class="ST" code="0017"/>.</p><p>
                  <termdef term="partial function application" id="dt-partial-function-application">
      A 
      <phrase diff="add">
        static or <termref def="dt-dynamic-function-invocation">dynamic</termref>
                     </phrase>
      function call 
      <phrase diff="del">
                        <phrase diff="add">
          or 
          <termref def="dt-dynamic-function-invocation">
            dynamic function invocation
          </termref>
                        </phrase>
                     </phrase>
      is a 
      <term>partial function application</term>
      if one or more arguments is an ArgumentPlaceholder.
    </termdef>
                  <phrase diff="del">
    It is a 
    <termref def="dt-static-error">static error</termref>
      if a static function call is a partial function application
      and the identified function is a
      <xtermref spec="FO30" ref="dt-context-dependent">context-dependent</xtermref>
      built-in function
    <errorref class="ST" code="0112"/>.
    </phrase>
               </p><p>
    Evaluation of
    <phrase diff="del">
      partial function applications is described in
      <specref ref="id-partial-function-application"/>,
      while evaluation of (non-partial)
    </phrase>
    function calls is described in <specref ref="id-eval-function-call"/>.
  </p><p>Since the arguments of a function call are separated by commas, any
<termref def="dt-arg-expr">argument expression</termref> that contains a top-level <termref def="dt-comma-operator">comma operator</termref> must be
enclosed in parentheses. Here are some illustrative examples of
<phrase diff="add">static</phrase> function calls:</p><ulist><item><p> 
                        <code role="parse-test">my:three-argument-function(1,
			2, 3)</code> denotes a <phrase diff="add">static</phrase> function call with three arguments.</p></item><item><p> 
                        <code role="parse-test">my:two-argument-function((1,
			2), 3)</code> denotes a <phrase diff="add">static</phrase> function call with two arguments, the first of which is a
			 sequence of two values.</p></item><item><p> 
                        <code role="parse-test">my:two-argument-function(1,
			())</code> denotes a <phrase diff="add">static</phrase> function call with two arguments, the second of which is an
			 empty sequence.</p></item><item><p> 
                        <code role="parse-test">my:one-argument-function((1, 2,
			3))</code> denotes a <phrase diff="add">static</phrase> function call with one argument that is a sequence of three
			 values. </p></item><item><p> 
                        <code role="parse-test">my:one-argument-function(( ))</code> denotes a <phrase diff="add">static</phrase> function call with one argument that is an empty sequence.</p></item><item><p> 
                        <code role="parse-test">my:zero-argument-function( )</code> denotes a <phrase diff="add">static</phrase> function call with zero arguments.</p></item></ulist><div4 id="id-eval-function-call"><head diff="chg">Evaluating <phrase diff="add">Static and Dynamic</phrase> Function Calls <phrase diff="del">and Dynamic Function Invocation</phrase>
                  </head><p diff="del">The result of a function call on a function or <termref def="dt-dynamic-function-invocation">dynamic function invocation</termref> on a <xtermref spec="DM30" ref="dt-function-item">function item</xtermref> 
                     <code>$f</code>
(including  <termref def="dt-partial-function-application">partial function applications</termref>) is calculated as follows:</p><p diff="add">
    When a static or dynamic function call <var>FC</var> is evaluated
    with respect to <phrase diff="add">a static context <var>SC</var> and</phrase>
    a dynamic context <var>DC</var>,
    the result is obtained as follows:
  </p><olist><item diff="add"><p>
                           <termdef term="arity" id="dt-argumentlist-arity">
        The number of <code>Argument</code>s
        in an <code>ArgumentList</code>
        is its <term>arity</term>.
      </termdef>
                        </p></item><item diff="add"><p>
      The function to be called or partially applied
      (call it <var>F</var>)
      is obtained as follows:
    </p><olist><item><p>
          If <var>FC</var> is a static function call:
          Using
          the expanded QName corresponding to <var>FC</var>'s <code>EQName</code>,
          <!-- obtained during static analysis -->
          and
          the arity of <var>FC</var>'s <code>ArgumentList</code>,
          the corresponding function
          is looked up
          in the <termref def="dt-named-functions">named functions</termref> component
          of <var>DC</var>.
          Let <var>F</var> denote the function obtained.
          <!-- It must exist, otherwise static analysis would have raised XPST0017. -->
        </p></item><item><p>
          If <var>FC</var> is a dynamic function call:
          <var>FC</var>'s base expression is evaluated with respect to <phrase diff="add">
                                    <var>SC</var> and</phrase> 
                                 <var>DC</var>.
          If this yields a sequence consisting of a single function
          with the same arity as the arity of the <code>ArgumentList</code>,
          let <var>F</var> denote that function.
          Otherwise, a type error is raised
          <errorref class="TY" code="0004"/>.

	  <phrase diff="del">If <var>F</var> is a  <xtermref spec="FO30" ref="dt-context-dependent">context-dependent</xtermref> built-in function, a <termref def="dt-dynamic-error">dynamic error</termref> is raised  <errorref class="DY" code="0130"/>.</phrase>
                              </p></item></olist></item><item><p>
                           <termdef term="argument value" id="dt-arg-value">
                              <termref def="dt-arg-expr">Argument expressions</termref> are evaluated <phrase diff="add">with respect to <var>DC</var>
                              </phrase>, producing <term>argument
			 values</term>.</termdef> The order of argument evaluation is <termref def="dt-implementation-dependent">implementation-dependent</termref> and a function need not evaluate an argument if the function can evaluate its body without evaluating that argument.</p></item><item><p>
      Each argument value is converted
      <phrase diff="add">
       to the corresponding parameter type in <var>F</var>'s signature
      </phrase>
      by applying the
			<termref def="dt-function-conversion">function conversion rules</termref>,
      <phrase diff="add">
       resulting in a <term>converted argument value</term>.
      </phrase>
                        </p><p diff="del">
      If the value of any <termref def="dt-arg-expr">argument expression</termref> specified to a partial function application
      cannot be converted to the required type of the corresponding argument of <code>$f</code> by applying the
      <termref def="dt-function-conversion">function conversion rules</termref>,
      then a type error <errorref class="TY" code="0004"/>
                           <phrase role="xpath">MAY</phrase>
      be raised.
      (If a type error is not raised at this stage, it will be raised later when the new function is invoked.)
    </p></item><item><p diff="add">
      The remainder depends on whether or not <var>FC</var>
      is a <termref def="dt-partial-function-application">partial function application</termref>.
    </p><olist><item><p diff="add">
          If <var>FC</var> is a partial function application:
        </p><olist><item diff="add"><p>
                                       <termdef term="fixed position" id="dt-fixed-position">
                In a partial function application,
                a <term>fixed position</term>
                is an argument/parameter position
                for which the <code>ArgumentList</code>
                has an argument expression
                (as opposed to an <code>ArgumentPlaceholder</code>).
              </termdef>
              (Note that a partial function application
              need not have any fixed positions.)
            </p></item><item><p>
              A <phrase diff="del">single</phrase>
                                       <phrase diff="add">new</phrase>
              function<phrase diff="del"> item</phrase>
                                       <phrase diff="del">
                                          <code>$new</code>
                                       </phrase>
              is returned
              <phrase diff="add">(as the value of <var>FC</var>),</phrase>
              with the following properties
              (as defined in <xspecref spec="DM30" ref="function-items"/>):
            </p><ulist><item><p>
                                             <phrase diff="add">
                                                <term>name</term>:</phrase>
                                             <phrase diff="del">
                    An absent name.
                  </phrase>
                                             <phrase diff="add">
                    Absent.
                  </phrase>
                                          </p></item><item diff="add"><p>
                                             <term>parameter names</term>:
                  The parameter names of <var>F</var>,
                  removing the parameter names at the fixed positions.
                  (So the function's arity is
                  the arity of F
                  minus
                  the number of fixed positions.)
                </p></item><item><p>
                                             <phrase diff="add">
                                                <term>signature</term>:</phrase>
                                             <phrase diff="del">
                  The <xtermref spec="DM30" ref="dt-signature">function signature</xtermref> of <code>$new</code> is the same as <code>$f</code>,
                  removing the parameters in the positions for which any <termref def="dt-arg-expr">argument expressions</termref> have been provided to the partial
                  function application. The function arity of <code>$new</code> is the arity of <code>$f</code> minus the number of argument expressions provided.
                  </phrase>
                                             <phrase diff="add">
                  The signature of <var>F</var>,
                  removing the parameter type
                  at each of the fixed positions.
                  </phrase>
                                          </p></item><item><p>
                                             <phrase diff="add">
                                                <term>implementation</term>:</phrase>
                                             <phrase diff="del">
                  A function implementation which invokes <code>$f</code>
                  with the argument expressions from the invocation of <code>$new</code>, inserting any <termref def="dt-arg-value">argument values</termref> from
                  the partial function application in their respective positions.
                  </phrase>

                                             <phrase diff="add">
                  The implementation of <var>F</var>
                                                <phrase diff="add">,
		  associated with the same contexts as in <var>F</var>. If these contexts are absent in <var>F</var>, it is associated with <var>SC</var> and <var>DC</var>.</phrase>
                                             </phrase>

                                          </p></item><item><p>
                                             <phrase diff="add">
                                                <term>nonlocal variable bindings</term>:</phrase>
                                             <phrase diff="del">
                  An empty set of variable values.
                  </phrase>
                                             <phrase diff="add">
                  The nonlocal variable bindings of <var>F</var>,
                  plus, for each fixed position,
                  a binding of the converted argument value
                  to the corresponding parameter name.
                  </phrase>
                                          </p></item></ulist><p diff="del">
              The static context for evaluation of the function item <code>$f</code> is inherited from the location of the partial function application expression,
              with the exception of the static type of the context item which is initially <phrase diff="del">undefined</phrase>
                                       <xtermref spec="DM30" ref="dt-absent" diff="add"/>.
            </p><p diff="del">
              Partially applied function items cannot access the <termref def="dt-focus">focus</termref> (context item, context position, and
              context size), which is <phrase diff="del">undefined</phrase>
                                       <xtermref spec="DM30" ref="dt-absent" diff="add"/> when they are <xtermref spec="DM30" ref="dt-invoke">invoked</xtermref>.
            </p></item></olist></item><item><p diff="add">
          If <var>FC</var> is not a partial function application:
        </p><olist><item diff="del"><p>
              If <code>$f</code> is a built-in function, it is evaluated using the converted argument values.
              The result is either an instance of the function's declared return type or a dynamic error.
              Errors raised by built-in functions are defined in <bibref ref="xpath-functions-30"/>.
            </p></item><item diff="add"><p>
              If <var>F</var>'s implementation is
              <termref def="dt-implementation-dependent">implementation-dependent</termref>
              (e.g., it is a built-in function or external function
              <phrase role="xpath">or host-language-dependent function</phrase>,
              or a partial application of such a function):
              <!-- or a coercion of such a function?? -->
            </p><ulist><item><p>
                                             <var>F</var>'s implementation is invoked with the
                  converted argument values <phrase diff="add">using the contexts it is
                  associated with in <var>F</var>. If these contexts
                  are absent in <var>F</var>, it is associated with
                  <var>SC</var> and <var>DC</var>.</phrase>
                                          </p></item><item><p>
                  The result is either an instance of <var>F</var>'s return type
                  or a dynamic error.
                  This result is then the result of evaluating <var>FC</var>.
                </p></item><item><p>
                  Errors raised by built-in functions are defined in
                  <bibref ref="xpath-functions-30"/>.
                </p></item><item><p>
                  Errors raised by external functions are
                  <termref def="dt-implementation-defined">implementation-defined</termref>
                  (see <specref ref="id-consistency-constraints"/>).
                </p></item><item role="xpath"><p>
                  Errors raised by host-language-dependent functions <phrase diff="add">are</phrase>
                                             <termref def="dt-implementation-defined">implementation-defined</termref>.
                </p></item></ulist></item><item diff="del"><p>
              If <code>$f</code> is an <termref def="dt-inline-func">inline function</termref>
              , the
              converted argument values are bound to the formal
              parameters of <code>$f</code>, and the function body is
              evaluated. The value returned by the function body is
              then converted to the declared return type of
              <code>$f</code> by applying the <termref def="dt-function-conversion">function conversion
              rules</termref>.
            </p></item><item><p diff="add">
              If <var>F</var>'s implementation is a <code>FunctionBody</code>:
            </p><olist><item><p diff="del">
		  The <code>FunctionBody</code>'s static and dynamic contexts are  augmented as follows:
                </p><p diff="add">
		  The  <code>FunctionBody</code> is evaluated.

		  The dynamic context for this evaluation is obtained
		  by taking the dynamic context of the 
		  <phrase role="xpath">
                                                <code>InlineFunctionExpr</code>
                                             </phrase>
		  that contains the <code>FunctionBody</code>, and
		  making the following changes:
		</p><ulist><item diff="del"><p>
                      The static context of the <code>FunctionBody</code>
                      is as defined in
		      
                      <specref ref="id-inline-func"/>.
                    </p></item><item><p>
                                                   <phrase diff="del">
                      During evaluation of
                      a function body,
                      </phrase>
                      The <termref def="dt-focus">focus</termref>
                      (context item, context position, and context size)
                      is <phrase diff="del">undefined</phrase>
                                                   <xtermref spec="DM30" ref="dt-absent" diff="add"/>.
                      <phrase diff="del">
                      except where it is defined by some expression inside the function body.
                      </phrase>
                                                </p></item><item><p diff="add">
                      In the <termref def="dt-variable-values">variable values</termref> component of the dynamic context,
                      each converted argument value is bound to the
                      corresponding parameter name.
                    </p><p>
                      When
                      <phrase diff="del">
                        a converted argument value
                        is bound to a function parameter,
                      </phrase>
                                                   <phrase diff="add">
                        this is done,
                      </phrase>
                      the <phrase diff="add">converted</phrase> argument value retains
                      its most specific
                      <termref def="dt-dynamic-type">dynamic type</termref>,
                      even though this type
                      may be derived from the type of the formal parameter.
                      For example, a function with
                      a parameter <code>$p</code> of type <code>xs:decimal</code>
                      can be invoked with an argument of type <code>xs:integer</code>,
                      which is derived from <code>xs:decimal</code>.
                      During the processing of this function
                      <phrase diff="del">invocation</phrase>
                                                   <phrase diff="add">call</phrase>,
                      the <termref def="dt-dynamic-type">dynamic type</termref>
                      of <code>$p</code> inside the body of the function
                      is considered to be <code>xs:integer</code>.
                    </p></item><item diff="del"><p>
                      If <code>$f</code> is a
                      <xtermref spec="DM30" ref="dt-function-item">function item</xtermref>,
                      then the set of variable values
                      from the function item's
                      <xtermref spec="DM30" ref="dt-closure">closure</xtermref>
                      are added to the dynamic context
                      with a scope of the invocation of the function.
                    </p></item><item diff="add"><p>
                      F's nonlocal variable bindings
                      are also added to the <termref def="dt-variable-values">variable values</termref>.
                      (Note that the names of the nonlocal variables
                      are by definition disjoint from the parameter names,
                      so there can be no conflict.)
                    </p></item><item diff="del"><p>
                                                   <termref def="dt-named-functions">Named functions</termref>:
                      This is set to
                      the named functions
                      of the module containing the FunctionBody.
                    </p></item><item diff="del"><p>
                      
                                                   <termref def="dt-date-time">Current dateTime</termref>,
                      <termref def="dt-timezone">Implicit timezone</termref>,
                      <termref def="dt-available-docs">Available documents</termref>,
                      <termref def="dt-available-collections">Available node collections</termref>, 
		      <termref def="dt-available-text-resources" diff="add">Available text resources</termref>,
                      <termref def="dt-default-collection">Default node collection</termref>, 
                      <termref def="dt-available-resource-collections">Available resource collections</termref> and
                      <termref def="dt-default-resource-collection">Default resource collection</termref>:
                      These are set the same as for
                      the evaluation of the <code>QueryBody</code> of the main module.
                    </p></item></ulist><p diff="del">
                  <!-- Ghislain suggests removing this para: -->
                  <phrase diff="add">Note that,</phrase>
                  during evaluation of a function body, the
                  <termref def="dt-static-context">static context</termref> and
                  <termref def="dt-dynamic-context">dynamic context</termref>
                  for expression evaluation are,
                  <phrase diff="add">
                  with the exception of the values bound to parameters,
                  </phrase>
                                             <phrase diff="del">defined by</phrase>
                                             <phrase diff="add">determined by</phrase>
                  the
                  
                  expression
                  in which the
                  <phrase diff="del">function is declared,</phrase>
                                             <phrase diff="add">function body appears,</phrase>
                  which is not necessarily the same as
                  the context in which the function is called.
                  For example, the variables in scope while evaluating a function body
                  are defined by the in-scope variables where it is declared,
                  rather than those in scope where the function is called.
                </p></item><item><p diff="add">
                  The value returned by evaluating the function body
                  is then converted to the declared return type of <var>F</var>
                  by applying the
                  <termref def="dt-function-conversion">function conversion rules</termref>.
                  The result is then the result of evaluating <var>FC</var>.
                </p><p>
                                             <phrase diff="del">Similarly,</phrase>
                                             <phrase diff="add">As with argument values,</phrase>
                  the value returned by a function
                  retains its most specific type,
                  which may be derived from the declared return type of <var diff="chg">F</var>.
                  For example, a function that has
                  a declared return type of <code>xs:decimal</code>
                  may in fact return a value of dynamic type <code>xs:integer</code>.
                </p></item></olist></item></olist></item></olist></item></olist></div4><div4 id="id-function-conversion-rules"><head>Function Conversion Rules</head><p>
                     <termdef term="function conversion rules" id="dt-function-conversion">The <term>function conversion rules</term> are used to convert an
		argument value  to its expected type; that is, to
		the declared type of the function <phrase role="xpath">parameter.</phrase>
                     </termdef> The expected type is expressed as a <termref def="dt-sequence-type">sequence type</termref>. The function conversion rules are applied to a given value
		as follows:</p><ulist><item role="xpath"><p>
                           <phrase diff="add">In a static function call,</phrase> if  <termref def="dt-xpath-compat-mode">XPath
  1.0 compatibility mode</termref> is <code>true</code> and an
  argument <phrase diff="add">of a static function</phrase> is not of
  the expected type, then the following conversions are applied
  sequentially to the argument value V:</p><olist><item><p>If the expected type calls for a single item or optional single item (examples: <code>xs:string</code>, <code>xs:string?</code>, <code>xs:untypedAtomic</code>, <code>xs:untypedAtomic?</code>, <code>node()</code>, <code>node()?</code>, <code>item()</code>, <code>item()?</code>), then the value V is effectively replaced by V[1].</p></item><item><p>If the expected type is
		<code>xs:string</code> or <code>xs:string?</code>,
		then the  value <code>V</code> is effectively
		replaced by
		<code>fn:string(V)</code>.</p></item><item><p>If
		the expected type is <code>xs:double</code> or <code>xs:double?</code>, then the value <code>V</code> is effectively replaced by
		<code>fn:number(V)</code>.</p></item></olist><note diff="add"><p>
                              <termref def="dt-xpath-compat-mode">XPath 1.0 compatibility
    mode</termref> has no effect on dynamic function calls,
    converting the result of an inline function to its required type,
    partial function application, or implicit function calls that
    occur when evaluating functions such as fn:for-each and fn:filter.</p></note></item><item><p diff="chg">If the expected type is a sequence of a <termref def="dt-generalized-atomic-type">generalized atomic type</termref> (possibly with an occurrence indicator <code>*</code>, <code>+</code>, or <code>?</code>), the following conversions are applied:</p><olist><item><p>
                                 <termref def="dt-atomization">Atomization</termref> is applied
		to the given value, resulting in a sequence of atomic
		values.</p></item><item><p>Each item in the atomic
		sequence that is of type
		<code>xs:untypedAtomic</code> is cast to the expected <phrase diff="add">generalized</phrase>
		atomic type. For <termref def="dt-built-in-function">built-in functions</termref> where the expected type is specified as <termref def="dt-numeric">numeric</termref>, arguments of type <code>xs:untypedAtomic</code> are cast to <code>xs:double</code>. <phrase diff="add">If the item is of type <code>xs:untypedAtomic</code> and the expected type is <termref def="dt-namespace-sensitive">namespace-sensitive</termref>, a <termref def="dt-type-error">type error</termref> 
                                    <errorref class="TY" code="0117"/> is raised.</phrase>
                              </p></item><item><p>For each <termref def="dt-numeric">numeric</termref> item
		in the atomic sequence that can be
		<termref def="dt-type-promotion">promoted</termref> to the expected atomic type
		using numeric promotion as described in <specref ref="promotion"/>, the promotion is
		done.</p></item><item><p>For each item of type <code>xs:anyURI</code>
		in the atomic sequence that can be
		<termref def="dt-type-promotion">promoted</termref> to the expected atomic type
		using URI promotion as described in <specref ref="promotion"/>, the promotion is
		done.</p></item></olist></item><item><p>If the
		expected type is a <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TypedFunctionTest" xlink:type="simple">TypedFunctionTest</nt> (possibly with an occurrence indicator <code>*</code>,
		<code>+</code>, or <code>?</code>), <termref def="dt-function-item-coercion">function<phrase diff="del"> item</phrase> coercion</termref> is applied to each function<phrase diff="del"> item</phrase> in the given value.</p></item><item><p> If, after the
		above conversions, the resulting value does not match
		the expected type according to the rules for <termref def="dt-sequencetype-matching">SequenceType
		Matching</termref>, a <termref def="dt-type-error">type error</termref> is
		raised <errorref class="TY" code="0004"/>.
		
		Note that the rules for <termref def="dt-sequencetype-matching">SequenceType
		Matching</termref> permit a value of a derived type to
		be substituted for a value of its base
		type. </p></item></ulist></div4><div4 id="id-function-coercion"><head>Function<phrase diff="del"> Item</phrase> Coercion</head><p>
        Function<phrase diff="del"> item</phrase> coercion is a transformation applied to <xtermref diff="chg" spec="DM30" ref="dt-function-item">functions</xtermref> during application of the
        <termref def="dt-function-conversion">function conversion rules</termref>.
        <termdef term="function coercion" id="dt-function-item-coercion">
                        <term>Function<phrase diff="del"> item</phrase> coercion</term> wraps a <xtermref diff="chg" spec="DM30" ref="dt-function-item">function</xtermref>
        in a new <phrase diff="del">inline</phrase> function
        with signature the same as the expected type.
        This effectively delays the checking
        of the argument and return types
        until the function<phrase diff="del"> item</phrase> is invoked.</termdef>
                  </p><p>
        Function<phrase diff="del"> item</phrase> coercion
        is only defined to operate on
        <xtermref diff="chg" spec="DM30" ref="dt-function-item">functions</xtermref>.
        Given a function<phrase diff="del"> item</phrase>
                     <phrase diff="del">
                        <code>$function</code>
                     </phrase>
                     <phrase diff="add">
                        <var>F</var>
                     </phrase>,
	<phrase diff="add">and an expected function type</phrase>,
        function<phrase diff="del"> item</phrase> coercion
	<phrase diff="add">
	proceeds as follows:
	If <var>F</var> and the expected type have different arity,
	a type error is raised
        <errorref class="TY" code="0004"/>.
	Otherwise, coercion
	</phrase>
        returns a new function<phrase diff="del"> item</phrase>
        with the following properties
        (as defined in <xspecref spec="DM30" ref="function-items"/>):

        <ulist><item><p>
                              <phrase diff="add">
                                 <term>name</term>:</phrase>
            The name of 
            <phrase diff="del">
                                 <code>$function</code>
                              </phrase>
                              <phrase diff="add">
                                 <var>F</var>
                              </phrase>.
          </p></item><item diff="add"><p>
                              <term>parameter names</term>:
	      The parameter names of <var>F</var>.
            </p></item><item><p>
                              <phrase diff="add">
                                 <term>signature</term>:</phrase>
                              <phrase diff="del">
            A <xtermref spec="DM30" ref="dt-signature">function signature</xtermref> equal to the expected type for the function argument or return type.
            </phrase>
                              <phrase diff="add">
                                 <code>Annotations</code> is set to the annotations of <var>F</var>. <code>TypedFunctionTest</code> is set to the expected type.
            </phrase>
                           </p></item><item><p>
                              <phrase diff="add">
                                 <term>implementation</term>:</phrase>
                              <phrase diff="del">
            A function implementation whose result is calculated by
            invoking 
            <code>$function</code>
            with the arguments that were specified at the new
            function's invocation.
            </phrase>
                              <phrase diff="add">
            In effect,
            a <code>FunctionBody</code> that calls <var>F</var>,
            passing it the parameters of this new function,
            in order.
            </phrase>
                           </p></item><item><p>
                              <phrase diff="add">
                                 <term>nonlocal variable bindings</term>:</phrase>
                              <phrase diff="del">An empty set of variable values.</phrase>
                              <phrase diff="add">An empty mapping.</phrase>
                           </p></item></ulist>
                  </p><p>
        If the result of invoking the new function<phrase diff="del"> item</phrase> would
        necessarily result in a type error, that
        error may be raised during
        function coercion. It is implementation dependent whether this
        happens or not.
      </p><p>
        These rules have the following consequences:

        <ulist><item><p>
            SequenceType matching of the function<phrase diff="del"> item</phrase>'s arguments and result are delayed until that function<phrase diff="del"> item</phrase> is invoked.
          </p></item><item><p>
            The function conversion rules applied to the function<phrase diff="del"> item</phrase>'s arguments and result are defined by the SequenceType
            it has most recently been coerced to. Additional function conversion rules could apply when the wrapped function
            <phrase diff="del">item</phrase> is invoked.
          </p></item><item><p>
            If an implementation has static type information about a function<phrase diff="del"> item</phrase>, that can be used to type check the
            function<phrase diff="del"> item</phrase>'s argument and return types during static analysis.
          </p></item></ulist>

        For instance, consider the following query:
      </p><eg role="parse-test" xml:space="preserve">
declare function local:filter($s as item()*, $p as function(xs:string) as xs:boolean) as item()*
{
  $s[$p(.)]
};

let $f := function($a) { starts-with($a, "E") }
return
  local:filter(("Ethel", "Enid", "Gertrude"), $f)
      </eg><p>
        The function<phrase diff="del"> item</phrase> 
                     <code>$f</code> has a static type of <code>function(item()*) as item()*</code>. When the <code>local:filter()</code> function
        is called, the following occurs to the function<phrase diff="del"> item</phrase>:

        <olist><item><p>
            The function conversion rules result in applying function coercion to 
            <code>$f<phrase diff="del">unction</phrase>
                              </code>,
            wrapping $f in a new <phrase diff="del">inline</phrase> function ($p)
            with the signature <code>function(xs:string) as xs:boolean</code>.
          </p></item><item><p>
            $p is matched against the SequenceType of <code>function(xs:string) as xs:boolean</code>, and succeeds.
          </p></item><item><p>
            When $p is invoked inside the predicate, function conversion and SequenceType matching rules are applied to the context item argument,
            resulting in an <code>xs:string</code> value or a type error.
          </p></item><item><p>
            $f is invoked with the <code>xs:string</code>, which returns an <code>xs:boolean</code>.
          </p></item><item><p>
            $p applies function conversion rules to the result sequence from $f, which already matches its declared return type of <code>xs:boolean</code>.
          </p></item><item><p>
            The <code>xs:boolean</code> is returned as the result of $p.
          </p></item></olist>
                  </p><note><p>
        Although the semantics of function<phrase diff="del"> item</phrase> coercion are specified in terms of wrapping the function<phrase diff="del"> item</phrase>s,
        static typing will often be able to reduce the number of places where this is actually necessary.
      </p></note></div4><div4 id="id-partial-function-application" diff="del"><head>Evaluating Partial Function Applications</head><p>The result of a <termref def="dt-partial-function-application">partial function application</termref> of a function or
  <xtermref spec="DM30" ref="dt-function-item">function item</xtermref> 
                     <code>$f</code> is computed as follows:</p><p>...</p></div4></div3><!-- ******************************************************************** --><div3 id="id-named-function-ref"><head>
                  <phrase diff="chg">Named Function References</phrase>
               </head><scrap headstyle="show"><head/><prod num="63" id="doc-xpath30-NamedFunctionRef"><lhs>NamedFunctionRef</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EQName" xlink:type="simple">EQName</nt>  "#"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-IntegerLiteral" xlink:type="simple">IntegerLiteral</nt>
                     </rhs></prod><prod num="94" id="noid_d3e9632.doc-xpath30-EQName"><lhs>EQName</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-QName" xlink:type="simple">QName</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-URIQualifiedName" xlink:type="simple">URIQualifiedName</nt>
                     </rhs></prod></scrap><p>
                  <termdef term="named function reference" id="dt-named-function-ref">A <term>
                        <phrase diff="del">literal function item</phrase>
                        <phrase diff="add">named function reference</phrase>
                     </term>
	                    <phrase diff="del">
	  creates a
          <xtermref spec="DM30" ref="dt-function-item">function item</xtermref>
	  that represents
	  </phrase>
	                    <phrase diff="add">denotes</phrase>
          a <termref def="dt-named-func">named function</termref>.</termdef>
                  <termdef term="named function" id="dt-named-func">A <term>named function</term> is a function defined in the
          static context for the <phrase role="xpath">expression</phrase>. To uniquely identify a particular named function, both its name as an <phrase diff="add">expanded</phrase> QName
          and its arity are required.</termdef>
               </p><p>If the EQName is a <termref def="dt-qname">lexical QName</termref> that has no namespace prefix, it is considered to be in the default function namespace.</p><p>If the <termref def="dt-expanded-qname">expanded QName</termref> and arity in a <phrase diff="del">literal function item</phrase>
                  <phrase diff="add">named function reference</phrase> do not match the name and arity of a function signature in the
          static context, a static error is raised <errorref class="ST" code="0017"/>.</p><p diff="del">The result of a <phrase diff="del">literal function item</phrase>
                  <phrase diff="add">named function reference</phrase> is a single function item with the following properties (as defined in <xspecref spec="DM30" ref="function-items"/>):

          <ulist><item><p>
              An empty set of variable values.
            </p></item><item><p>
              The name specified in the <phrase diff="del">literal function item</phrase>
                           <phrase diff="add">named function reference</phrase>.
            </p></item><item><p>
              The <xtermref spec="DM30" ref="dt-signature">function signature</xtermref> of the function from the static context that matches the name and arity given.
            </p></item><item><p>
              The implementation of the function from the static context that matches the name and arity given.
            </p></item></ulist>

               </p><p diff="add">
            The value of a <code>NamedFunctionRef</code>
            is the function obtained by looking up
            the expanded QName and arity
            in the <termref def="dt-named-functions">named functions</termref> component
            of the dynamic context.
            <!-- We're guaranteed that such a function exists,
            because if it didn't,
            a static error would already have been raised. -->
          </p><p diff="add">
	    Furthermore, if the function referenced by a
	    <code>NamedFunctionRef</code> has an implementation-dependent
	    implementation, then the implementation of the function
	    returned by the <code>NamedFunctionRef</code> is associated with the
	    static context of this <code>NamedFunctionRef</code> expression and to
	    the dynamic context in which it is currently being
	    evaluated.

	    <phrase diff="del">
	    If the function referenced by a <code>NamedFunctionRef</code> is a
            <xtermref spec="FO30" ref="dt-context-dependent">context-dependent</xtermref>
	    built-in function
            <errorref class="ST" code="0112"/>.</phrase>
               </p><p diff="del">
            It is a static error if the function
            referenced by a <code>NamedFunctionRef</code> is a
            <xtermref spec="FO30" ref="dt-context-dependent">context-dependent</xtermref>
	    built-in function
            <errorref class="ST" code="0112"/>. 
          </p><p>
            Certain functions in the <bibref ref="xpath-functions-30"/> specification are defined to be polymorphic.
            These are denoted as accepting parameters of "numeric" type, or returning "numeric" type. Here "numeric" is a pseudonym
            for the four primitive numeric types xs:decimal, xs:integer, xs:float, and xs:double. <phrase diff="del">The functions in question
            are:</phrase>
                  <ulist diff="del"><item><p>
                           <code>fn:abs</code>
                        </p></item><item><p>
                           <code>fn:ceiling</code>
                        </p></item><item><p>
                           <code>fn:floor</code>
                        </p></item><item><p>
                           <code>fn:round</code>
                        </p></item><item><p>
                           <code>fn:round-half-to-even</code>
                        </p></item></ulist>

            For the purposes of <phrase diff="del">literal function<phrase diff="del"> item</phrase>s</phrase>
                  <phrase diff="add">named function references</phrase>, these functions are regarded as taking arguments and producing results
            of type xs:anyAtomicType, with a type error raised at runtime if the argument value provided is not of the correct
            numeric type.
          </p><note><p>
            The above way of modeling polymorphic functions is semantically backwards compatible with <phrase role="xpath">XPath 2.0</phrase>.
            An implementation that supports static typing can choose to model the types of these functions more accurately if
            desired.
          </p></note><p>The following are examples of <phrase diff="del">literal function<phrase diff="del"> item</phrase> expressions</phrase>
                  <phrase diff="add">named function references</phrase>:
          </p><ulist><item><p>
                        <code role="parse-test">fn:abs#1</code> references the fn:abs function which takes a single argument.</p></item><item><p>
                        <code role="parse-test">fn:concat#5</code> references the fn:concat function which takes 5 arguments.</p></item><item><p>
                        <code role="parse-test">local:myfunc#2</code> references a function named local:myfunc which takes 2 arguments.</p></item></ulist></div3><div3 id="id-inline-func"><head>Inline Function<phrase diff="add"> Expression</phrase>s</head><scrap headstyle="show"><head/><prod num="64" id="doc-xpath30-InlineFunctionExpr"><lhs>InlineFunctionExpr</lhs><rhs>"function"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ParamList" xlink:type="simple">ParamList</nt>?  ")"  ("as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SequenceType" xlink:type="simple">SequenceType</nt>)?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-FunctionBody" xlink:type="simple">FunctionBody</nt>
                     </rhs></prod><prod num="2" id="noid_d3e9858.doc-xpath30-ParamList"><lhs>ParamList</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Param" xlink:type="simple">Param</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Param" xlink:type="simple">Param</nt>)*</rhs></prod><prod num="3" id="noid_d3e9859.doc-xpath30-Param"><lhs>Param</lhs><rhs>"$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EQName" xlink:type="simple">EQName</nt>  
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?</rhs></prod><prod num="66" id="noid_d3e9860.doc-xpath30-TypeDeclaration"><lhs>TypeDeclaration</lhs><rhs>"as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SequenceType" xlink:type="simple">SequenceType</nt>
                     </rhs></prod><prod num="5" id="noid_d3e9861.doc-xpath30-EnclosedExpr"><lhs>EnclosedExpr</lhs><rhs>"{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Expr" xlink:type="simple">Expr</nt>  "}"</rhs></prod><prod num="4" id="noid_d3e9862.doc-xpath30-FunctionBody"><lhs>FunctionBody</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-EnclosedExpr" xlink:type="simple">EnclosedExpr</nt>
                     </rhs></prod></scrap><p>
                  <termdef term="inline function expression" id="dt-inline-func">An <term>inline function expression</term> creates
          an anonymous
          <xtermref diff="chg" spec="DM30" ref="dt-function-item">function</xtermref>
          defined directly in the
          inline function expression itself.</termdef> An inline function <phrase diff="add">expression</phrase> specifies the names and SequenceTypes of the parameters to the function,
          the SequenceType of the result, and the body of the function.
          </p><p>
          If a function parameter is declared using a name but no type, its default type is item()*. If the result type is omitted from an inline function expression, its default result type is item()*.
          </p><p diff="add">
          The parameters of an inline function expression are considered to be variables whose scope is the function body. It is a static error
          <errorref class="ST" code="0039"/> for an inline function expression to have more than one parameter with the same name.
          </p><p>
          The static context for the function body is inherited from the location of the inline function expression, with the exception of the
          static type of the context item which is initially <xtermref spec="DM30" ref="dt-absent"/>.
          </p><p>
          The variables in scope for the function body include all variables representing the function parameters, as well as all variables that
          are in scope for the inline function expression.

          <note><p>
            Function parameter names can mask variables that would otherwise be in scope for the function body.
          </p></note>
               </p><p>The result of an inline function <phrase diff="add">expression</phrase> is a single function<phrase diff="del"> item</phrase> with the following properties (as defined in <xspecref spec="DM30" ref="function-items"/>):

          <ulist><item><p>
                           <phrase diff="add">
                              <term>name</term>:</phrase>
                           <phrase diff="del">
              An absent name.
              </phrase>
                           <phrase diff="add">
              Absent.
              </phrase>
                        </p></item><item diff="add"><p>
                           <term>parameter names</term>:
              The parameter names in
              the <code>InlineFunctionExpr</code>'s
              <code>ParamList</code>.
            </p></item><item><p>
                           <phrase diff="add">
                              <term>signature</term>:</phrase>
                           <phrase diff="del">
              The <xtermref spec="DM30" ref="dt-signature">function signature</xtermref> of the inline function.
              </phrase>
                           <phrase diff="add">
              A <code>FunctionTest</code>
              constructed from the
               
	      <code>SequenceType</code>s in the <code>InlineFunctionExpr</code>.
              </phrase>
                        </p></item><item><p>
                           <phrase diff="add">
                              <term>implementation</term>:</phrase>
                           <phrase diff="del">
              An implementation derived from the body of the inline function.
              </phrase>
                           <phrase diff="add">
              The <code>InlineFunctionExpr</code>'s <code>FunctionBody</code>.
              </phrase>
                        </p></item><item><p>
                           <phrase diff="add">
                              <term>nonlocal variable bindings</term>:</phrase>
                           <phrase diff="del">
              The set of variable values for any variables referenced by the inline function's body.
              </phrase>
                           <phrase diff="add">
              For each nonlocal variable,
              a binding of it to its value in the
              <termref def="dt-variable-values">variable values</termref> component
              of the dynamic context of the <code>InlineFunctionExpr</code>.
              </phrase>
                        </p></item></ulist>

               </p><p>The following are examples of some inline function<phrase diff="add"> expression</phrase>s:</p><ulist><item><p>This example creates a<phrase diff="del">n inline</phrase> function that takes no arguments and returns a sequence of the first 6 primes:
                <eg role="parse-test" xml:space="preserve">function() as xs:integer+ { 2, 3, 5, 7, 11, 13 }</eg>
                     </p></item><item><p>This example creates a<phrase diff="del">n inline</phrase> function that takes two xs:double arguments and returns their product:
                <eg role="parse-test" xml:space="preserve">function($a as xs:double, $b as xs:double) as xs:double { $a * $b }</eg>
                     </p></item><item><p>This example creates a<phrase diff="del">n inline</phrase> function that returns its item()* argument:
                <eg role="parse-test" xml:space="preserve">function($a) { $a }</eg>
                     </p></item><item><p>This example creates a sequence of function<phrase diff="del"> item</phrase>s each of which returns a
different node from the default collection.

                <eg role="parse-test" xml:space="preserve">collection()/(let $a := . return function() { $a })</eg>
                     </p></item></ulist></div3></div2><div2 id="id-postfix-expression"><head>Postfix Expressions</head><scrap headstyle="show"><head/><prod num="48" id="doc-xpath30-PostfixExpr"><lhs>PostfixExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-PrimaryExpr" xlink:type="simple">PrimaryExpr</nt>  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Predicate" xlink:type="simple">Predicate</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ArgumentList" xlink:type="simple">ArgumentList</nt>)*</rhs></prod><prod num="51" id="noid_d3e10049.doc-xpath30-Predicate"><lhs>Predicate</lhs><rhs>"["  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Expr" xlink:type="simple">Expr</nt>  "]"</rhs></prod><prod num="49" id="noid_d3e10050.doc-xpath30-ArgumentList"><lhs>ArgumentList</lhs><rhs>"("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Argument" xlink:type="simple">Argument</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Argument" xlink:type="simple">Argument</nt>)*)?  ")"</rhs></prod></scrap><p>
               <termdef term="filter expression" id="dt-filter-expression">An
    expression followed by a predicate (that is, <code>E1[E2]</code>)
    is referred to as a <term>filter expression</term>: its effect is
    to return those items from the value of <code>E1</code> that
    satisfy the predicate in E2.</termdef> Filter expressions are
    described in <specref ref="id-filter-expression"/>
            </p><p>An expression (other than a raw EQName) followed by an argument
    list in parentheses (that is, <code>E1(E2, E3, ...)</code>) is
    referred to as a <termref def="dt-dynamic-function-invocation">dynamic function <phrase diff="del">invocation</phrase>
                  <phrase diff="add">call</phrase>
               </termref>. Its
    effect is to evaluate <code>E1</code> to obtain a function<phrase diff="del"> item</phrase>,
    and then call <phrase diff="del">the function represented by</phrase> that function<phrase diff="del"> item</phrase>, with
    <code>E2</code>, <code>E3</code>, <code>...</code> as
    arguments. Dynamic function <phrase diff="del">invocations</phrase>
               <phrase diff="add">calls</phrase> are described in <specref ref="id-dynamic-function-invocation"/>.</p><div3 id="id-filter-expression"><head>Filter Expressions</head><scrap headstyle="show"><head/><prod num="48" id="noid_d3e10117.doc-xpath30-PostfixExpr"><lhs>PostfixExpr</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-PrimaryExpr" xlink:type="simple">PrimaryExpr</nt>  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Predicate" xlink:type="simple">Predicate</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ArgumentList" xlink:type="simple">ArgumentList</nt>)*</rhs></prod><prod num="51" id="doc-xpath30-Predicate"><lhs>Predicate</lhs><rhs>"["  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Expr" xlink:type="simple">Expr</nt>  "]"</rhs></prod></scrap><p>A filter expression consists of a base expression followed by
      a predicate, which is an expression written in square
      brackets. The result of the filter expression consists of the
      items returned by the base expression, filtered by applying the
      predicate to each item in turn. The ordering of the items
      returned by a filter expression is the same as their order in
      the result of the primary expression.</p><note><p>Where the expression before the square brackets is a
      <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ReverseStep" xlink:type="simple">ReverseStep</nt> or <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ForwardStep" xlink:type="simple">ForwardStep</nt>, the expression is technically not a
      filter expression but an <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AxisStep" xlink:type="simple">AxisStep</nt>. There are minor differences
      in the semantics: see <specref ref="id-predicate"/>
                  </p></note><p>Here are some examples of filter expressions:</p><ulist><item><p>Given a sequence of products in a variable, return only those products whose price is greater than 100.</p><eg role="parse-test" xml:space="preserve">$products[price gt 100]</eg></item><item><p>List all the integers from 1 to 100 that are divisible by 5. (See <specref ref="construct_seq"/> for an explanation of the <code>to</code> operator.)</p><eg role="parse-test" xml:space="preserve">(1 to 100)[. mod 5 eq 0]</eg></item><item><p>The result of the following expression is the integer 25:</p><eg role="parse-test" xml:space="preserve">(21 to 29)[5]</eg></item><item><p>The following example returns the fifth through ninth items in the sequence bound to variable <code>$orders</code>.</p><eg role="parse-test" xml:space="preserve">$orders[fn:position() = (5 to 9)]</eg></item><item><p>The following example illustrates the use of a filter expression as a <termref def="dt-step">step</termref> in a <termref def="dt-path-expression">path expression</termref>. It returns the last chapter or appendix within the book bound to variable <code>$book</code>:</p><eg role="parse-test" xml:space="preserve">$book/(chapter | appendix)[fn:last()]</eg></item></ulist><p>For each item in the input sequence, the predicate expression
      is evaluated using an <term>inner focus</term>, defined as
      follows: The context item is the item currently being tested
      against the predicate. The context size is the number of items
      in the input sequence. The context position is the position of
      the context item within the input sequence. </p><p>For each item in the input sequence, the result of the
      predicate expression is coerced to an <code>xs:boolean</code>
      value, called the <term>predicate truth value</term>, as
      described below. Those items for which the predicate truth value
      is <code>true</code> are retained, and those for which the
      predicate truth value is <code>false</code> are discarded.</p><p>The predicate truth value is derived by applying the following rules,
       in order:</p><olist><item><p>If the value of the predicate expression is a <termref def="dt-singleton">singleton</termref> atomic value of a
	   <termref def="dt-numeric">numeric</termref> type or derived
	   from a <termref def="dt-numeric">numeric</termref> type,
	   the predicate truth value is <code>true</code> if the value
	   of the predicate expression is equal (by the
	   <code>eq</code> operator) to the <term>context
	   position</term>, and is <code>false</code>
	   otherwise. <termdef term="numeric predicate" id="dt-numeric-predicate">A predicate whose predicate
	   expression returns a numeric type is called a <term>numeric
	   predicate</term>.</termdef>
                     </p></item><item><p>Otherwise, the predicate truth value is the <termref def="dt-ebv">effective boolean value</termref> of the
	   predicate expression.</p></item></olist></div3><div3 id="id-dynamic-function-invocation"><head>Dynamic Function <phrase diff="add">Call</phrase>
               </head><scrap headstyle="show"><head/><prod num="48" id="noid_d3e10247.doc-xpath30-PostfixExpr"><lhs>PostfixExpr</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-PrimaryExpr" xlink:type="simple">PrimaryExpr</nt>  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Predicate" xlink:type="simple">Predicate</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ArgumentList" xlink:type="simple">ArgumentList</nt>)*</rhs></prod><prod num="49" id="doc-xpath30-ArgumentList"><lhs>ArgumentList</lhs><rhs>"("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Argument" xlink:type="simple">Argument</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Argument" xlink:type="simple">Argument</nt>)*)?  ")"</rhs></prod><prod num="60" id="noid_d3e10249.doc-xpath30-Argument"><lhs>Argument</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ArgumentPlaceholder" xlink:type="simple">ArgumentPlaceholder</nt>
                     </rhs></prod><prod num="61" id="noid_d3e10250.doc-xpath30-ArgumentPlaceholder"><lhs>ArgumentPlaceholder</lhs><rhs>"?"</rhs></prod></scrap><p>
                  <termdef term="dynamic function call" id="dt-dynamic-function-invocation">A <term>dynamic function <phrase diff="del">invocation</phrase>
                        <phrase diff="add">call</phrase>
                     </term>
            consists of a
            <phrase diff="del">PrimaryExpr</phrase>
                     <phrase diff="add">base expression</phrase>
            that returns the function<phrase diff="del"> item</phrase> and a
            parenthesized list of zero or more arguments (<termref def="dt-arg-expr">argument expressions</termref> or
            ArgumentPlaceholders).</termdef>
               </p><p diff="del">If the PrimaryExpr does not return a sequence consisting of a single function item with the same
          arity as the number of specified arguments, a type error is raised <errorref class="TY" code="0004"/>.</p><p diff="del">
            A dynamic function invocation is a
            <termref def="dt-partial-function-application">partial function application</termref> if at least one
            of the arguments is an ArgumentPlaceholder ("?"), and is evaluated according to the rules in
            <specref ref="id-partial-function-application"/>.
          </p><p diff="del">
            A dynamic function invocation that is not a <termref def="dt-partial-function-application">partial function application</termref>
                  <xtermref spec="DM30" ref="dt-invoke">invokes</xtermref> the <xtermref spec="DM30" ref="dt-function-item">function item</xtermref>,
            calling the function it represents, and is evaluated as described in <specref ref="id-eval-function-call"/>.
          </p><p diff="add">
            A dynamic function call
            is evaluated as described in
            <specref ref="id-eval-function-call"/>.
          </p><p>The following are examples of some dynamic function <phrase diff="del">invocations</phrase>
                  <phrase diff="add">calls</phrase>:</p><ulist><item><p>This example invokes the function<phrase diff="del"> item</phrase> contained in $f, passing the arguments 2 and 3:
                <eg role="parse-test" xml:space="preserve">$f(2, 3)</eg>
                     </p></item><item><p>This example fetches the second item from sequence $f, treats it as a function<phrase diff="del"> item</phrase> and invokes it, passing an <code>xs:string</code> argument:
                <eg role="parse-test" xml:space="preserve">$f[2]("Hi there")</eg>
                     </p></item><item><p>This example invokes the function<phrase diff="del"> item</phrase> $f passing no arguments, and filters the result with a positional predicate:
                <eg role="parse-test" xml:space="preserve">$f()[2]</eg>
                     </p></item></ulist></div3></div2><div2 id="id-path-expressions"><head>Path Expressions</head><scrap headstyle="show"><head/><prod num="35" id="doc-xpath30-PathExpr"><lhs>PathExpr</lhs><rhs>("/"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-RelativePathExpr" xlink:type="simple">RelativePathExpr</nt>?)<br/>|  ("//"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-RelativePathExpr" xlink:type="simple">RelativePathExpr</nt>)<br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-RelativePathExpr" xlink:type="simple">RelativePathExpr</nt>
                  </rhs></prod><prod num="36" id="noid_d3e10350.doc-xpath30-RelativePathExpr"><lhs>RelativePathExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-StepExpr" xlink:type="simple">StepExpr</nt>  (("/"  |  "//")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-StepExpr" xlink:type="simple">StepExpr</nt>)*</rhs></prod></scrap><p>
               <termdef id="dt-path-expression" term="path expression">A <term>path expression</term> can be used to locate nodes
	 within trees. A path expression consists of a series of one or more
	 <termref def="dt-step">steps</termref>, separated by "<code>/</code>" or
	 "<code>//</code>", and optionally beginning with
	 "<code>/</code>" or "<code>//</code>".</termdef> An initial
	 "<code>/</code>" or "<code>//</code>" is an abbreviation for
	 one or more initial steps that are implicitly added to the
	 beginning of the path expression, as described below.</p><p>A
	 path expression consisting of a single step is evaluated as
	 described in <specref ref="id-steps"/>.</p><p>A "<code>/</code>"
	 at the beginning of a path expression is an abbreviation for
	 the initial step <code>
                  <phrase diff="chg" at="XQ.E3 and XP.E3">(fn:root(self::node()) treat as document-node())</phrase>/</code> (however, if the
	 "<code>/</code>" is the entire path expression, the trailing "<code>/</code>" is omitted from the expansion.) The effect
	 of this initial step is to begin the path at the root node of
	 the tree that contains the context node. If the context item
	 is not a node, a <termref def="dt-type-error">type
	 error</termref> is raised <errorref class="TY" code="0020"/>. At
	 evaluation time, if the root node above the context node is
	 not a document node, a <termref def="dt-dynamic-error">dynamic error</termref> is
	 raised <errorref class="DY" code="0050"/>.</p><p>A "<code>//</code>" at the beginning of a path expression
	 is an abbreviation for the initial steps
	 <code>
                  <phrase diff="chg" at="XQ.E3 and XP.E3">(fn:root(self::node()) treat as
	 document-node())</phrase>/descendant-or-self::node()/</code> (however, "<code>//</code>" by itself is not a valid path expression <errorref class="ST" code="0003"/>.)  The
	 effect of these initial steps is to establish an initial node
	 sequence that contains the root of the tree in which the
	 context node is found, plus all nodes descended from this
	 root.
	 This node sequence is used as the input to subsequent steps
	 in the path expression. If the context item is not a node, a
	 <termref def="dt-type-error">type error</termref> is
	 raised <errorref class="TY" code="0020"/>. At evaluation time, if the
	 root node above the context node is not a document node, a
	 <termref def="dt-dynamic-error">dynamic error</termref> is
	 raised <errorref class="DY" code="0050"/>.</p><note><p>The descendants of a node do not include attribute
	 nodes<phrase role="xpath"> or namespace nodes</phrase>.</p></note><div3 id="id-relative-path-expressions" diff="add"><head>Relative Path Expressions</head><scrap headstyle="show"><head/><prod num="36" id="doc-xpath30-RelativePathExpr"><lhs>RelativePathExpr</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-StepExpr" xlink:type="simple">StepExpr</nt>  (("/"  |  "//")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-StepExpr" xlink:type="simple">StepExpr</nt>)*</rhs></prod></scrap><p>Relative path expressions are binary operators on step expressions, which are named <code>E1</code> and <code>E2</code> in this section.</p><p>Each non-initial occurrence of "<code>//</code>" in a path expression is
	 expanded as described in <specref ref="abbrev"/>, leaving a
	 sequence of steps separated by <phrase diff="del">either</phrase> "<code>/</code>" <phrase diff="del">or  "<code>!</code>", which have the same precedence</phrase>. This sequence
	 of steps is then evaluated from left to right. Each item produced by the evaluation of <code>E1</code> is used as the <termref def="dt-context-item">context item</termref> to evaluate <code>E2</code>; the sequences resulting from all the evaluations of <code>E2</code> are combined to produce a result.</p><p>The following example illustrates the use of relative path expressions.</p><example><ulist><item><p>
                           <code role="parse-test">child::div1/child::para</code>
                        </p><p>Selects the
	     <code>para</code> element children of the <code>div1</code>
	     element children of the context node; that is, the
	     <code>para</code> element grandchildren of the context node
	     that have <code>div1</code> parents.</p></item></ulist></example><note><p>Since each step in a path provides context nodes for the following step, in effect, only the last step in a path is allowed to return a sequence of non-nodes.</p></note><note><p id="Chg-slash-note">The "<code>/</code>" character
	 can be used either as a complete path expression or as the
	 beginning of a longer path expression such as
	 "<code>/*</code>".  Also, "<code role="parse-test">*</code>"
	 is both the multiply operator and a wildcard in path
	 expressions.  This can cause parsing difficulties when
	 "<code>/</code>" appears on the left-hand side of
	 "<code>*</code>".  This is resolved using the <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#parse-note-leading-lone-slash" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">leading-lone-slash
	 </loc> constraint.  For example, "<code role="parse-test">/*</code>" and "<code role="parse-test">/
	 *</code>" are valid path expressions containing wildcards,
	 but "<code>/*5</code>" and "<code>/ * 5</code>" raise syntax
	 errors. Parentheses must be used when "<code>/</code>" is
	 used on the left-hand side of an operator, as in "<code role="parse-test">(/) * 5</code>". Similarly, "<code>4 + / *
	 5</code>" raises a syntax error, but "<code role="parse-test">4 + (/) * 5</code>" is a valid expression.
	 The expression "<code role="parse-test">4 + /</code>" is also
	 valid, because <code>/</code> does not occur on the left-hand
	 side of the operator.</p><p>Similarly, in the expression <code role="parse-test">/
	 union /*</code>, "union" is interpreted as an element name
	 rather than an operator. For it to be parsed as an operator,
	 the expression should be written <code role="parse-test">(/)
	 union /*</code>.</p></note><div4 id="id-path-operator" diff="add"><head>Path operator (<code>/</code>)</head><p>The path operator "/" is used to build expressions for locating nodes within trees. Its left-hand side expression must return a sequence of nodes. <phrase diff="del">It</phrase>
                     <phrase diff="add">The operator</phrase> returns either a sequence of nodes, in which case it additionally performs document ordering and duplicate elimination, or a sequence of non-nodes.</p><p>Each operation <code>E1/E2</code> is evaluated as follows: Expression <code>E1</code> is evaluated, and if the result is not a (possibly empty) sequence <code>S</code> of nodes, a <termref def="dt-type-error">type error</termref> is raised <errorref class="TY" code="0019"/>. Each node in <code>S</code> then serves in turn to provide an inner focus (the node as the context item, its position in <code>S</code> as the context position, the length of <code>S</code> as the context size) for an evaluation of <code>E2</code>, as described in  <specref ref="eval_context"/>. The sequences resulting from all the evaluations of <code>E2</code> are combined as follows:</p><olist><item><p>If every evaluation of <code>E2</code> returns a (possibly empty) sequence of nodes, these sequences are combined, and duplicate nodes are eliminated based on node identity.
  <phrase role="xpath">The resulting node sequence is returned in <termref def="dt-document-order">document order</termref>.</phrase>
                        </p></item><item><p>If every evaluation of <code>E2</code> returns a (possibly empty) sequence of non-nodes, these sequences are concatenated<phrase role="xpath">, in order,</phrase> and returned. </p></item><item><p>If the multiple evaluations of <code>E2</code> return at least one node and at least one non-node, a <termref def="dt-type-error">type error</termref> is raised <errorref class="TY" code="0018"/>.</p></item></olist><note><p>The semantics of the path operator can also be defined using the simple mapping operator as follows (forming the union with an empty sequence <code>($R | ())</code> has the effect of eliminating duplicates and sorting nodes into document order):</p><eg xml:space="preserve">E1/E2 ::= let $R := E1!E2
  return
    if (every $r in $R satisfies $r instance of node())
    then ($R|())
    else if (every $r in $R satisfies not($r instance of node()))
    then $R
    else error()</eg></note></div4></div3><div3 id="id-steps"><head>Steps</head><scrap headstyle="show"><head/><prod num="37" id="doc-xpath30-StepExpr"><lhs>StepExpr</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-PostfixExpr" xlink:type="simple">PostfixExpr</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AxisStep" xlink:type="simple">AxisStep</nt>
                     </rhs></prod><prod num="38" id="noid_d3e10675.doc-xpath30-AxisStep"><lhs>AxisStep</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ReverseStep" xlink:type="simple">ReverseStep</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ForwardStep" xlink:type="simple">ForwardStep</nt>)  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-PredicateList" xlink:type="simple">PredicateList</nt>
                     </rhs></prod><prod num="39" id="doc-xpath30-ForwardStep"><lhs>ForwardStep</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ForwardAxis" xlink:type="simple">ForwardAxis</nt>  
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-NodeTest" xlink:type="simple">NodeTest</nt>)  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AbbrevForwardStep" xlink:type="simple">AbbrevForwardStep</nt>
                     </rhs></prod><prod num="42" id="doc-xpath30-ReverseStep"><lhs>ReverseStep</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ReverseAxis" xlink:type="simple">ReverseAxis</nt>  
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-NodeTest" xlink:type="simple">NodeTest</nt>)  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AbbrevReverseStep" xlink:type="simple">AbbrevReverseStep</nt>
                     </rhs></prod><prod num="50" id="noid_d3e10678.doc-xpath30-PredicateList"><lhs>PredicateList</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Predicate" xlink:type="simple">Predicate</nt>*</rhs></prod></scrap><p>
                  <termdef term="step" id="dt-step">A <term>step</term> is a part of a <termref def="dt-path-expression">path expression</termref> that generates a sequence of items
		and then filters the sequence by zero or more
		<termref def="dt-predicate">predicates</termref>. The value of the step
		consists of those items that satisfy the
		predicates, working from left to right. A step may be either an <termref def="dt-axis-step">axis step</termref> or a postfix expression.</termdef> Postfix expressions are described in <specref ref="id-postfix-expression"/>.</p><p>
                  <termdef term="axis step" id="dt-axis-step">An <term>axis step</term> returns a sequence of nodes that are reachable from the context node via a specified axis. Such a step has two parts: an
		<term>axis</term>, which defines the "direction of
		movement" for the step, and a <termref def="dt-node-test">node test</termref>,
		which selects nodes based on their kind, name, and/or
		<termref def="dt-type-annotation">type annotation</termref>.</termdef> If the context item is a node, an axis
		step returns a sequence of zero or more
		nodes; otherwise, a <termref def="dt-type-error">type error</termref> is
		raised <errorref class="TY" code="0020"/>.   <phrase role="xpath">The resulting node sequence is returned in <termref def="dt-document-order">document
	 order</termref>.</phrase>  An axis step may be either a <term>forward
		step</term> or a <term>reverse step</term>, followed
		by zero or more <termref def="dt-predicate">predicates</termref>.</p><p>In the <term>abbreviated syntax</term> for a step, the axis can
		be omitted and other shorthand notations can be used as described in
		<specref ref="abbrev"/>.</p><p>The unabbreviated syntax for an axis step consists of the axis name
		and node test separated by a double colon. The result of the step consists of the nodes
		reachable from the context node via the specified axis that have the node kind, name,
		and/or <termref def="dt-type-annotation">type annotation</termref> specified by the node test. For example, the
		step <code role="parse-test">child::para</code> selects the <code>para</code> element children of the context node: <code>child</code> is the name of the axis, and <code>para</code> is the name of the element nodes to be selected on this axis. The available axes are described in <specref ref="axes"/>. The
		available node tests are described in <specref ref="node-tests"/>. Examples of
		steps are provided in <specref ref="unabbrev"/> and <specref ref="abbrev"/>.</p><div4 id="axes"><head>Axes</head><scrap headstyle="show"><head/><prod num="40" id="doc-xpath30-ForwardAxis"><lhs>ForwardAxis</lhs><rhs>("child"  "::")<br/>|  ("descendant"  "::")<br/>|  ("attribute"  "::")<br/>|  ("self"  "::")<br/>|  ("descendant-or-self"  "::")<br/>|  ("following-sibling"  "::")<br/>|  ("following"  "::")<br/>|  ("namespace"  "::")</rhs></prod><prod num="43" id="doc-xpath30-ReverseAxis"><lhs>ReverseAxis</lhs><rhs>("parent"  "::")<br/>|  ("ancestor"  "::")<br/>|  ("preceding-sibling"  "::")<br/>|  ("preceding"  "::")<br/>|  ("ancestor-or-self"  "::")</rhs></prod></scrap><p role="xpath">XPath defines a full set of <term>axes</term>
		  for traversing documents, but a <term>host language</term> may define a subset
		  of these axes. The following axes are defined:</p><ulist><item><p>The <code>child</code> axis
				contains the children of the context
				node, which are the nodes returned by
				the <code>dm:children</code> accessor
				in <bibref ref="xpath-datamodel-30"/>. </p><note><p>Only document
                                                  nodes and element
                                                  nodes have
                                                  children. If the
                                                  context node is any
                                                  other kind of node,
                                                  or if the context
                                                  node is an empty
                                                  document or element
                                                  node, then the child
                                                  axis is an empty
                                                  sequence.  The
                                                  children of a
                                                  document node or
                                                  element node may be
                                                  element, processing
                                                  instruction,
                                                  comment, or text
                                                  nodes.  Attribute<phrase role="xpath">,
                                                  namespace,</phrase> and
                                                  document nodes can
                                                  never appear as
                                                  children.</p></note></item><item><p>the <code>descendant</code>
			 axis is defined as the transitive closure of
			 the child axis; it contains the descendants
			 of the context node (the children, the children of the children, and so on)</p></item><item><p>the <code>parent</code>
                                          axis contains the sequence
                                          returned by the
                                          <code>dm:parent</code>
                                          accessor in <bibref ref="xpath-datamodel-30"/>, which returns
                                          the parent of the context
                                          node, or an empty sequence
                                          if the context node has no
                                          parent</p><note><p>An attribute node may have an element node as its parent, even though the attribute node is not a child of the element node.</p></note></item><item><p>the
                                        <code>ancestor</code> axis is
                                        defined as the transitive
                                        closure of the parent axis; it
                                        contains the ancestors of the
                                        context node (the parent, the
                                        parent of the parent, and so
                                        on)</p><note><p>The ancestor axis
                                        includes the root node of the
                                        tree in which the context node
                                        is found, unless the context
                                        node is the root node.</p></note></item><item><p>the <code>following-sibling</code>
			 axis contains the context node's following
			 siblings, those children of the context
			 node's parent that occur after the context
			 node in <termref def="dt-document-order">document order</termref>; if the context node
			 is an attribute <phrase role="xpath"> or namespace </phrase> node, the
			 <code>following-sibling</code> axis is
			 empty</p></item><item><p>the <code>preceding-sibling</code>
			 axis contains the context node's preceding
			 siblings, those children of the context
			 node's parent that occur before the context
			 node in <termref def="dt-document-order">document order</termref>; if the context node
			 is an attribute <phrase role="xpath"> or namespace </phrase> node, the
			 <code>preceding-sibling</code> axis is
			 empty</p></item><item><p>the <code>following</code> axis
				contains all nodes that are
				descendants of the root of the tree in
				which the context node is found, are
				not descendants of the context node,
				and occur after the context node in
				<termref def="dt-document-order">document order</termref>
                        </p></item><item><p>the <code>preceding</code> axis
				contains all nodes that are
				descendants of the root of the tree in
				which the context node is found, are
				not ancestors of the context node, and
				occur before the context node in
				<termref def="dt-document-order">document order</termref>
                        </p></item><item><p>the <code>attribute</code> axis
			 contains the attributes of the context node,
			 which are the nodes returned by the
			 <code>dm:attributes</code> accessor in
			 <bibref ref="xpath-datamodel-30"/>; the axis will be
			 empty unless the context node is an
			 element</p></item><item><p>the <code>self</code> axis contains just the context node itself</p></item><item><p>the <code>descendant-or-self</code> axis contains the context node and the descendants of the context
				node</p></item><item><p>the <code>ancestor-or-self</code> axis contains the context node and the ancestors of the context node;
				thus, the ancestor-or-self axis will always include the root node</p></item><item role="xpath"><p>the <code>namespace</code> axis
				contains the namespace nodes of the
				context node, which are the nodes
				returned by the
				<code>dm:namespace-nodes</code> accessor in
				<bibref ref="xpath-datamodel-30"/>; this axis
				is empty unless the context node is an
				element node. The
				<code>namespace</code> axis is
				deprecated <phrase diff="del">in</phrase>
                           <phrase diff="add">as of</phrase> XPath 2.0. If <termref def="dt-xpath-compat-mode">XPath 1.0
		compatibility mode</termref> is <code>true</code>, the <code>namespace</code> axis must be supported. If <termref def="dt-xpath-compat-mode">XPath 1.0
		compatibility mode</termref> is <code>false</code>, then support for the
				<code>namespace</code> axis is
				<termref def="dt-implementation-defined">implementation-defined</termref>. An implementation
				that does not support the
				<code>namespace</code> axis when <termref def="dt-xpath-compat-mode">XPath 1.0
		compatibility mode</termref> is <code>false</code> must raise
				a <termref def="dt-static-error">static
				error</termref> 
                           <errorref class="ST" code="0010"/> if it is
				used. Applications needing information
				about the <termref def="dt-in-scope-namespaces">in-scope namespaces</termref> of an element
				should use the functions
				<code>fn:in-scope-prefixes</code>
				and
				<code>fn:namespace-uri-for-prefix</code>
				defined in <bibref ref="xpath-functions-30"/>.</p></item></ulist><p>Axes can be categorized as <term>forward axes</term> and
		  <term>reverse axes</term>. An axis that only ever contains the context node or
		  nodes that are after the context node in <termref def="dt-document-order">document order</termref> is a forward axis. An
		  axis that only ever contains the context node or nodes that are before the
		  context node in <termref def="dt-document-order">document order</termref> is a reverse axis.</p><p>The <code>parent</code>, <code>ancestor</code>, <code>ancestor-or-self</code>, <code>preceding</code>, and <code>preceding-sibling</code> axes are reverse axes; all other axes are forward axes. The <code>ancestor</code>, <code>descendant</code>, <code>following</code>, <code>preceding</code> and <code>self</code> axes partition a document (ignoring attribute <phrase role="xpath">and namespace</phrase> nodes):
		  they do not overlap and together they contain all the nodes in the
		  document.</p><p>
                     <termdef id="dt-principal-node-kind" term="principal node kind">Every axis has a <term>principal node kind</term>. If an axis can
		  contain elements, then the principal node kind is element; otherwise, it is the
		  kind of nodes that the axis can contain.</termdef> Thus:</p><ulist><item><p>For the attribute axis, the principal node kind is
				attribute.</p></item><item role="xpath"><p>For the namespace axis, the principal node kind is
				namespace.</p></item><item><p>For all other axes, the principal node kind is element.</p></item></ulist></div4><div4 id="node-tests"><head>Node Tests</head><p diff="chg">
                     <termdef id="dt-node-test" term="node test">A <term>node test</term> is a condition on the name, kind (element, attribute, text, document, comment,
		  or processing instruction), and/or  <termref def="dt-type-annotation">type annotation</termref> of a node. A node test determines which nodes contained by an axis are selected by a <termref def="dt-step">step</termref>.</termdef> 
                     <phrase diff="del">The
		  condition may be based on the kind of the node
		  (element, attribute, text, document, comment,
		  or processing instruction), the name of
		  the node, or (in the case of element, attribute, and document
		  nodes), the <termref def="dt-type-annotation">type annotation</termref> of the node.</phrase>
                  </p><scrap headstyle="show"><head/><prod num="45" id="doc-xpath30-NodeTest"><lhs>NodeTest</lhs><rhs>
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-KindTest" xlink:type="simple">KindTest</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-NameTest" xlink:type="simple">NameTest</nt>
                        </rhs></prod><prod num="46" id="doc-xpath30-NameTest"><lhs>NameTest</lhs><rhs>
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EQName" xlink:type="simple">EQName</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Wildcard" xlink:type="simple">Wildcard</nt>
                        </rhs></prod><prod num="47" id="doc-xpath30-Wildcard"><lhs>Wildcard</lhs><rhs>"*"<br/>|  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-NCName" xlink:type="simple">NCName</nt>  ":"  "*")<br/>|  ("*"  ":"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-NCName" xlink:type="simple">NCName</nt>)<br/>|  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-BracedURILiteral" xlink:type="simple">BracedURILiteral</nt>  "*")</rhs></prod><prod num="94" id="noid_d3e11074.doc-xpath30-EQName"><lhs>EQName</lhs><rhs>
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-QName" xlink:type="simple">QName</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-URIQualifiedName" xlink:type="simple">URIQualifiedName</nt>
                        </rhs></prod></scrap><p>
                     <termdef id="dt-name-test" term="name test">A node test that consists only of an EQName or a
		  Wildcard is called a <term>name test</term>.</termdef> A name
		  test is true if and only if the <term>kind</term> of
		  the node is the <termref def="dt-principal-node-kind">principal node kind</termref> for the step axis and the
		  <termref def="dt-expanded-qname">expanded QName</termref> of the node is equal (as defined by the <code>eq</code> operator) to the
		  <termref def="dt-expanded-qname">expanded QName</termref> specified by the name test. For
		  example, <code role="parse-test">child::para</code>
		  selects the <code>para</code> element children of
		  the context node; if the context node has no
		  <code>para</code> children, it selects an empty set
		  of nodes. <code role="parse-test">attribute::abc:href</code> selects
		  the attribute of the context node with the QName
		  <code>abc:href</code>; if the context node has no
		  such attribute, it selects an empty set of
		  nodes.</p><p>If the EQName is a <termref def="dt-qname">lexical QName</termref>, it is resolved into an <termref def="dt-expanded-qname">expanded QName</termref> using the
		  <termref def="dt-static-namespaces">statically known namespaces</termref> in the expression
		  context. It is a <termref def="dt-static-error">static error</termref> 
                     <errorref class="ST" code="0081"/> if the QName has a prefix that does not
		  correspond to any statically known namespace.

          An unprefixed QName, when used as a
		  name test on an axis whose <termref def="dt-principal-node-kind">principal node kind</termref> is
		  element, has the namespace URI of the <termref def="dt-def-elemtype-ns">default element/type namespace</termref> in
		  the expression context; otherwise, it has no namespace URI. </p><p>A name test is not satisfied by an element node whose name does not match the <termref def="dt-expanded-qname">expanded QName</termref> of the name test, even if it is in a <termref def="dt-substitution-group">substitution group</termref> whose head is the named element.</p><p>A node test <code>*</code> is true for any node of the
		  <termref def="dt-principal-node-kind">principal node
		  kind</termref> of the step axis. For example, <code role="parse-test">child::*</code> will select all element
		  children of the context node, and <code role="parse-test">attribute::*</code> will select all
		  attributes of the context node.</p><p>A node test can have the form
		  <code role="parse-test">NCName:*</code>. In this case, the prefix is
		  expanded in the same way as with a <termref def="dt-qname">lexical QName</termref>, using the
		  <termref def="dt-static-namespaces">statically known
		  namespaces</termref> in the <termref def="dt-static-context">static context</termref>. If
		  the prefix is not found in the statically known namespaces,
		  a <termref def="dt-static-error">static
		  error</termref> is raised <errorref class="ST" code="0081"/>.
		  The node test is true for any node of the <termref def="dt-principal-node-kind">principal
		  node kind</termref> of the step axis whose <termref def="dt-expanded-qname">expanded QName</termref> has the namespace URI
		  to which the prefix is bound, regardless of the
		  local part of the name.</p><p diff="add">A node test can contain a BracedURILiteral, e.g.
		  <code role="parse-test">Q{http://example.com/msg}*</code> Such a node test is true for any node of the principal node kind of the step axis whose expanded QName has the namespace URI specified in the BracedURILiteral, regardless of the local part of the name.</p><p>A node test can also
		  have the form <code role="parse-test">*:NCName</code>. In this case,
		  the node test is true for any node of the <termref def="dt-principal-node-kind">principal
		  node kind</termref> of the step axis whose local name matches the given NCName,
		  regardless of its namespace or lack of a namespace.</p><p>
                     <termdef term="kind test" id="dt-kind-test">An alternative
		  form of a node test called a
		  <term>kind test</term> can select nodes based
		  on their kind, name, and <termref def="dt-type-annotation">type annotation</termref>.</termdef> The syntax
		  and semantics of a kind test are described in
		  <specref ref="id-sequencetype-syntax"/> and <specref ref="id-sequencetype-matching"/>. When a kind test is used
		  in a <termref def="dt-node-test">node test</termref>, only those nodes on the designated
		  axis that match the kind test are selected. Shown
		  below are several examples of kind tests that might
		  be used in path
		  expressions:</p><ulist><item><p>
                           <code role="parse-test">node()</code>
		  matches any
		  node.</p></item><item><p>
                           <code role="parse-test">text()</code> matches
		  any text
		  node.</p></item><item><p>
                           <code role="parse-test">comment()</code>
		  matches any comment
		  node.</p></item><item><p>
                           <code role="parse-test">namespace-node()</code> matches any
		  namespace node.</p></item><item><p>
                           <code role="parse-test">element()</code>
		  matches any element
		  node.</p></item><item><p>
                           <code role="parse-test">schema-element(person)</code>
		  matches any element node whose name is
		  <code>person</code> (or is in the <termref def="dt-substitution-group">substitution group</termref>
		  headed by <code>person</code>), and whose type
		  annotation is the same as (or is derived from) the declared type of the <code>person</code>
		  element in the <termref def="dt-is-elems">in-scope element declarations</termref>.</p></item><item><p>
                           <code role="parse-test">element(person)</code> matches any element node whose name is
		  <code>person</code>, regardless of its type annotation.</p></item><item><p>
                           <code role="parse-test">element(person, surgeon)</code> matches any non-nilled element node whose name
		  is <code>person</code>, and whose type
		  annotation is
		  <code>surgeon</code> or is derived from <code>surgeon</code>.</p></item><item><p>
                           <code role="parse-test">element(*,
		  surgeon)</code> matches any non-nilled element node whose type
		  annotation is <code>surgeon</code> (or is derived from <code>surgeon</code>), regardless of
		  its
		  name.</p></item><item><p>
                           <code role="parse-test">attribute()</code> matches any
                  attribute node.</p></item><item><p>
                           <code role="parse-test">attribute(price)</code> matches
                  any attribute whose name is <code>price</code>,
                  regardless of its type annotation.</p></item><item><p>
                           <code role="parse-test">attribute(*,
                  xs:decimal)</code> matches any attribute whose type
                  annotation is <code>xs:decimal</code> (or is derived from <code>xs:decimal</code>), regardless of
                  its
                  name.</p></item><item><p>
                           <code role="parse-test">document-node()</code>
                  matches any document
                  node.</p></item><item><p>
                           <code role="parse-test">document-node(element(book))</code>
                  matches any document node whose content consists of
                  a single element node that satisfies the <termref def="dt-kind-test">kind test</termref>
                           <code role="parse-test">element(book)</code>, interleaved with zero or more
                  comments and processing
                  instructions.</p></item></ulist></div4></div3><div3 id="id-predicate"><head>Predicates within Steps</head><scrap headstyle="show"><head/><prod num="38" id="doc-xpath30-AxisStep"><lhs>AxisStep</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ReverseStep" xlink:type="simple">ReverseStep</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ForwardStep" xlink:type="simple">ForwardStep</nt>)  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-PredicateList" xlink:type="simple">PredicateList</nt>
                     </rhs></prod><prod num="50" id="doc-xpath30-PredicateList"><lhs>PredicateList</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Predicate" xlink:type="simple">Predicate</nt>*</rhs></prod><prod num="51" id="noid_d3e11359.doc-xpath30-Predicate"><lhs>Predicate</lhs><rhs>"["  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Expr" xlink:type="simple">Expr</nt>  "]"</rhs></prod></scrap><p id="dt-predicate">A predicate within a Step has similar syntax and semantics
	 to a predicate within a <termref def="id-filter-expression">filter expression</termref>.  The
	 only difference is in the way the context position is set for
	 evaluation of the predicate.</p><p>For the purpose of evaluating the context position within
	 a predicate, the input sequence is considered to be sorted as
	 follows: into document order if the predicate is in a
	 forward-axis step, into reverse document order if the
	 predicate is in a reverse-axis step, or in its original order
	 if the predicate is not in a step.</p><p>Here are some examples of <termref def="dt-axis-step">axis steps</termref> that contain predicates:</p><ulist><item><p>This example selects the second <code>chapter</code> element that is a child
			 of the context node:</p><eg role="parse-test" xml:space="preserve">child::chapter[2]</eg></item><item><p>This example selects all the descendants of the
		  context node that are elements named
		  <code>"toy"</code> and whose <code>color</code>
		  attribute has the value <code>"red"</code>:</p><eg role="parse-test" xml:space="preserve">descendant::toy[attribute::color = "red"]</eg></item><item><p>This example selects all the <code>employee</code> children of the context node
		that have both a <code>secretary</code> child element and an <code>assistant</code> child element:</p><eg role="parse-test" xml:space="preserve">child::employee[secretary][assistant]</eg></item></ulist><note><p>When using <termref def="dt-predicate">predicates</termref> with a sequence of nodes selected using a
<term>reverse axis</term>, it is important to remember that the
context positions for such a sequence are assigned in <termref def="dt-reverse-document-order">reverse
document order</termref>. For example, <code role="parse-test">preceding::foo[1]</code>
returns the first qualifying <code>foo</code> element in <termref def="dt-reverse-document-order">reverse document order</termref>, because the predicate is part of an <termref def="dt-axis-step">axis step</termref> using a reverse axis. By
contrast, <code role="parse-test">(preceding::foo)[1]</code> returns the first qualifying <code>foo</code>
element in <termref def="dt-document-order">document order</termref>, because the parentheses cause  <code role="parse-test">(preceding::foo)</code> to be parsed as a <termref def="dt-primary-expression">primary expression</termref> in which context positions are assigned in document order. Similarly, <code role="parse-test">ancestor::*[1]</code>
returns the nearest ancestor element, because the <code>ancestor</code> axis is a
reverse axis, whereas <code role="parse-test">(ancestor::*)[1]</code> returns the root element (first ancestor in document order).</p><p>The fact that a reverse-axis step assigns context positions in reverse
document order for the purpose of evaluating predicates does not alter the
fact that the final result of the step  is always in document order.</p></note></div3><div3 id="unabbrev"><head>Unabbreviated Syntax</head><p>This section provides a number of examples of path expressions in which the
axis is explicitly specified in each <termref def="dt-step">step</termref>. The syntax used in these examples is
called the <term>unabbreviated syntax</term>. In many common cases, it is
possible to write path expressions more concisely using an <term>abbreviated
syntax</term>, as explained in <specref ref="abbrev"/>.</p><ulist><item><p> 
                        <code role="parse-test">child::para</code> selects
the <code>para</code> element children of the context node</p></item><item><p> 
                        <code role="parse-test">child::*</code> selects all element children of the context node</p></item><item><p> 
                        <code role="parse-test">child::text()</code> selects all text node children of the context node</p></item><item><p> 
                        <code role="parse-test">child::node()</code> selects all the children of the context node. Note that no attribute nodes are returned, because attributes are not children.</p></item><item><p> 
                        <code role="parse-test">attribute::name</code> selects the <code>name</code> attribute of the context node</p></item><item><p> 
                        <code role="parse-test">attribute::*</code> selects all the attributes of the context node</p></item><item><p>
                        <code role="parse-test">parent::node()</code> selects the parent of the context node. If the context node is an attribute node, this expression returns the element node (if any) to which the attribute node is attached.</p></item><item><p> 
                        <code role="parse-test">descendant::para</code> selects the <code>para</code> element descendants of the context node</p></item><item><p> 
                        <code role="parse-test">ancestor::div</code> selects all <code>div</code> ancestors of the context node</p></item><item><p> 
                        <code role="parse-test">ancestor-or-self::div</code> selects the <code>div</code> ancestors of the context node and, if the context node is a <code>div</code> element, the context node as well</p></item><item><p> 
                        <code role="parse-test">descendant-or-self::para</code> selects the <code>para</code> element descendants of the context node and, if the context node is a <code>para</code> element, the context node as well</p></item><item><p> 
                        <code role="parse-test">self::para</code> selects the context node if it is a <code>para</code> element, and otherwise returns an empty sequence</p></item><item><p> 
                        <code role="parse-test">child::chapter/descendant::para</code> selects the <code>para</code> element
descendants of the <code>chapter</code> element children of the context node</p></item><item><p> 
                        <code role="parse-test">child::*/child::para</code> selects all <code>para</code> grandchildren of the context node</p></item><item><p> 
                        <code role="parse-test">/</code> selects the root of the tree that contains the context node, but raises a dynamic error if this root is not a document node</p></item><item><p> 
                        <code role="parse-test">/descendant::para</code> selects all the <code>para</code> elements in the same document as the context node</p></item><item><p> 
                        <code role="parse-test">/descendant::list/child::member</code> selects all
the <code>member</code> elements that have a <code>list</code> parent and that are in the same document as the context node</p></item><item><p> 
                        <code role="parse-test">child::para[fn:position() = 1]</code> selects the first <code>para</code> child of the context node</p></item><item><p> 
                        <code role="parse-test">child::para[fn:position() = fn:last()]</code> selects the last <code>para</code> child of the context node</p></item><item><p> 
                        <code role="parse-test">child::para[fn:position() = fn:last()-1]</code> selects the last but one <code>para</code> child of the context node</p></item><item><p> 
                        <code role="parse-test">child::para[fn:position() &gt; 1]</code> selects all the <code>para</code> children of the context node other than the first <code>para</code> child of the context node</p></item><item><p> 
                        <code role="parse-test">following-sibling::chapter[fn:position() = 1]</code> selects the next <code>chapter</code> sibling of the context node</p></item><item><p> 
                        <code role="parse-test">preceding-sibling::chapter[fn:position() = 1]</code> selects the previous <code>chapter</code> sibling of the context node</p></item><item><p> 
                        <code role="parse-test">/descendant::figure[fn:position() = 42]</code> selects the forty-second <code>figure</code> element in the document containing the context node</p></item><item><p> 
                        <code role="parse-test">/child::book/child::chapter[fn:position() = 5]/child::section[fn:position() = 2]</code> selects the
second <code>section</code> of the fifth <code>chapter</code> of the <code>book</code> whose parent is the document node that contains the context node</p></item><item><p> 
                        <code role="parse-test">child::para[attribute::type eq "warning"]</code> selects
all <code>para</code> children of the context node that have a <code>type</code> attribute with value <code>warning</code> 
                     </p></item><item><p> 
                        <code role="parse-test">child::para[attribute::type eq 'warning'][fn:position() = 5]</code> selects the fifth <code>para</code> child of the context node that has a <code>type</code> attribute with value <code>warning</code> 
                     </p></item><item><p> 
                        <code role="parse-test">child::para[fn:position() = 5][attribute::type eq "warning"]</code> selects the fifth <code>para</code> child of the context node if that child has a <code>type</code> attribute with value <code>warning</code> 
                     </p></item><item><p> 
                        <code role="parse-test">child::chapter[child::title = 'Introduction']</code> selects
the <code>chapter</code> children of the context node that have one or
more <code>title</code> children whose <termref def="dt-typed-value">typed value</termref> is equal to the
string <code>Introduction</code> 
                     </p></item><item><p> 
                        <code role="parse-test">child::chapter[child::title]</code> selects the <code>chapter</code> children of the context node that have one or more <code>title</code> children</p></item><item><p> 
                        <code role="parse-test">child::*[self::chapter or self::appendix]</code>
selects the <code>chapter</code> and <code>appendix</code> children of the context node</p></item><item><p> 
                        <code role="parse-test">child::*[self::chapter or
self::appendix][fn:position() = fn:last()]</code> selects the
last <code>chapter</code> or <code>appendix</code> child of the context node</p></item></ulist></div3><div3 id="abbrev"><head>Abbreviated Syntax</head><scrap headstyle="show"><head/><prod num="41" id="doc-xpath30-AbbrevForwardStep"><lhs>AbbrevForwardStep</lhs><rhs>"@"?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-NodeTest" xlink:type="simple">NodeTest</nt>
                     </rhs></prod><prod num="44" id="doc-xpath30-AbbrevReverseStep"><lhs>AbbrevReverseStep</lhs><rhs>".."</rhs></prod></scrap><p>The abbreviated syntax permits the following abbreviations:</p><olist><item><p>The attribute axis <code>attribute::</code> can be
    abbreviated by <code>@</code>. For example, a path expression <code role="parse-test">para[@type="warning"]</code> is short
    for <code role="parse-test">child::para[attribute::type="warning"]</code> and
    so selects <code>para</code> children with a <code>type</code> attribute with value
    equal to <code>warning</code>.</p></item><item><p>If the axis name is omitted from an <termref def="dt-axis-step">axis step</termref>, the default axis is
    <code>child</code>, with two exceptions:

    if the <phrase diff="add"> 
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-NodeTest" xlink:type="simple">NodeTest</nt> in an </phrase> axis step contains an <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeTest" xlink:type="simple">AttributeTest</nt> or <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SchemaAttributeTest" xlink:type="simple">SchemaAttributeTest</nt> then the
    default axis is <code>attribute</code>;

    if the <phrase diff="add"> 
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-NodeTest" xlink:type="simple">NodeTest</nt> in an</phrase> 
    axis step 
    <phrase diff="del">contains <code>namespace-node()</code> then the default axis is <code>namespace</code>
                        </phrase>
                        <phrase diff="add">is a  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-NamespaceNodeTest" xlink:type="simple">NamespaceNodeTest</nt> then a static error is raised
    <errorref class="ST" code="0134"/>
                        </phrase>.

    <note><p>In an implementation that does not support the namespace
    axis, an attempt to access it always raises an error. Thus, an
    XQuery implementation will always raise an error in this case,
    since XQuery does not support the namespace axis. The namespace
    axis is deprecated <phrase diff="del">in</phrase>
                              <phrase diff="add">as of</phrase> XPath 2.0, but required in some languages
    that use XPath, including XSLT.</p></note>

    For example, the path expression <code role="parse-test">section/para</code> is an abbreviation for <code role="parse-test">child::section/child::para</code>, and the path
    expression <code role="parse-test">section/@id</code> is an
    abbreviation for <code role="parse-test">child::section/attribute::id</code>.  Similarly,
    <code role="parse-test">section/attribute(id)</code> is an
    abbreviation for <code role="parse-test">child::section/attribute::attribute(id)</code>. Note
    that the latter expression contains both an axis specification and
    a <termref def="dt-node-test">node test</termref>.</p></item><item><p> Each non-initial occurrence of <code>//</code> is effectively replaced by  <code>/descendant-or-self::node()/</code> during processing of a path expression. For example, <code role="parse-test">div1//para</code> is
short for <code role="parse-test">child::div1/descendant-or-self::node()/child::para</code> and so will select all <code>para</code> descendants of <code>div1</code> children.</p><note><p>The path expression <code role="parse-test">//para[1]</code> does <emph>not</emph> mean the same as the path
expression <code role="parse-test">/descendant::para[1]</code>. The latter selects the first descendant <code>para</code> element; the former
selects all descendant <code>para</code> elements that are the first <code>para</code> children of their respective parents.</p></note></item><item><p>A step consisting
of <code role="parse-test">..</code> is short
for <code role="parse-test">parent::node()</code>. For example, <code role="parse-test">../title</code> is short for <code role="parse-test">parent::node()/child::title</code> and so will select the <code>title</code> children of the parent of the context node.</p><note><p>The expression <code>.</code>, known as a <term>context item
   expression</term>, is a <termref def="dt-primary-expression">primary expression</termref>,
   and is described in <specref ref="id-context-item-expression"/>.</p></note></item></olist><p>Here are some examples of path expressions that use the abbreviated
syntax:</p><ulist><item><p> 
                        <code>para</code> selects the <code>para</code> element children of the context node</p></item><item><p> 
                        <code role="parse-test">*</code> selects all element children of the context node</p></item><item><p> 
                        <code role="parse-test">text()</code> selects all text node children of the context node</p></item><item><p> 
                        <code role="parse-test">@name</code> selects
the <code>name</code> attribute of the context node</p></item><item><p> 
                        <code role="parse-test">@*</code> selects all the attributes of the context node</p></item><item><p> 
                        <code role="parse-test">para[1]</code> selects the first <code>para</code> child of the context node</p></item><item><p> 
                        <code role="parse-test">para[fn:last()]</code> selects the last <code>para</code> child of the context node</p></item><item><p> 
                        <code role="parse-test">*/para</code> selects
all <code>para</code> grandchildren of the context node</p></item><item><p> 
                        <code role="parse-test">/book/chapter[5]/section[2]</code> selects the
second <code>section</code> of the fifth <code>chapter</code> of the <code>book</code> whose parent is the document node that contains the context node</p></item><item><p> 
                        <code role="parse-test">chapter//para</code> selects the <code>para</code> element descendants of the <code>chapter</code> element children of the context node</p></item><item><p> 
                        <code role="parse-test">//para</code> selects all
the <code>para</code> descendants of the root document node and thus selects all <code>para</code> elements in the same document as the context node</p></item><item><p>
                        <code role="parse-test">//@version</code> selects all the <code>version</code> attribute nodes that are in the same document as the context node</p></item><item><p> 
                        <code role="parse-test">//list/member</code> selects all the <code>member</code> elements in the same document as the context node that have a <code>list</code> parent</p></item><item><p> 
                        <code role="parse-test">.//para</code> selects
the <code>para</code> element descendants of the context node</p></item><item><p> 
                        <code role="parse-test">..</code> selects the parent of the context node</p></item><item><p> 
                        <code role="parse-test">../@lang</code> selects
the <code>lang</code> attribute of the parent of the context node</p></item><item><p> 
                        <code role="parse-test">para[@type="warning"]</code> selects all <code>para</code> children of the context node that have a <code>type</code> attribute with value <code>warning</code> 
                     </p></item><item><p> 
                        <code role="parse-test">para[@type="warning"][5]</code> selects the fifth <code>para</code> child of the context node that has a <code>type</code> attribute with value <code>warning</code> 
                     </p></item><item><p> 
                        <code role="parse-test">para[5][@type="warning"]</code> selects the fifth <code>para</code> child of the context node if that child has a <code>type</code> attribute with value <code>warning</code> 
                     </p></item><item><p> 
                        <code role="parse-test">chapter[title="Introduction"]</code> selects the <code>chapter</code> children of the context node that have one
or more <code>title</code> children whose <termref def="dt-typed-value">typed value</termref> is equal to the string <code>Introduction</code> 
                     </p></item><item><p> 
                        <code role="parse-test">chapter[title]</code> selects the <code>chapter</code> children of the context node that have one or more <code>title</code> children</p></item><item><p> 
                        <code role="parse-test">employee[@secretary and @assistant]</code> selects all
the <code>employee</code> children of the context node that have both a <code>secretary</code> attribute and
an <code>assistant</code> attribute</p></item><item><p> 
                        <code role="parse-test">book/(chapter|appendix)/section</code> selects
every <code>section</code> element that has a parent that is either a <code>chapter</code> or an <code>appendix</code> element, that in turn is a child of a <code>book</code> element that is a child of the context node.</p></item><item><p>If <code>E</code> is any expression that returns a sequence of nodes, then the expression <code role="parse-test">E/.</code> returns the same nodes in <termref def="dt-document-order">document order</termref>, with duplicates eliminated based on node identity.</p></item></ulist></div3></div2><div2 id="id-sequence-expressions"><head>Sequence Expressions</head><p>XPath 3.0 supports operators to construct, filter,  and combine
<termref def="dt-sequence">sequences</termref> of <termref def="dt-item">items</termref>.
Sequences are never nested—for
example, combining the values <code>1</code>, <code>(2, 3)</code>, and <code>( )</code> into a single sequence results
in the sequence <code>(1, 2, 3)</code>.</p><div3 id="construct_seq"><head>Constructing Sequences</head><scrap headstyle="show"><head/><prod num="6" id="noid_d3e12301.doc-xpath30-Expr"><lhs>Expr</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>)*</rhs></prod><prod num="20" id="doc-xpath30-RangeExpr"><lhs>RangeExpr</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AdditiveExpr" xlink:type="simple">AdditiveExpr</nt> ( "to"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AdditiveExpr" xlink:type="simple">AdditiveExpr</nt> )?</rhs></prod></scrap><p>
                  <termdef term="comma operator" id="dt-comma-operator">One way to construct a sequence is by using the <term>comma operator</term>, which evaluates each of its operands and concatenates the resulting sequences, in order, into a single result sequence.</termdef> Empty parentheses can be used to denote an empty sequence.</p><p>A sequence may contain duplicate
<termref def="dt-item">items</termref>, but a sequence is never an item in another sequence. When a
new sequence is created by concatenating two or more input sequences, the new
sequence contains all the items of the input sequences and its length is the
sum of the lengths of the input sequences.</p><note><p>In places where the grammar calls for <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>, such as the arguments of a function call, any expression that contains a top-level comma operator must be enclosed in parentheses.</p></note><p>Here are some examples of expressions that construct sequences:
</p><ulist><item><p>The result of this expression is a sequence of five integers:</p><eg role="parse-test" xml:space="preserve">(10, 1, 2, 3, 4)</eg></item><item><p>This expression combines four sequences of length one, two, zero, and two, respectively, into a single sequence of length five. The result of this expression is the sequence <code>10, 1, 2, 3, 4</code>.</p><eg role="parse-test" xml:space="preserve">(10, (1, 2), (), (3, 4))</eg></item><item><p>The result of this expression is a sequence containing
all <code>salary</code> children of the context node followed by all <code>bonus</code> children.</p><eg role="parse-test" xml:space="preserve">(salary, bonus)</eg></item><item><p>Assuming that <code>$price</code> is bound to
the value <code>10.50</code>, the result of this expression is the sequence <code>10.50, 10.50</code>.</p><eg role="parse-test" xml:space="preserve">($price, $price)</eg></item></ulist><p>A <term>range expression</term> can be used to construct a sequence of consecutive
integers. Each of the operands of the <code>to</code> operator is
converted as though it was an argument of a function with the expected
parameter type <code>xs:integer?</code>.
If either operand is an empty sequence, or if the integer derived from the first operand is greater than the integer derived from the second operand, the result of the range expression is an empty sequence. If the two operands convert to the same integer, the result of the range expression is that integer. Otherwise, the result is a sequence containing the two integer operands and
every integer between the two operands, in increasing order. </p><ulist><item><p>This example uses a range expression as one operand in constructing a sequence. It evaluates to the sequence <code>10, 1, 2, 3, 4</code>.</p><eg role="parse-test" xml:space="preserve">(10, 1 to 4)</eg></item><item><p>This example constructs a sequence of length one containing the single integer <code>10</code>.</p><eg role="parse-test" xml:space="preserve">10 to 10</eg></item><item><p>The result of this example is a sequence of length zero.</p><eg role="parse-test" xml:space="preserve">15 to 10</eg></item><item><p>This example uses the <code>fn:reverse</code> function to construct a sequence of six integers in decreasing order. It evaluates to the sequence <code>15, 14, 13, 12, 11, 10</code>.</p><eg role="parse-test" xml:space="preserve">fn:reverse(10 to 15)</eg></item></ulist></div3><div3 id="combining_seq"><head>Combining Node Sequences</head><scrap headstyle="show"><head/><prod num="23" id="doc-xpath30-UnionExpr"><lhs>UnionExpr</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-IntersectExceptExpr" xlink:type="simple">IntersectExceptExpr</nt> ( ("union"  |  "|")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-IntersectExceptExpr" xlink:type="simple">IntersectExceptExpr</nt> )*</rhs></prod><prod num="24" id="doc-xpath30-IntersectExceptExpr"><lhs>IntersectExceptExpr</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-InstanceofExpr" xlink:type="simple">InstanceofExpr</nt> ( ("intersect"  |  "except")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-InstanceofExpr" xlink:type="simple">InstanceofExpr</nt> )*</rhs></prod></scrap><p>XPath 3.0 provides the following operators for combining sequences of
nodes:</p><ulist><item><p>The <code>union</code> and <code>|</code> operators are equivalent. They take two node sequences as operands and
return a sequence containing all the nodes that occur in either of the
operands.</p></item><item><p>The <code>intersect</code> operator takes two node sequences as operands and returns a sequence
containing all the nodes that occur in both operands.</p></item><item><p>The <code>except</code> operator takes two node sequences as operands and returns a sequence
containing all the nodes that occur in the first operand but not in the second
operand.</p></item></ulist><p>
 All these operators eliminate duplicate nodes from their result sequences based on node identity. <phrase role="xpath">The resulting sequence is returned in <termref def="dt-document-order">document
	 order</termref>.</phrase>
               </p><p>If an operand
of <code>union</code>, <code>intersect</code>, or <code>except</code> contains an item that is not a node, a <termref def="dt-type-error">type error</termref> is raised <errorref class="TY" code="0004"/>.</p><p>
If an IntersectExceptExpr contains more than two InstanceofExprs,
they are grouped from left to right.
With a UnionExpr, it makes no difference how operands are grouped,
the results are the same.
</p><example><p>Here are some examples of expressions that combine sequences. Assume the existence of three element nodes that we will refer to by symbolic names A, B, and C.  Assume that the variables <code>$seq1</code>,  <code>$seq2</code>  and <code>$seq3</code> are bound to the following sequences of these nodes:</p><ulist><item><p>
                           <code>$seq1</code> is bound to (A, B)</p></item><item><p>
                           <code>$seq2</code> is bound to (A, B)</p></item><item><p>
                           <code>$seq3</code> is bound to (B, C)</p></item></ulist><p>Then: </p><ulist><item><p> 
                           <code role="parse-test">$seq1 union $seq2</code>  evaluates to the sequence (A, B). </p></item><item><p> 
                           <code role="parse-test">$seq2 union $seq3</code>   evaluates to the sequence (A, B, C). </p></item><item><p> 
                           <code role="parse-test">$seq1 intersect $seq2</code>  evaluates to the sequence (A, B). </p></item><item><p> 
                           <code role="parse-test">$seq2 intersect $seq3</code>  evaluates to the sequence containing B only.</p></item><item><p> 
                           <code role="parse-test">$seq1 except $seq2</code>   evaluates to the empty sequence.</p></item><item><p> 
                           <code role="parse-test">$seq2 except $seq3</code>  evaluates to the sequence containing A only.</p></item></ulist></example><p>In addition to the sequence operators described here, <bibref ref="xpath-functions-30"/> includes functions for indexed access to items or
sub-sequences of a sequence, for indexed insertion or removal of items in a
sequence, and for removing duplicate items from a sequence.</p></div3></div2><div2 id="id-arithmetic"><head>Arithmetic Expressions</head><p>XPath 3.0 provides arithmetic operators for addition, subtraction,
multiplication, division, and modulus, in their usual binary and unary
forms.</p><scrap headstyle="show"><head/><prod num="21" id="doc-xpath30-AdditiveExpr"><lhs>AdditiveExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-MultiplicativeExpr" xlink:type="simple">MultiplicativeExpr</nt> ( ("+"  |  "-")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-MultiplicativeExpr" xlink:type="simple">MultiplicativeExpr</nt> )*</rhs></prod><prod num="22" id="doc-xpath30-MultiplicativeExpr"><lhs>MultiplicativeExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-UnionExpr" xlink:type="simple">UnionExpr</nt> ( ("*"  |  "div"  |  "idiv"  |  "mod")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-UnionExpr" xlink:type="simple">UnionExpr</nt> )*</rhs></prod><prod num="29" id="doc-xpath30-UnaryExpr"><lhs>UnaryExpr</lhs><rhs>("-"  |  "+")* <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ValueExpr" xlink:type="simple">ValueExpr</nt>
                  </rhs></prod><prod num="30" id="doc-xpath30-ValueExpr"><lhs>ValueExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SimpleMapExpr" xlink:type="simple">SimpleMapExpr</nt>
                  </rhs></prod></scrap><p>A subtraction operator must be preceded by whitespace if
it could otherwise be interpreted as part of the previous token. For
example, <code role="parse-test">a-b</code> will be interpreted as a
name, but <code role="parse-test">a - b</code> and <code role="parse-test">a -b</code> will be interpreted as arithmetic expressions. (See <specref ref="whitespace-rules"/> for further details on whitespace handling.)</p><p>
If an AdditiveExpr contains more than two MultiplicativeExprs,
they are grouped from left to right. So, for instance,
<eg role="parse-test" xml:space="preserve">A - B + C - D</eg>
is equivalent to
<eg role="parse-test" xml:space="preserve">((A - B) + C) - D</eg>
Similarly, the operands of a MultiplicativeExpr are grouped from left to right.
</p><p>The first step in evaluating an arithmetic expression is to evaluate its operands. The order in which the operands are evaluated is <termref def="dt-implementation-dependent">implementation-dependent</termref>.</p><p role="xpath">If <termref def="dt-xpath-compat-mode">XPath 1.0 compatibility mode</termref> is <code>true</code>, each operand is evaluated by applying the following steps, in order:</p><olist role="xpath"><item><p>
                     <termref def="dt-atomization">Atomization</termref> is applied to the operand. The result of this
    operation is called the <term>atomized operand</term>.</p></item><item><p>If the atomized operand is an empty sequence, the result of
    the arithmetic expression is the <code>xs:double</code> value <code>NaN</code>, and the implementation
    need not evaluate the other operand or apply the operator. However,
    an implementation may choose to evaluate the other operand in order
    to determine whether it raises an error.</p></item><item><p>If the atomized operand is a sequence of length greater than one, any items after the first item in the sequence are discarded.</p></item><item><p>If the atomized operand is now an instance of type <code>xs:boolean</code>, <code>xs:string</code>,
<code>xs:decimal</code> (including <code>xs:integer</code>), <code>xs:float</code>, or <code>xs:untypedAtomic</code>, then it
is converted to the type <code>xs:double</code> by applying the <code>fn:number</code> function. (Note that <code>fn:number</code> returns the value <code>NaN</code> if its operand cannot be converted to a number.)</p></item></olist><p>
               <phrase role="xpath">If <termref def="dt-xpath-compat-mode">XPath 1.0 compatibility mode</termref> is <code>false</code>, each</phrase> operand is evaluated by applying the following steps, in order:</p><olist><item><p>
                     <termref def="dt-atomization">Atomization</termref> is applied to the operand. The result of this
    operation is called the <term>atomized operand</term>.</p></item><item><p>If the atomized operand is an empty sequence, the result of
    the arithmetic expression is an empty sequence, and the implementation
    need not evaluate the other operand or apply the operator. However,
    an implementation may choose to evaluate the other operand in order
    to determine whether it raises an error.</p></item><item><p> If the atomized operand is a sequence of
length greater than one, a <termref def="dt-type-error">type error</termref> is raised <errorref class="TY" code="0004"/>.</p></item><item><p>If the atomized operand is of type <code>xs:untypedAtomic</code>, it is cast to  <code>xs:double</code>. If
the cast fails, a <termref def="dt-dynamic-error">dynamic
error</termref> is raised. [err:FORG0001]</p></item></olist><p>After evaluation of the operands, if the types of the operands are a valid combination
for the given arithmetic operator, the operator is applied to the operands,
resulting in an atomic value or a <termref def="dt-dynamic-error">dynamic error</termref> (for example, an error
might result from dividing by zero.) The combinations of atomic types
that are accepted by the various arithmetic operators, and their
respective result types, are listed in <specref ref="mapping"/>
together with the <termref def="dt-operator-function">operator functions</termref>
that define the semantics of the operator for each
type combination, including the dynamic errors that can be raised by the operator. The definitions of the operator functions are found in <bibref ref="xpath-functions-30"/>.</p><p>If the types of the operands, after evaluation, are not a valid combination for the given operator, according to the rules in <specref ref="mapping"/>, a <termref def="dt-type-error">type error</termref> is raised <errorref class="TY" code="0004"/>.</p><p>XPath 3.0 supports two division operators named <code>div</code> and <code>idiv</code>. Each of these operators accepts two operands of any <termref def="dt-numeric">numeric</termref> type. As described in <bibref ref="xpath-functions-30"/>, <code role="parse-test">$arg1 idiv $arg2</code> is equivalent to <code role="parse-test">($arg1 div $arg2) cast as xs:integer?</code> except for error cases.</p><p>Here are some examples of arithmetic expressions:</p><ulist><item><p>The first expression below returns the <code>xs:decimal</code> value <code role="parse-test">-1.5</code>, and the second expression returns the <code>xs:integer</code> value <code role="parse-test">-1</code>:</p><eg role="parse-test" xml:space="preserve">-3 div 2
-3 idiv 2</eg></item><item><p>Subtraction of two date values results in a value of type <code>xs:dayTimeDuration</code>:</p><eg role="parse-test" xml:space="preserve">$emp/hiredate - $emp/birthdate</eg></item><item><p>This example illustrates the difference between a subtraction operator and a
hyphen:</p><eg role="parse-test" xml:space="preserve">$unit-price - $unit-discount</eg></item><item><p>Unary operators have higher precedence than binary operators, subject of
course to the use of parentheses. Therefore, the following two examples have different meanings:</p><eg xml:space="preserve">-$bellcost + $whistlecost
-($bellcost + $whistlecost)</eg></item></ulist><note><p id="note-consecutive-unary-ops">Multiple consecutive unary arithmetic operators are permitted by XPath 3.0 for compatibility with <bibref ref="xpath"/>.</p></note></div2><div2 id="id-string-concat-expr"><head>String Concatenation Expressions</head><scrap headstyle="show"><head/><prod num="19" id="doc-xpath30-StringConcatExpr"><lhs>StringConcatExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-RangeExpr" xlink:type="simple">RangeExpr</nt> ( "||"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-RangeExpr" xlink:type="simple">RangeExpr</nt> )*</rhs></prod></scrap><p>String concatenation expressions allow the string representations of values to be concatenated. In XPath 3.0, <code>$a || $b</code> is equivalent to <code>fn:concat($a, $b)</code>. The following expression evaluates to the string <code>concatenate</code>:</p><eg xml:space="preserve">"con" || "cat" || "enate"</eg></div2><div2 id="id-comparisons"><head>Comparison Expressions</head><p>Comparison expressions allow two values to be compared. XPath 3.0 provides
three kinds of comparison expressions, called value comparisons, general
comparisons, and node comparisons.</p><scrap headstyle="show"><head/><prod num="18" id="doc-xpath30-ComparisonExpr"><lhs>ComparisonExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-StringConcatExpr" xlink:type="simple">StringConcatExpr</nt> ( (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ValueComp" xlink:type="simple">ValueComp</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-GeneralComp" xlink:type="simple">GeneralComp</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-NodeComp" xlink:type="simple">NodeComp</nt>)  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-StringConcatExpr" xlink:type="simple">StringConcatExpr</nt> )?</rhs></prod><prod num="32" id="doc-xpath30-ValueComp"><lhs>ValueComp</lhs><rhs>"eq"  |  "ne"  |  "lt"  |  "le"  |  "gt"  |  "ge"</rhs></prod><prod num="31" id="doc-xpath30-GeneralComp"><lhs>GeneralComp</lhs><rhs>"="  |  "!="  |  "&lt;"  |  "&lt;="  |  "&gt;"  |  "&gt;="</rhs></prod><prod num="33" id="doc-xpath30-NodeComp"><lhs>NodeComp</lhs><rhs>"is"  |  "&lt;&lt;"  |  "&gt;&gt;"</rhs></prod></scrap><note role="xpath"><p role="xpath">When an XPath expression is written
within an XML document, the XML escaping rules for special characters
must be followed; thus "<code>&lt;</code>" must be written as
"<code>&amp;lt;</code>".</p></note><div3 id="id-value-comparisons"><head>Value Comparisons</head><p>The value comparison operators are <code>eq</code>, <code>ne</code>, <code>lt</code>, <code>le</code>, <code>gt</code>, and <code>ge</code>. Value comparisons are used for comparing single values.</p><p>The first step in evaluating a value comparison is to evaluate its operands. The order in which the operands are evaluated is <termref def="dt-implementation-dependent">implementation-dependent</termref>. Each operand is evaluated by applying the following steps, in order:</p><olist><item><p>
                        <termref def="dt-atomization">Atomization</termref> is applied to the operand. The result of this
    operation is called the <term>atomized operand</term>.</p></item><item><p>If the atomized operand is an empty sequence, the result of
    the value comparison is an empty sequence, and the implementation
    need not evaluate the other operand or apply the operator. However,
    an implementation may choose to evaluate the other operand in order
    to determine whether it raises an error.</p></item><item><p> If the atomized operand is a sequence of
length greater than one, a <termref def="dt-type-error">type error</termref> is raised <errorref class="TY" code="0004"/>.</p></item><item><p>If the atomized operand is of type <code>xs:untypedAtomic</code>, it is cast to  <code>xs:string</code>.</p><note><p>The purpose of this rule is to make value comparisons transitive. Users should be aware that the general comparison operators have a different rule for casting of <code>xs:untypedAtomic</code> operands. Users should also be aware that transitivity of value comparisons may be compromised by loss of precision during type conversion (for example, two <code>xs:integer</code> values that differ slightly may both be considered equal to the same <code>xs:float</code> value because <code>xs:float</code> has less precision than <code>xs:integer</code>).</p></note></item></olist><p>Next, if possible, the two operands are converted to their least common
type by a combination of <termref def="dt-type-promotion">type promotion</termref> and <termref def="dt-subtype-substitution">subtype substitution</termref>.  For
example, if the operands are of type <code>hatsize</code> (derived from <code>xs:integer</code>) and
<code>shoesize</code> (derived from <code>xs:float</code>), their least common type is <code>xs:float</code>.</p><p>Finally, if the types of the operands are a valid combination for the
given operator, the operator is applied to the operands. The combinations of atomic types
that are accepted by the various value comparison operators, and their
respective result types, are listed in <specref ref="mapping"/>
together with the <termref def="dt-operator-function">operator functions</termref>
that define the semantics of the operator for each
type combination. The definitions of the operator functions are found in <bibref ref="xpath-functions-30"/>.</p><p>Informally, if both atomized operands consist of exactly one atomic
value, then the result of the comparison is <code>true</code> if the value of the
first operand is (equal, not equal, less than, less than or equal,
greater than, greater than or equal) to the value of the second
operand; otherwise the result of the comparison is <code>false</code>.</p><p>If the types of the operands, after evaluation, are not a valid combination for the given operator, according to the rules in <specref ref="mapping"/>, a <termref def="dt-type-error">type error</termref> is raised <errorref class="TY" code="0004"/>.</p><p>Here are some examples of value comparisons:</p><ulist><item><p>The following comparison atomizes the node(s) that are returned by the expression <code>$book/author</code>. The comparison is true only if the result of atomization is the value "Kennedy" as an instance of <code>xs:string</code> or <code>xs:untypedAtomic</code>. If the result of atomization is an empty sequence, the result of the comparison is an empty sequence. If the result of atomization is a sequence containing more than one value, a <termref def="dt-type-error">type error</termref> is raised <errorref class="TY" code="0004"/>.</p><eg role="parse-test" xml:space="preserve">$book1/author eq "Kennedy"</eg></item><item><p>The following <termref def="dt-path-expression">path expression</termref> contains a predicate that selects products whose weight is greater than 100. For any product that does not have a <code>weight</code> subelement, the value of the predicate is the empty sequence, and the product is not selected. This example assumes that <code>weight</code> is a validated element with a numeric type.</p><eg role="parse-test" xml:space="preserve">//product[weight gt 100]</eg></item><item><p>The following comparison is true if <code>my:hatsize</code> and <code>my:shoesize</code> are both user-defined types that are derived by restriction from a primitive <termref def="dt-numeric">numeric</termref> type:</p><eg role="parse-test" xml:space="preserve">my:hatsize(5) eq my:shoesize(5)</eg></item><item><p>The following comparison is true. The <code>eq</code> operator compares two QNames by performing codepoint-comparisons of their namespace URIs and their local names, ignoring their namespace prefixes.</p><eg role="parse-test" xml:space="preserve">fn:QName("http://example.com/ns1", "this:color")
   eq fn:QName("http://example.com/ns1", "that:color")</eg></item></ulist></div3><div3 id="id-general-comparisons"><head>General Comparisons</head><p>The general comparison operators are <code>=</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, and <code>&gt;=</code>. General comparisons are existentially quantified comparisons that may be applied to operand sequences of any length. The result of a general comparison that does not raise an error is
always <code>true</code> or <code>false</code>.</p><p role="xpath">If <termref def="dt-xpath-compat-mode">XPath 1.0 compatibility mode</termref> is <code>true</code>, a general comparison is evaluated by applying the following rules, in order:</p><olist role="xpath"><item><p>If either operand is a single atomic value that is an instance of
<code>xs:boolean</code>, then the other operand is converted to <code>xs:boolean</code> by taking its
<termref def="dt-ebv">effective boolean value</termref>.</p></item><item><p>
                        <termref def="dt-atomization">Atomization</termref> is applied to each operand. After atomization, each operand is a sequence of atomic values.</p></item><item><p>If the comparison operator is <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, or <code>&gt;=</code>, then each item in both of the
operand sequences is converted to the type  <code>xs:double</code> by applying the
<code>fn:number</code> function. (Note that <code>fn:number</code> returns the value <code>NaN</code> if its operand cannot be converted to a number.)</p></item><item><p>The result of the comparison is <code>true</code> if and only if there is a pair of
atomic values, one in the first operand sequence and the other in the second operand sequence, that have the required
<term>magnitude relationship</term>. Otherwise the result of the  comparison is
<code>false</code>. The <term>magnitude relationship</term> between two atomic values is determined by
applying the following rules. If a <code>cast</code> operation called for by these rules is not successful, a dynamic error is raised. [err:FORG0001]</p><olist><item><p>If at least one of the two atomic values is an instance of a <termref def="dt-numeric">numeric</termref> type, then both atomic values are converted to the type <code>xs:double</code> by
applying the <code>fn:number</code> function.</p></item><item><p>If at least one of the two atomic values is an instance of <code>xs:string</code>,
or if both atomic values are instances of <code>xs:untypedAtomic</code>, then both
atomic values are cast to the type <code>xs:string</code>.</p></item><item><p>If one of the atomic values is an instance of <code>xs:untypedAtomic</code> and the other is not an instance of <code>xs:string</code>, <code>xs:untypedAtomic</code>, or any <termref def="dt-numeric">numeric</termref> type, then the <code>xs:untypedAtomic</code> value is
cast to the <termref def="dt-dynamic-type">dynamic type</termref> of the other value.</p></item><item><p>After performing the conversions described above, the atomic values are
compared using one of the value comparison operators <code>eq</code>, <code>ne</code>, <code>lt</code>, <code>le</code>, <code>gt</code>, or
<code>ge</code>, depending on whether the general comparison operator was <code>=</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>,
<code>&gt;</code>, or <code>&gt;=</code>. The values have the required <term>magnitude relationship</term> if and only if the result
of this value comparison is <code>true</code>.</p></item></olist></item></olist><p>
                  <phrase role="xpath">If <termref def="dt-xpath-compat-mode">XPath 1.0 compatibility mode</termref> is <code>false</code>, a</phrase> general comparison is evaluated by applying the following rules, in order:</p><olist><item><p>
                        <termref def="dt-atomization">Atomization</termref> is applied to each operand. After atomization, each operand is a sequence of atomic values.</p></item><item><p>The result of the comparison is <code>true</code> if and only if there is a pair of
atomic values, one in the first operand sequence and the other in the second operand sequence, that have the required
<term>magnitude relationship</term>. Otherwise the result of the  comparison is
<code>false</code>. The <term>magnitude relationship</term> between two atomic values is determined by
applying the following rules. If a <code>cast</code> operation called for by these rules is not successful, a dynamic error is raised. [err:FORG0001]</p><olist><item diff="chg" at="XQ.E18 and XP.E10"><p>If both atomic values are instances of <code>xs:untypedAtomic</code>,
                then the values are cast to the type <code>xs:string</code>.
             </p></item><item diff="chg" at="XQ.E18 and XP.E10"><p>If exactly one of the atomic values is an instance of
                <code>xs:untypedAtomic</code>, it is cast to a type depending on
                the other value's dynamic type T according to the following rules,
                in which V denotes the value to be cast:
             </p><olist><item><p>If T is a numeric type or is derived from a numeric type,
                      then V is cast to <code>xs:double</code>.</p></item><item><p>If T is <code>xs:dayTimeDuration</code> or is derived from
                      <code>xs:dayTimeDuration</code>,
                      then V is cast to <code>xs:dayTimeDuration</code>.</p></item><item><p>If T is <code>xs:yearMonthDuration</code> or is derived from
                      <code>xs:yearMonthDuration</code>,
                      then V is cast to <code>xs:yearMonthDuration</code>.</p></item><item><p>In all other cases, V is cast to the primitive base type of T.</p></item></olist><note><p>
                The special treatment of the duration types is required to avoid
                errors that may arise when comparing the primitive type
                <code>xs:duration</code> with any duration type.
             </p></note></item><item><p>After performing the conversions described above, the atomic values are
compared using one of the value comparison operators <code>eq</code>, <code>ne</code>, <code>lt</code>, <code>le</code>, <code>gt</code>, or
<code>ge</code>, depending on whether the general comparison operator was <code>=</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>,
<code>&gt;</code>, or <code>&gt;=</code>. The values have the required <term>magnitude relationship</term> if and only if the result
of this value comparison is <code>true</code>.</p></item></olist></item></olist><p>When evaluating a general comparison in which either operand is a sequence of items, an implementation may return <code>true</code> as soon as it finds an item in the first operand and an item in the second operand that have the required <term>magnitude relationship</term>. Similarly, a general comparison may raise a <termref def="dt-dynamic-error">dynamic error</termref> as soon as it encounters an error in evaluating either operand, or in comparing a pair of items from the two operands. As a result of these rules, the result of a general comparison is not deterministic in the presence of errors.</p><p>Here are some examples of  general comparisons:</p><ulist><item><p>The following comparison is true if the <termref def="dt-typed-value">typed value</termref> of any
<code>author</code> subelement of <code>$book1</code> is "Kennedy" as an instance of <code>xs:string</code> or <code>xs:untypedAtomic</code>:</p><eg role="parse-test" xml:space="preserve">$book1/author = "Kennedy"</eg></item><item><p>The following example contains three general comparisons. The value of the first two comparisons is <code>true</code>, and the value of the third comparison is <code>false</code>. This example illustrates the fact that general comparisons are not transitive.</p><eg xml:space="preserve">(1, 2) = (2, 3)
(2, 3) = (3, 4)
(1, 2) = (3, 4)</eg></item><item><p>The following example contains two general comparisons, both of which are <code>true</code>. This example illustrates the fact that the <code>=</code> and <code>!=</code> operators are not inverses of each other.</p><eg xml:space="preserve">(1, 2) = (2, 3)
(1, 2) != (2, 3)</eg></item><item><p>Suppose that <code>$a</code>, <code>$b</code>, and <code>$c</code> are bound to element nodes with type annotation <code>xs:untypedAtomic</code>, with <termref def="dt-string-value">string values</termref> "<code>1</code>", "<code>2</code>", and "<code>2.0</code>" respectively. Then <code role="parse-test">($a, $b) = ($c, 3.0)</code> returns <code>false</code>, because <code>$b</code> and <code>$c</code> are compared as strings. However, <code role="parse-test">($a, $b) = ($c, 2.0)</code> returns <code>true</code>, because <code>$b</code> and <code>2.0</code> are compared as numbers.</p></item></ulist></div3><div3 id="id-node-comparisons"><head>Node Comparisons</head><p>Node comparisons are used to compare two nodes, by their identity or by their <termref def="dt-document-order">document order</termref>. The result of a node comparison is defined by the following rules:</p><olist><item><p>The operands of a node comparison are evaluated in <termref def="dt-implementation-dependent">implementation-dependent</termref> order.</p></item><item><p>If either operand is an empty sequence, the result of the
    comparison is an empty sequence, and the implementation need not
    evaluate the other operand or apply the operator. However, an
    implementation may choose to evaluate the other operand in order to
    determine whether it raises an error.</p></item><item><p> Each operand must be either a single node or an empty sequence; otherwise
a <termref def="dt-type-error">type error</termref> is raised <errorref class="TY" code="0004"/>.</p></item><item><p>A comparison with the <code>is</code> operator is <code>true</code> if the two operand nodes have the same identity, and are thus the same node; otherwise it
is <code>false</code>. See <bibref ref="xpath-datamodel-30"/> for a definition of node identity.</p></item><item><p>A comparison with the <code>&lt;&lt;</code> operator returns <code>true</code> if the left operand node precedes the right operand node in
<termref def="dt-document-order">document order</termref>; otherwise it returns <code>false</code>.</p></item><item><p>A comparison with the <code>&gt;&gt;</code> operator returns <code>true</code> if the left operand node follows the right operand node in
<termref def="dt-document-order">document order</termref>; otherwise it returns <code>false</code>.</p></item></olist><p>Here are some examples of node comparisons:</p><ulist><item><p>The following comparison is true only if the left and right sides each
evaluate to exactly the same single node:</p><eg role="parse-test" xml:space="preserve">/books/book[isbn="1558604820"] is /books/book[call="QA76.9 C3845"]</eg></item><item><p>The following comparison is true only if the node identified by the left
side occurs before the node identified by the right side in document order:</p><eg role="parse-test" xml:space="preserve">/transactions/purchase[parcel="28-451"]
   &lt;&lt; /transactions/sale[parcel="33-870"]</eg></item></ulist></div3></div2><div2 id="id-logical-expressions"><head>Logical Expressions</head><p>A <term>logical expression</term> is either an <term>and-expression</term> or
an <term>or-expression</term>. If a logical expression does not raise an error, its value is always one
of the boolean values <code>true</code> or <code>false</code>.</p><scrap headstyle="show"><head/><prod num="16" id="doc-xpath30-OrExpr"><lhs>OrExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AndExpr" xlink:type="simple">AndExpr</nt> ( "or"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AndExpr" xlink:type="simple">AndExpr</nt> )*</rhs></prod><prod num="17" id="doc-xpath30-AndExpr"><lhs>AndExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ComparisonExpr" xlink:type="simple">ComparisonExpr</nt> ( "and"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ComparisonExpr" xlink:type="simple">ComparisonExpr</nt> )*</rhs></prod></scrap><p>The first step in evaluating a logical expression is to find the  <termref def="dt-ebv">effective boolean value</termref> of each of its operands (see <specref ref="id-ebv"/>).</p><p>The value of an and-expression is determined by the effective
boolean values (EBV's) of its operands, as shown in the following table:</p><table border="1" cellpadding="4" cellspacing="1" width="80%" summary="AND EBV"><tbody><tr><td rowspan="1" colspan="1">AND:</td><td rowspan="1" colspan="1">EBV<sub>2</sub> =
<code>true</code>
                     </td><td rowspan="1" colspan="1">EBV<sub>2</sub> = <code>false</code>
                     </td><td rowspan="1" colspan="1">error in EBV<sub>2</sub>
                     </td></tr><tr><td rowspan="1" colspan="1">EBV<sub>1</sub> =
<code>true</code>
                     </td><td rowspan="1" colspan="1">
                        <code>true</code>
                     </td><td rowspan="1" colspan="1">
                        <code>false</code>
                     </td><td rowspan="1" colspan="1">error</td></tr><tr><td rowspan="1" colspan="1">EBV<sub>1</sub>
= <code>false</code>
                     </td><td rowspan="1" colspan="1">
                        <code>false</code>
                     </td><td rowspan="1" colspan="1">
                        <code>false</code>
                     </td><td rowspan="1" colspan="1">
                        <phrase role="xpath">if <termref def="dt-xpath-compat-mode">XPath 1.0 compatibility mode</termref> is <code>true</code>, then <code>false</code>; otherwise either <code>false</code> or error.</phrase>
                     </td></tr><tr><td rowspan="1" colspan="1">error in EBV<sub>1</sub>
                     </td><td rowspan="1" colspan="1">error</td><td rowspan="1" colspan="1">
                        <phrase role="xpath">if <termref def="dt-xpath-compat-mode">XPath 1.0 compatibility mode</termref> is <code>true</code>, then error; otherwise either <code>false</code> or error.</phrase>
                     </td><td rowspan="1" colspan="1">error</td></tr></tbody></table><p>The value of an
or-expression is determined by the effective boolean values (EBV's) of
its operands, as shown in
the following table:</p><table border="1" cellpadding="4" cellspacing="1" width="80%" summary="OR EBV"><tbody><tr><td rowspan="1" colspan="1">OR:</td><td rowspan="1" colspan="1">EBV<sub>2</sub> =
<code>true</code>
                     </td><td rowspan="1" colspan="1">EBV<sub>2</sub> = <code>false</code>
                     </td><td rowspan="1" colspan="1">error in
EBV<sub>2</sub>
                     </td></tr><tr><td rowspan="1" colspan="1">EBV<sub>1</sub> =
<code>true</code>
                     </td><td rowspan="1" colspan="1">
                        <code>true</code>
                     </td><td rowspan="1" colspan="1">
                        <code>true</code>
                     </td><td rowspan="1" colspan="1">
                        <phrase role="xpath">if <termref def="dt-xpath-compat-mode">XPath 1.0 compatibility mode</termref> is <code>true</code>, then <code>true</code>; otherwise either <code>true</code> or error.</phrase>
                     </td></tr><tr><td rowspan="1" colspan="1">EBV<sub>1</sub> =
<code>false</code>
                     </td><td rowspan="1" colspan="1">
                        <code>true</code>
                     </td><td rowspan="1" colspan="1">
                        <code>false</code>
                     </td><td rowspan="1" colspan="1">error</td></tr><tr><td rowspan="1" colspan="1">error
in EBV<sub>1</sub>
                     </td><td rowspan="1" colspan="1">
                        <phrase role="xpath">if <termref def="dt-xpath-compat-mode">XPath 1.0 compatibility mode</termref> is <code>true</code>, then error; otherwise either <code>true</code> or error.</phrase>
                     </td><td rowspan="1" colspan="1">error</td><td rowspan="1" colspan="1">error</td></tr></tbody></table><p role="xpath">If <termref def="dt-xpath-compat-mode">XPath 1.0 compatibility mode</termref> is <code>true</code>, the order in which the operands of a logical expression are evaluated is effectively prescribed. Specifically, it is defined that when there is no
need to evaluate the second operand in order to determine the result, then
no error can occur as a result of evaluating the second operand.</p><p>
               <phrase role="xpath">If <termref def="dt-xpath-compat-mode">XPath 1.0 compatibility mode</termref> is <code>false</code>, the
order in which the operands of a logical expression are evaluated is
<termref def="dt-implementation-dependent">implementation-dependent</termref>. In this case,</phrase> an or-expression can return <code>true</code> if the first
expression evaluated is true, and it can raise an error if evaluation
of the first expression raises an error. Similarly, an and-expression
can return <code>false</code> if the first expression evaluated is
false, and it can raise an error if evaluation of the first expression
raises an error. As a result of these rules, a logical expression is
not deterministic in the presence of errors, as illustrated in the examples
below.</p><p>Here are some examples of logical expressions:</p><ulist><item><p>The following expressions return
<code>true</code>:</p><eg role="parse-test" xml:space="preserve">1 eq 1 and 2 eq 2</eg><eg role="parse-test" xml:space="preserve">1 eq 1 or 2 eq 3</eg></item><item><p>The following
expression may return either <code>false</code> or raise a <termref def="dt-dynamic-error">dynamic error</termref>
                     <phrase role="xpath"> (in <termref def="dt-xpath-compat-mode">XPath 1.0 compatibility mode</termref>, the result must be <code>false</code>)</phrase>:</p><eg role="parse-test" xml:space="preserve">1 eq 2 and 3 idiv 0 = 1</eg></item><item><p>The
following expression may return either <code>true</code> or raise a
<termref def="dt-dynamic-error">dynamic error</termref>
                     <phrase role="xpath"> (in <termref def="dt-xpath-compat-mode">XPath 1.0 compatibility mode</termref>, the result must be <code>true</code>)</phrase>:</p><eg role="parse-test" xml:space="preserve">1 eq 1 or 3 idiv 0 = 1</eg></item><item><p>The
following expression must raise a <termref def="dt-dynamic-error">dynamic error</termref>:</p><eg role="parse-test" xml:space="preserve">1 eq 1 and 3 idiv 0 = 1</eg></item></ulist><p>In addition to and- and or-expressions, XPath 3.0 provides a
function named <code>fn:not</code> that takes a general sequence as
parameter and returns a boolean value.  The <code>fn:not</code> function
is defined in <bibref ref="xpath-functions-30"/>. The
<code>fn:not</code> function reduces its parameter to an <termref def="dt-ebv">effective boolean value</termref>. It then returns
<code>true</code> if the effective boolean value of its parameter is
<code>false</code>, and <code>false</code> if the effective boolean
value of its parameter is <code>true</code>. If an error is
encountered in finding the effective boolean value of its operand,
<code>fn:not</code> raises the same error.</p></div2><div2 role="xpath" id="id-for-expressions"><head>For Expressions</head><p>XPath provides an iteration facility called a <term>for expression</term>.</p><scrap headstyle="show"><head/><prod num="8" id="doc-xpath30-ForExpr"><lhs>ForExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SimpleForClause" xlink:type="simple">SimpleForClause</nt>  "return"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>
                  </rhs></prod><prod num="9" id="doc-xpath30-SimpleForClause"><lhs>SimpleForClause</lhs><rhs>"for"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SimpleForBinding" xlink:type="simple">SimpleForBinding</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SimpleForBinding" xlink:type="simple">SimpleForBinding</nt>)*</rhs></prod><prod num="10" id="doc-xpath30-SimpleForBinding"><lhs>SimpleForBinding</lhs><rhs>"$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-VarName" xlink:type="simple">VarName</nt>  "in"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>
                  </rhs></prod></scrap><p>A <code>for</code> expression is evaluated as follows:</p><olist><item><p>If the <code>for</code> expression uses multiple variables, it is first expanded to a set of nested <code>for</code> expressions, each of which uses only one variable. For example, the expression
<code role="parse-test">for $x in X, $y in Y return $x + $y</code>
is expanded to
<code role="parse-test">for $x in X return
    for $y in Y return $x + $y</code>.</p></item><item><p>In a single-variable <code>for</code> expression, the variable is called the <term>range variable</term>, the value of the expression that follows the <code>in</code> keyword is called the <term>binding sequence</term>, and the expression that follows the <code>return</code> keyword is called the <term>return expression</term>. The result of the <code>for</code> expression is obtained by evaluating the <code>return</code> expression once for each item in the binding sequence, with the range variable bound to that item. The resulting sequences  are concatenated (as if by the <termref def="dt-comma-operator">comma operator</termref>) in the order of the items in the binding sequence from which they were derived.
</p></item></olist><p role="xpath">The following example illustrates the use of a <code>for</code> expression in restructuring an input document. The example is based on the following
input:</p><eg xml:space="preserve">&lt;bib&gt;
  &lt;book&gt;
    &lt;title&gt;TCP/IP Illustrated&lt;/title&gt;
    &lt;author&gt;Stevens&lt;/author&gt;
    &lt;publisher&gt;Addison-Wesley&lt;/publisher&gt;
  &lt;/book&gt;
  &lt;book&gt;
    &lt;title&gt;Advanced Programming in the Unix Environment&lt;/title&gt;
    &lt;author&gt;Stevens&lt;/author&gt;
    &lt;publisher&gt;Addison-Wesley&lt;/publisher&gt;
  &lt;/book&gt;
  &lt;book&gt;
    &lt;title&gt;Data on the Web&lt;/title&gt;
    &lt;author&gt;Abiteboul&lt;/author&gt;
    &lt;author&gt;Buneman&lt;/author&gt;
    &lt;author&gt;Suciu&lt;/author&gt;
  &lt;/book&gt;
&lt;/bib&gt;</eg><p>The following example transforms the input document into a list in
which each author's name appears only once, followed by a list of
titles of books written by that author. This example assumes that the
context item is the <code>bib</code> element in the input
document.</p><eg role="parse-test" xml:space="preserve"><phrase role="parse-test">for $a in fn:distinct-values(book/author)
return ((book/author[. = $a])[1], book[author = $a]/title)</phrase></eg><p>The result of the above expression consists of the following
sequence of elements. The titles of books written by a given author
are listed after the name of the author.

The ordering of <code>author</code> elements in the result is <termref def="dt-implementation-dependent">implementation-dependent</termref> due to the semantics of the <code>fn:distinct-values</code> function.</p><eg xml:space="preserve">&lt;author&gt;Stevens&lt;/author&gt;
&lt;title&gt;TCP/IP Illustrated&lt;/title&gt;
&lt;title&gt;Advanced Programming in the Unix environment&lt;/title&gt;
&lt;author&gt;Abiteboul&lt;/author&gt;
&lt;title&gt;Data on the Web&lt;/title&gt;
&lt;author&gt;Buneman&lt;/author&gt;
&lt;title&gt;Data on the Web&lt;/title&gt;
&lt;author&gt;Suciu&lt;/author&gt;
&lt;title&gt;Data on the Web&lt;/title&gt;</eg><p>The following example illustrates a <code>for</code> expression containing more than one variable:</p><eg role="parse-test" xml:space="preserve"><phrase role="parse-test">for $i in (10, 20),
    $j in (1, 2)
return ($i + $j)</phrase></eg><p>The result of the above expression, expressed as a sequence of numbers, is as follows: <code>11, 12, 21, 22</code>
            </p><p>The scope of a variable bound in a <code>for</code> expression comprises all subexpressions of the <code>for</code> expression
that appear after the variable binding. The scope does not
include the expression to which the variable is bound. The following example illustrates how a variable binding may reference another variable bound earlier in the same  <code>for</code> expression:</p><eg role="parse-test" xml:space="preserve"><phrase role="parse-test">for $x in $z, $y in f($x)
return g($x, $y)</phrase></eg><note><p>The focus for evaluation of the <code>return</code> clause of a <code>for</code> expression
is the same as the focus for evaluation of the <code>for</code> expression itself. The
following example, which attempts to find the total value of a set of
order-items, is therefore incorrect:

</p><eg role="error" xml:space="preserve">fn:sum(for $i in order-item return @price * @qty)</eg><p>

Instead, the expression must be written to use the variable bound in the <code>for</code> clause:</p><eg role="parse-test" xml:space="preserve">fn:sum(for $i in order-item return $i/@price * $i/@qty)</eg></note></div2><div2 id="id-let-expressions" role="xpath"><head>Let Expressions</head><p>XPath allows a variable to be declared and bound to a value using a <term>let expression</term>.</p><scrap headstyle="show"><head/><prod num="11" id="doc-xpath30-LetExpr"><lhs>LetExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SimpleLetClause" xlink:type="simple">SimpleLetClause</nt>  "return"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>
                  </rhs></prod><prod num="12" id="doc-xpath30-SimpleLetClause"><lhs>SimpleLetClause</lhs><rhs>"let"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SimpleLetBinding" xlink:type="simple">SimpleLetBinding</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SimpleLetBinding" xlink:type="simple">SimpleLetBinding</nt>)*</rhs></prod><prod num="13" id="doc-xpath30-SimpleLetBinding"><lhs>SimpleLetBinding</lhs><rhs>"$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-VarName" xlink:type="simple">VarName</nt>  ":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>
                  </rhs></prod></scrap><p>A let expression is evaluated as follows:</p><ulist><item><p>If the let expression uses multiple variables, it is first expanded to a
set of nested let expressions, each of which uses only one variable. For
example, the expression <code role="parse-test">let $x := 4, $y := 3 return $x + $y</code> is expanded to
<code role="parse-test">let $x := 4 return let $y := 3 return $x + $y</code>.</p></item><item><p>In a single-variable let expression, the variable is called the range
variable, the value of the expression that follows the <code>:=</code> symbol is called
the binding sequence, and the expression that follows the return keyword is
called the return expression. The result of the let expression is obtained
by evaluating the return expression with the range variable bound to the
binding sequence. </p></item></ulist><p>The scope of a variable bound in a let expression comprises all
subexpressions of the let expression that appear after the variable binding.
The scope does not include the expression to which the variable is bound.
The following example illustrates how a variable binding may reference
another variable bound earlier in the same let expression:</p><eg role="parse-test" xml:space="preserve">
let $x := doc('a.xml')/*, $y := $x//*
return $y[@value gt $x/@min]
</eg></div2><div2 id="id-conditionals"><head>Conditional Expressions</head><p>XPath 3.0 supports a conditional expression based on the keywords <code>if</code>, <code>then</code>, and <code>else</code>.</p><scrap headstyle="show"><head/><prod num="15" id="doc-xpath30-IfExpr"><lhs>IfExpr</lhs><rhs>"if"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Expr" xlink:type="simple">Expr</nt>  ")"  "then"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>  "else"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>
                  </rhs></prod></scrap><p>The expression following the <code>if</code> keyword is called the <term>test expression</term>, and the expressions
following the <code>then</code> and <code>else</code> keywords are called the <term>then-expression</term> and <term>else-expression</term>, respectively.</p><p>The first step in processing a conditional expression is to find
the <termref def="dt-ebv">effective boolean value</termref> of the test expression, as defined in <specref ref="id-ebv"/>.</p><p>The value of a conditional expression is defined as follows: If the
effective boolean value of the test expression is <code>true</code>, the value of the then-expression is returned. If the
effective boolean value of the test expression is <code>false</code>,
the value of the else-expression is returned.</p><p>Conditional expressions have a special rule for propagating <termref def="dt-dynamic-error">dynamic errors</termref>. If the effective value of the test expression is <code>true</code>, the conditional expression ignores (does not raise) any dynamic errors encountered in the else-expression. In this case, since the else-expression can have no observable effect, it need not be evaluated. Similarly, if the effective value of the test expression is <code>false</code>, the conditional expression ignores any <termref def="dt-dynamic-error">dynamic errors</termref> encountered in the then-expression, and the then-expression need not be evaluated.</p><p>Here are some examples of conditional expressions:</p><ulist><item><p>In this example, the test expression is a comparison expression:</p><eg role="parse-test" xml:space="preserve">if ($widget1/unit-cost &lt; $widget2/unit-cost)
  then $widget1
  else $widget2</eg></item><item><p>In this example, the test expression tests for the existence of an attribute
named <code>discounted</code>, independently of its value:</p><eg role="parse-test" xml:space="preserve">if ($part/@discounted)
  then $part/wholesale
  else $part/retail</eg></item></ulist></div2><div2 id="id-quantified-expressions"><head>Quantified Expressions</head><p>Quantified expressions support existential and universal quantification. The
value of a quantified expression is always <code>true</code> or <code>false</code>.</p><scrap headstyle="show"><head/><prod num="14" id="doc-xpath30-QuantifiedExpr"><lhs>QuantifiedExpr</lhs><rhs>("some"  |  "every")  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-VarName" xlink:type="simple">VarName</nt>  "in"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>  (","  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-VarName" xlink:type="simple">VarName</nt>  "in"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>)*  "satisfies"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>
                  </rhs></prod></scrap><p>A <term>quantified expression</term> begins with
a <term>quantifier</term>, which is the keyword <code>some</code> or <code>every</code>, followed by one or more in-clauses that are used to bind variables,
followed by the keyword <code>satisfies</code> and a test expression. Each in-clause associates a variable with an
expression that returns a sequence of items, called the binding sequence for that variable. The in-clauses generate tuples of variable bindings, including a tuple for each combination of items in the binding sequences of the respective variables. Conceptually, the test expression is evaluated for each
tuple of variable bindings. Results depend on the <termref def="dt-ebv">effective boolean value</termref> of the test expressions, as defined in <specref ref="id-ebv"/>. The value of the quantified expression is defined
by the following rules:</p><olist><item><p>If the quantifier is <code>some</code>, the quantified expression is <code>true</code> if at least one evaluation of the test expression has the <termref def="dt-ebv">effective boolean value</termref> 
                     <code>true</code>; otherwise the quantified expression is <code>false</code>. This rule implies that, if the in-clauses generate zero binding
tuples, the value of the quantified expression is <code>false</code>.</p></item><item><p>If the quantifier is <code>every</code>, the quantified expression is <code>true</code> if every evaluation of the test expression has the <termref def="dt-ebv">effective boolean value</termref> 
                     <code>true</code>; otherwise the quantified expression is <code>false</code>. This rule implies that, if the in-clauses generate zero binding
tuples, the value of the quantified
expression is <code>true</code>.</p></item></olist><p>The scope of a variable bound in a quantified expression comprises all
subexpressions of the quantified expression that appear after the variable binding. The scope does not include the expression to which the variable is bound.
</p><p>The order in which test expressions are evaluated for the various binding
tuples is <termref def="dt-implementation-dependent">implementation-dependent</termref>. If the quantifier
is <code>some</code>, an implementation may
return <code>true</code> as soon as it finds one binding tuple for which the test expression has
an <termref def="dt-ebv">effective boolean value</termref> of <code>true</code>, and it may raise a <termref def="dt-dynamic-error">dynamic error</termref> as soon as it finds one binding tuple for
which the test expression raises an error. Similarly, if the quantifier is <code>every</code>, an implementation may return <code>false</code> as soon as it finds one binding tuple for which the test expression has
an <termref def="dt-ebv">effective boolean value</termref> of <code>false</code>, and it may raise a <termref def="dt-dynamic-error">dynamic error</termref> as soon as it finds one binding tuple for
which the test expression raises an error. As a result of these rules, the
value of a quantified expression is not deterministic in the presence of
errors, as illustrated in the examples below.</p><p>Here are some examples of quantified expressions:</p><ulist><item><p>This expression is <code>true</code> if every <code>part</code> element has a <code>discounted</code> attribute (regardless of the values of these attributes):</p><eg role="parse-test" xml:space="preserve">every $part in /parts/part satisfies $part/@discounted</eg></item><item><p>This expression is <code>true</code> if at least
one <code>employee</code> element satisfies the given comparison expression:</p><eg role="parse-test" xml:space="preserve">some $emp in /emps/employee satisfies
     ($emp/bonus &gt; 0.25 * $emp/salary)</eg></item><item><p>In the following examples, each quantified expression evaluates its test
expression over nine tuples of variable bindings, formed from the Cartesian
product of the sequences <code>(1, 2, 3)</code> and <code>(2, 3, 4)</code>. The expression beginning with <code>some</code> evaluates to <code>true</code>, and the expression beginning with <code>every</code> evaluates to <code>false</code>.</p><eg role="parse-test" xml:space="preserve">some $x in (1, 2, 3), $y in (2, 3, 4)
satisfies $x + $y = 4</eg><eg role="parse-test" xml:space="preserve">every $x in (1, 2, 3), $y in (2, 3, 4)
satisfies $x + $y = 4</eg></item><item><p>This quantified expression may either return  <code>true</code> or raise a <termref def="dt-type-error">type error</termref>, since its test expression returns <code>true</code> for one variable binding
and raises a <termref def="dt-type-error">type error</termref> for another:</p><eg role="parse-test" xml:space="preserve">some $x in (1, 2, "cat") satisfies $x * 2 = 4</eg></item><item><p>This quantified expression may either return <code>false</code> or raise a <termref def="dt-type-error">type error</termref>, since its test expression returns <code>false</code> for one variable binding and raises a <termref def="dt-type-error">type error</termref> for another:</p><eg role="parse-test" xml:space="preserve">every $x in (1, 2, "cat") satisfies $x * 2 = 4</eg></item></ulist></div2><div2 id="id-expressions-on-datatypes"><head>Expressions on SequenceTypes</head><p>
               <termref def="dt-sequence-type">sequence types</termref> are used in <code>instance of</code>,  <code>cast</code>, <code>castable</code>, and <code>treat</code> expressions.</p><div3 id="id-instance-of"><head>Instance Of</head><scrap headstyle="show"><head/><prod num="25" id="doc-xpath30-InstanceofExpr"><lhs>InstanceofExpr</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TreatExpr" xlink:type="simple">TreatExpr</nt> ( "instance"  "of"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SequenceType" xlink:type="simple">SequenceType</nt> )?</rhs></prod></scrap><p>The boolean
operator <code>instance of</code>
returns <code>true</code> if the value of its first operand matches
the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SequenceType" xlink:type="simple">SequenceType</nt> in its second
operand, according to the rules for <termref def="dt-sequencetype-matching">SequenceType
matching</termref>; otherwise it returns <code>false</code>. For example:</p><ulist><item><p>
                        <code role="parse-test">5 instance of xs:integer</code>
                     </p><p>This example returns <code>true</code> because the given value is an instance of the given type.</p></item><item><p>
                        <code>5 instance of xs:decimal</code>
                     </p><p>This example returns <code>true</code> because the given value is an integer literal, and <code>xs:integer</code> is derived by restriction from <code>xs:decimal</code>.</p></item><item><p>
                        <code role="parse-test">(5, 6) instance of xs:integer+</code>
                     </p><p>This example returns <code>true</code> because the given sequence contains two integers, and is a valid instance of the specified type.</p></item><item><p>
                        <code role="parse-test">. instance of element()</code>
                     </p><p>This example returns <code>true</code> if the context item is an element node or <code>false</code> if the context item is defined but is not an element node. If the context item is <phrase diff="del">undefined</phrase>
                        <xtermref spec="DM30" ref="dt-absent" diff="add"/>, a <termref def="dt-dynamic-error">dynamic error</termref> is raised <errorref class="DY" code="0002"/>.</p></item></ulist></div3><div3 id="id-cast"><head>Cast</head><scrap headstyle="show"><head/><prod num="28" id="doc-xpath30-CastExpr"><lhs>CastExpr</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-UnaryExpr" xlink:type="simple">UnaryExpr</nt> ( "cast"  "as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SingleType" xlink:type="simple">SingleType</nt> )?</rhs></prod><prod num="65" id="doc-xpath30-SingleType"><lhs>SingleType</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-SimpleTypeName" xlink:type="simple">SimpleTypeName</nt>  "?"?</rhs></prod><prod num="70" id="noid_d3e14477.doc-xpath30-AtomicOrUnionType"><lhs>AtomicOrUnionType</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EQName" xlink:type="simple">EQName</nt>
                     </rhs></prod></scrap><p>Occasionally
it is necessary to convert a value to a specific datatype. For this
purpose, XPath 3.0 provides a <code>cast</code> expression that
creates a new value of a specific type based on an existing value. A
<code>cast</code> expression takes two operands: an <term>input
expression</term> and a <term>target type</term>. The type of the
<phrase diff="add">atomized value of the</phrase> input expression is called the <term>input type</term>. 

<phrase diff="add">The SimpleTypeName must be the name of a type defined
in the  <termref def="dt-is-types">in-scope schema types</termref>, and <phrase diff="del">the <phrase diff="del">
                           <code>{variety}</code> of the </phrase>type must be
<code>simple</code>
                     </phrase>
                     <phrase diff="add">it must be a simple type</phrase> 
                     <errorref class="ST" code="0052"/>.</phrase>
                  <phrase diff="del">The target type must be  a <termref def="dt-generalized-atomic-type">generalized atomic type</termref> that is in the <termref def="dt-is-types">in-scope schema types</termref> 
                     <errorref class="ST" code="0051"/>. </phrase>

In addition, the target type cannot be <code>xs:NOTATION</code>
                  <phrase diff="add">, <code>xs:anySimpleType</code>,</phrase>  or <code>xs:anyAtomicType</code> 
                  <errorref class="ST" code="0080"/>. The optional occurrence indicator "<code>?</code>" denotes that an empty
sequence is permitted. If the target type <phrase diff="add">is a lexical QName that</phrase> has no namespace prefix, it
is considered to be in the <termref def="dt-def-elemtype-ns">default element/type
namespace</termref>.</p><p diff="chg">Casting a node to <code>xs:QName</code> 
                  <phrase diff="del">is not allowed because it would be inappropriate to use</phrase>
                  <phrase diff="add">can cause surprises because it uses</phrase> the static context of the cast expression to provide the namespace bindings for this operation. Instead <phrase diff="add">of casting to <code>xs:QName</code>, it is generally preferable to</phrase> use the <code>fn:QName</code> function, which allows the namespace context to be taken from the document containing the QName.</p><p>The semantics of the <code>cast</code> expression
are as follows:</p><olist><item><p>The input expression is evaluated.</p><p diff="del">If the result contains a node, and the target type is  <termref def="dt-namespace-sensitive">namespace-sensitive</termref>, a <termref def="dt-type-error">type error</termref> 
                        <errorref class="TY" code="0117"/> is raised.</p></item><item><p>The result of the first step is <termref def="dt-atomization">atomized</termref>.</p></item><item><p> If the result of atomization is a
sequence of more than one atomic value, a <termref def="dt-type-error">type error</termref> is raised <errorref class="TY" code="0004"/>.</p></item><item><p>If the result
of atomization is an empty sequence:</p><olist><item><p>If
<code>?</code> is specified after the target type, the result of the
<code>cast</code> expression is an empty sequence.</p></item><item><p>
If <code>?</code> is not specified after the target type, a <termref def="dt-type-error">type error</termref> is raised <errorref class="TY" code="0004"/>.</p></item></olist></item><item><p>If the result of atomization is a single atomic value, the result
of the cast expression depends on the input type and the target
type. In general, the cast expression attempts to create a new value
of the target type based on the input value. Only certain combinations
of input type and target type are supported. A summary of the rules
are listed below—the normative definition of these rules is
given in <bibref ref="xpath-functions-30"/>. For the purpose of
these rules, an implementation may determine
that one type is derived by restriction from another type either by examining the <termref def="dt-issd">in-scope schema definitions</termref> or by using an
alternative, <termref def="dt-implementation-dependent">implementation-dependent</termref> mechanism such as a data
dictionary.</p><olist><item><p>
                              <code>cast</code> is supported for the combinations of
input type and target type listed in <xspecref spec="FO30" ref="casting-from-primitive-to-primitive"/>. For each of these combinations, both
the input type and the target type are primitive <termref def="dt-schema-type">schema types</termref>. For
example, a value of type <code>xs:string</code> can be cast into the
schema type <code>xs:decimal</code>. For each of these built-in combinations,
the semantics of casting are specified in <bibref ref="xpath-functions-30"/>.</p></item><item><p>
                              <code>cast</code> is
supported if the input type is a non-primitive atomic type that is derived by restriction from the target
type. In this case, the input value
is mapped into the value space of the target type, unchanged except
for its type. For example, if <code>shoesize</code> is derived by
restriction from <code>xs:integer</code>, a value of type
<code>shoesize</code> can be cast into the schema type
<code>xs:integer</code>.</p></item><item diff="chg" at="XQ.E15 and XP.E8"><p>
                              <code>cast</code> is supported if the target type is a
     non-primitive atomic type and the input type is
     <code>xs:string</code> or <code>xs:untypedAtomic</code>. The
     input value is first converted to a value in the lexical space of
     the target type by applying the whitespace normalization rules
     for the target type (as defined in <bibref ref="XMLSchema10"/> or <bibref ref="XMLSchema11"/>). The lexical value is then converted to the
     value space of the target type using the schema-defined rules for
     the target type. If the input value fails to satisfy some facet
     of the target type, a <termref def="dt-dynamic-error">dynamic
     error</termref> may be raised as specified in <bibref ref="xpath-functions-30"/>.</p></item><item><p diff="chg">
                              <code>cast</code> is supported to any target type
     if the input type is <code>xs:string</code> or
     <code>xs:untypedAtomic</code>. The target type may be an atomic
     type, a union type, or a list type. The semantics are based on
     the rules for validation in <bibref ref="XMLSchema10"/> or
     <bibref ref="XMLSchema11"/>.</p><p>The effect of casting a string <var>S</var> to a simple type
     <var>T</var> is the same as constructing an element or attribute
     node whose string value is <var>S</var>, validating it using
     <var>T</var> as the governing type, and atomizing the resulting
     node.

     The result may be a single atomic value or (if list types are
     involved) a sequence of zero or more atomic values. <phrase diff="del">The cast will
     fail with a dynamic error <errorref class="DY" code="0129"/> if the supplied string (after
     whitespace normalization as required by the target type) is not
     in the lexical space of the target type.</phrase>
                           </p><p>If the target type is <termref def="dt-namespace-sensitive">namespace-sensitive</termref>,
     then the namespace  bindings in the static context will be used to resolve any
     namespace prefix found in the supplied string.</p></item><item><p>
                              <code>cast</code> is supported if
the target type is a non-primitive atomic type that is derived by restriction from the input type. The input value must satisfy all the
facets of the target type (in the case of the pattern facet, this is
checked by generating a string representation of the input value,
using the rules for casting to <code>xs:string</code>). The resulting
value is the same as the input value, but with a different <termref def="dt-dynamic-type">dynamic type</termref>.</p></item><item><p>If a primitive type P1 can be cast into a
primitive type P2, then any type derived by restriction from P1 can be cast into any type derived by restriction from P2, provided that the facets of the target type are
satisfied. First the input value is cast to P1 using rule (b)
above. Next, the value of type P1 is cast to the type P2, using rule
(a) above. Finally, the value of type P2 is cast to the target type,
using rule (d) above.</p></item><item><p> For any combination of input
type and target type that is not in the above list, a
<code>cast</code> expression raises a <termref def="dt-type-error">type error</termref> 
                              <errorref class="TY" code="0004"/>.</p></item></olist></item></olist><p> If casting from the input type to the target type is supported but nevertheless it is not possible to cast the input value into the value space of the target type, a <termref def="dt-dynamic-error">dynamic error</termref> is raised. [err:FORG0001] This includes the case when any facet of the target type is not satisfied. For example, the expression <code role="parse-test">"2003-02-31" cast as xs:date</code> would raise a <termref def="dt-dynamic-error">dynamic error</termref>.</p></div3><div3 id="id-castable"><head>Castable</head><scrap headstyle="show"><head/><prod num="27" id="doc-xpath30-CastableExpr"><lhs>CastableExpr</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-CastExpr" xlink:type="simple">CastExpr</nt> ( "castable"  "as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SingleType" xlink:type="simple">SingleType</nt> )?</rhs></prod><prod num="65" id="noid_d3e14789.doc-xpath30-SingleType"><lhs>SingleType</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-SimpleTypeName" xlink:type="simple">SimpleTypeName</nt>  "?"?</rhs></prod></scrap><p>XPath 3.0
provides an expression that tests whether a given value
is castable into a given target type. 

<phrase diff="add">The SimpleTypeName must be the name of a type defined
in the  <termref def="dt-is-types">in-scope schema types</termref>, and the <phrase diff="del">
                        <code>{variety}</code> of the</phrase> type must be
<code>simple</code> 
                     <errorref class="ST" code="0052"/>.</phrase>
                  <phrase diff="del">The target type must be  a <termref def="dt-generalized-atomic-type">generalized atomic type</termref> that is in the <termref def="dt-is-types">in-scope schema types</termref> 
                     <errorref class="ST" code="0051"/>. </phrase>

In addition, the target type cannot be <code>xs:NOTATION</code>
                  <phrase diff="add"> 
                     <code>xs:anySimpleType</code>,</phrase>  or <code>xs:anyAtomicType</code> 
                  <errorref class="ST" code="0080"/>. The optional occurrence indicator "<code>?</code>" denotes that an empty
sequence is permitted. </p><p diff="chg" at="XQ.E5 and XP.E5">The expression <code role="parse-test">E castable as T</code> returns <code>true</code> 
if the result of evaluating <code>E</code>  
can be successfully cast into the target type <code>T</code> by using a <code>cast</code> expression; 
otherwise it returns <code>false</code>. 
If evaluation of <code>E</code> fails with a dynamic error, 
the <code>castable</code> expression as a whole fails. 
The <code>castable</code> expression can be used as a <termref def="dt-predicate">predicate</termref>  to
avoid errors at evaluation time. 
It can also be used to select an appropriate type for processing of a given value, as illustrated in
the following example:</p><eg role="parse-test" xml:space="preserve">
if ($x castable as hatsize)
   then $x cast as hatsize
   else if ($x castable as IQ)
   then $x cast as IQ
   else $x cast as xs:string</eg></div3><div3 id="id-constructor-functions"><head>Constructor Functions</head><p>For every  <termref def="dt-generalized-atomic-type">generalized atomic type</termref> in the <termref def="dt-is-types">in-scope schema types</termref>  (except <code>xs:NOTATION</code> and <code>xs:anyAtomicType</code>, which are not instantiable), a <term>constructor function</term> is implicitly defined. In each case, the name of the constructor function is the same as the name of its target type (including namespace). The signature of the constructor function for type
<emph>T</emph> is as follows:</p><eg xml:space="preserve">T($arg as xs:anyAtomicType?) as T?</eg><p> 
                  <termdef term="constructor function" id="dt-constructor-function">The <term>constructor function</term> for a given type is used to convert instances of other atomic types into the given type. The semantics of the constructor function call <code>T($arg)</code> are defined to be equivalent to the expression <code role="parse-test">(($arg) cast as T?)</code>.</termdef>
               </p><p>The following examples illustrate the use of constructor functions:</p><ulist><item><p>This
example is equivalent to <code role="parse-test">("2000-01-01" cast as
xs:date?)</code>.</p><eg role="parse-test" xml:space="preserve">xs:date("2000-01-01")</eg></item><item><p>This
example is equivalent to

<code role="parse-test">(($floatvalue * 0.2E-5) cast as xs:decimal?)</code>.</p><eg role="parse-test" xml:space="preserve">xs:decimal($floatvalue * 0.2E-5)</eg></item><item><p>This example returns an
<code>xs:dayTimeDuration</code> value equal to 21 days. It is
equivalent to <code role="parse-test">("P21D" cast as xs:dayTimeDuration?)</code>.</p><eg role="parse-test" xml:space="preserve">xs:dayTimeDuration("P21D")</eg></item><item><p>If
<code>usa:zipcode</code> is a user-defined atomic type
in the <termref def="dt-is-types">in-scope schema types</termref>, then the
following expression is equivalent to the
expression <code role="parse-test">("12345" cast as
usa:zipcode?)</code>.</p><eg role="parse-test" xml:space="preserve">usa:zipcode("12345")</eg></item></ulist><note><p>An instance of an atomic type that is not in a namespace can be constructed in either of the following ways:</p><ulist><item><p>By using a <code>cast</code> expression, if the <termref def="dt-def-elemtype-ns">default element/type
		  namespace</termref> is <xtermref spec="DM30" ref="dt-absent"/>. </p><eg role="parse-test" xml:space="preserve">17 cast as apple</eg></item><item><p>By using a constructor function, if the <termref def="dt-def-fn-ns">default function
		namespace</termref> is <xtermref spec="DM30" ref="dt-absent"/>. </p><eg role="parse-test" xml:space="preserve">apple(17)
</eg></item></ulist></note></div3><div3 id="id-treat"><head>Treat</head><scrap headstyle="show"><head/><prod num="26" id="doc-xpath30-TreatExpr"><lhs>TreatExpr</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-CastableExpr" xlink:type="simple">CastableExpr</nt> ( "treat"  "as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SequenceType" xlink:type="simple">SequenceType</nt> )?</rhs></prod></scrap><p>XPath 3.0 provides an
expression called <code>treat</code> that can be used to modify the
<termref def="dt-static-type">static type</termref> of its
operand.</p><p>Like <code>cast</code>, the <code>treat</code>
expression takes two operands: an expression and a <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SequenceType" xlink:type="simple">SequenceType</nt>. Unlike
<code>cast</code>, however, <code>treat</code> does not change the
<termref def="dt-dynamic-type">dynamic type</termref> or value of its operand. Instead, the purpose of
<code>treat</code> is to ensure that an expression has an expected
dynamic type at evaluation time.</p><p>The semantics of <emph>
                     <code>expr1</code>
                  </emph>
                  <code> treat as </code>
                  <emph>
                     <code>type1</code>
                  </emph> are as
follows:</p><ulist><item><p>During static analysis:</p><p> The
<termref def="dt-static-type">static type</termref> of the
<code>treat</code> expression is <emph>
                           <code>type1</code>
                        </emph>. This enables the
expression to be used as an argument of a function that requires a
parameter of <emph>
                           <code>type1</code>
                        </emph>.</p></item><item><p>During expression
evaluation:</p><p>If <emph>
                           <code>expr1</code>
                        </emph> matches <emph>
                           <code>type1</code>
                        </emph>,
using the rules for <termref def="dt-sequencetype-matching">SequenceType
matching</termref>,
the <code>treat</code> expression returns the value of
<emph>
                           <code>expr1</code>
                        </emph>; otherwise, it raises a <termref def="dt-dynamic-error">dynamic error</termref> 
                        <errorref class="DY" code="0050"/>.
If the value of <emph>
                           <code>expr1</code>
                        </emph> is returned, its identity is
preserved. The <code>treat</code> expression ensures that the value of
its expression operand conforms to the expected type at
run-time.</p></item><item><p>Example:</p><eg role="parse-test" xml:space="preserve">$myaddress treat as element(*, USAddress)</eg><p>The
<termref def="dt-static-type">static type</termref> of
<code>$myaddress</code> may be <code>element(*, Address)</code>, a
less specific type than <code>element(*, USAddress)</code>. However,
at run-time, the value of <code>$myaddress</code> must match the type
<code>element(*, USAddress)</code> using rules for <termref def="dt-sequencetype-matching">SequenceType
matching</termref>;
otherwise a <termref def="dt-dynamic-error">dynamic error</termref> is
raised <errorref class="DY" code="0050"/>.</p></item></ulist></div3></div2><div2 id="id-map-operator" diff="chg"><head>Simple map operator (<code>!</code>)</head><scrap headstyle="show"><head/><prod num="34" id="doc-xpath30-SimpleMapExpr"><lhs>SimpleMapExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-PathExpr" xlink:type="simple">PathExpr</nt>  ("!"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-PathExpr" xlink:type="simple">PathExpr</nt>)*</rhs></prod></scrap><p>The simple map operator "<code>!</code>" is used for simple mappings. Both its left-hand side expression and its right-hand-side expression may return a mixed sequence of nodes and non-nodes.</p><p>Each operation <code>E1!E2</code> is evaluated as follows: Expression <code>E1</code> is evaluated to a sequence <code>S</code>. Each item in <code>S</code> then serves in turn to provide an inner focus (the item as the context item, its position in <code>S</code> as the context position, the length of <code>S</code> as the context size) for an evaluation of <code>E2</code> in the <termref def="dt-dynamic-context">dynamic context</termref>. The sequences resulting from all the evaluations of <code>E2</code> are combined as follows: Every evaluation of <code>E2</code> returns a (possibly empty) sequence of items. These sequences are concatenated and returned. If ordering mode is ordered, the returned sequence preserves the orderings within and among the subsequences generated by the evaluations of <code>E2</code>; otherwise the order of the returned sequence is implementation-dependent.</p><p>Simple map operators have functionality similar to <specref ref="id-path-operator"/>.
  The following table summarizes the differences between these two operators</p><table border="1"><thead><tr><th rowspan="1" colspan="1">Operator</th><th rowspan="1" colspan="1">Path operator (<code>E1 / E2</code>)</th><th rowspan="1" colspan="1">Simple map operator (<code>E1 ! E2</code>)</th></tr></thead><tbody><tr><th rowspan="1" colspan="1">E1</th><td rowspan="1" colspan="1">Any sequence of nodes</td><td rowspan="1" colspan="1">Any sequence of items</td></tr><tr><th rowspan="1" colspan="1">E2</th><td rowspan="1" colspan="1">Either a sequence of nodes or a sequence of non-node items</td><td rowspan="1" colspan="1">A sequence of items</td></tr><tr><th rowspan="1" colspan="1">Additional processing</th><td rowspan="1" colspan="1">Duplicate elimination and document ordering</td><td rowspan="1" colspan="1">Simple sequence concatenation</td></tr></tbody></table><p>The following examples illustrate the use of simple map operators combined with path expressions.</p><example><ulist><item><p>
                        <code role="parse-test">child::div1 / child::para / string() ! concat("id-", .)</code>
                     </p><p>Selects the <code>para</code> element children of the <code>div1</code> element children of the context node; that is, the <code>para</code> element grandchildren of the context node that have <code>div1</code> parents. It then outputs the strings obtained by prepending <code>"id-"</code> to each of the string values of these grandchildren.</p></item><item><p>
                        <code role="parse-test">$emp ! (@first, @middle, @last)</code>
                     </p><p>Returns the values of the attributes <code>first</code>, <code>middle</code>, and <code>last</code> for element <code>$emp</code>, in the order given. (The <code>/</code> operator here returns the attributes in an unpredictable order.)</p></item><item><p>
                        <code role="parse-test">$docs ! ( //employee)</code>
                     </p><p>Returns all the employees within all the documents identified by the variable docs, in document order within each document, but retaining the order of documents.</p></item><item><p>
                        <code role="parse-test">avg( //employee / salary ! translate(., '$', '') ! number(.))</code>
                     </p><p>Returns the average salary of the employees, having converted the salary to a number by removing any <code>$</code> sign and then converting to a number. (The second occurrence of <code>!</code> could not be written as <code>/</code> because the left-hand operand of <code>/</code> cannot be an atomic value.)</p></item></ulist></example></div2></div1></body><back id="id-appendices"><div1 id="nt-bnf"><head>XPath 3.0 Grammar</head><div2 id="id-grammar"><head>EBNF</head><p>The grammar of XPath 3.0 uses the same simple Extended
    Backus-Naur Form (EBNF) notation as 
    <bibref ref="XML"/> with the following minor differences.</p><ulist><item><p>All named symbols have a name that begins with an
        uppercase letter.</p></item><item><p>It adds a notation for referring to productions in
        external specs.</p></item><item><p>Comments or extra-grammatical constraints on grammar
        productions are between '/*' and '*/' symbols.</p><ulist><item><p>A 'xgc:' prefix is an extra-grammatical constraint,
            the details of which are explained in 
            <specref ref="extra-grammatical-constraints"/>
                        </p></item><item><p>A 'ws:' prefix explains the whitespace rules for the
            production, the details of which are explained in 
            <specref ref="whitespace-rules"/>
                        </p></item><item><p>A 'gn:' prefix means a 'Grammar Note', and is meant
            as a clarification for parsing rules, and is explained
            in 
            <specref ref="notes-on-parsing"/>. These notes are not
            normative.</p></item></ulist></item></ulist><p>The terminal symbols for this grammar include the quoted
    strings used in the production rules below, and the terminal
    symbols defined in section 
    <specref ref="terminal-symbols"/>.</p><p>The EBNF notation is described in more detail in 
    <specref ref="EBNFNotation"/>.</p><p>To increase readability, the EBNF in the main body of this
    document omits some of these notational features. This appendix
    is the normative version of the EBNF.</p><scrap id="BNF-Grammar" role="non-terminal-structure-expand" headstyle="show"><head/><prod num="1" id="prod-xpath30-XPath"><lhs>XPath</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Expr" xlink:type="simple">Expr</nt>
                  </rhs></prod><prod num="2" id="prod-xpath30-ParamList"><lhs>ParamList</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Param" xlink:type="simple">Param</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Param" xlink:type="simple">Param</nt>)*</rhs></prod><prod num="3" id="prod-xpath30-Param"><lhs>Param</lhs><rhs>"$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-EQName" xlink:type="simple">EQName</nt>  
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-TypeDeclaration" xlink:type="simple">TypeDeclaration</nt>?</rhs></prod><prod num="4" id="prod-xpath30-FunctionBody"><lhs>FunctionBody</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-EnclosedExpr" xlink:type="simple">EnclosedExpr</nt>
                  </rhs></prod><prod num="5" id="prod-xpath30-EnclosedExpr"><lhs>EnclosedExpr</lhs><rhs>"{"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Expr" xlink:type="simple">Expr</nt>  "}"</rhs></prod><prod num="6" id="prod-xpath30-Expr"><lhs>Expr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>)*</rhs></prod><prod num="7" id="prod-xpath30-ExprSingle"><lhs>ExprSingle</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ForExpr" xlink:type="simple">ForExpr</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-LetExpr" xlink:type="simple">LetExpr</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-QuantifiedExpr" xlink:type="simple">QuantifiedExpr</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-IfExpr" xlink:type="simple">IfExpr</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-OrExpr" xlink:type="simple">OrExpr</nt>
                  </rhs></prod><prod num="8" id="prod-xpath30-ForExpr"><lhs>ForExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-SimpleForClause" xlink:type="simple">SimpleForClause</nt>  "return"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>
                  </rhs></prod><prod num="9" id="prod-xpath30-SimpleForClause"><lhs>SimpleForClause</lhs><rhs>"for"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-SimpleForBinding" xlink:type="simple">SimpleForBinding</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-SimpleForBinding" xlink:type="simple">SimpleForBinding</nt>)*</rhs></prod><prod num="10" id="prod-xpath30-SimpleForBinding"><lhs>SimpleForBinding</lhs><rhs>"$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-VarName" xlink:type="simple">VarName</nt>  "in"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>
                  </rhs></prod><prod num="11" id="prod-xpath30-LetExpr"><lhs>LetExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-SimpleLetClause" xlink:type="simple">SimpleLetClause</nt>  "return"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>
                  </rhs></prod><prod num="12" id="prod-xpath30-SimpleLetClause"><lhs>SimpleLetClause</lhs><rhs>"let"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-SimpleLetBinding" xlink:type="simple">SimpleLetBinding</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-SimpleLetBinding" xlink:type="simple">SimpleLetBinding</nt>)*</rhs></prod><prod num="13" id="prod-xpath30-SimpleLetBinding"><lhs>SimpleLetBinding</lhs><rhs>"$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-VarName" xlink:type="simple">VarName</nt>  ":="  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>
                  </rhs></prod><prod num="14" id="prod-xpath30-QuantifiedExpr"><lhs>QuantifiedExpr</lhs><rhs>("some"  |  "every")  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-VarName" xlink:type="simple">VarName</nt>  "in"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>  (","  "$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-VarName" xlink:type="simple">VarName</nt>  "in"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>)*  "satisfies"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>
                  </rhs></prod><prod num="15" id="prod-xpath30-IfExpr"><lhs>IfExpr</lhs><rhs>"if"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Expr" xlink:type="simple">Expr</nt>  ")"  "then"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>  "else"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>
                  </rhs></prod><prod num="16" id="prod-xpath30-OrExpr"><lhs>OrExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-AndExpr" xlink:type="simple">AndExpr</nt> ( "or"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-AndExpr" xlink:type="simple">AndExpr</nt> )*</rhs></prod><prod num="17" id="prod-xpath30-AndExpr"><lhs>AndExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ComparisonExpr" xlink:type="simple">ComparisonExpr</nt> ( "and"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ComparisonExpr" xlink:type="simple">ComparisonExpr</nt> )*</rhs></prod><prod num="18" id="prod-xpath30-ComparisonExpr"><lhs>ComparisonExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-StringConcatExpr" xlink:type="simple">StringConcatExpr</nt> ( (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ValueComp" xlink:type="simple">ValueComp</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-GeneralComp" xlink:type="simple">GeneralComp</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-NodeComp" xlink:type="simple">NodeComp</nt>)  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-StringConcatExpr" xlink:type="simple">StringConcatExpr</nt> )?</rhs></prod><prod num="19" id="prod-xpath30-StringConcatExpr"><lhs>StringConcatExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-RangeExpr" xlink:type="simple">RangeExpr</nt> ( "||"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-RangeExpr" xlink:type="simple">RangeExpr</nt> )*</rhs></prod><prod num="20" id="prod-xpath30-RangeExpr"><lhs>RangeExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-AdditiveExpr" xlink:type="simple">AdditiveExpr</nt> ( "to"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-AdditiveExpr" xlink:type="simple">AdditiveExpr</nt> )?</rhs></prod><prod num="21" id="prod-xpath30-AdditiveExpr"><lhs>AdditiveExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-MultiplicativeExpr" xlink:type="simple">MultiplicativeExpr</nt> ( ("+"  |  "-")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-MultiplicativeExpr" xlink:type="simple">MultiplicativeExpr</nt> )*</rhs></prod><prod num="22" id="prod-xpath30-MultiplicativeExpr"><lhs>MultiplicativeExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-UnionExpr" xlink:type="simple">UnionExpr</nt> ( ("*"  |  "div"  |  "idiv"  |  "mod")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-UnionExpr" xlink:type="simple">UnionExpr</nt> )*</rhs></prod><prod num="23" id="prod-xpath30-UnionExpr"><lhs>UnionExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-IntersectExceptExpr" xlink:type="simple">IntersectExceptExpr</nt> ( ("union"  |  "|")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-IntersectExceptExpr" xlink:type="simple">IntersectExceptExpr</nt> )*</rhs></prod><prod num="24" id="prod-xpath30-IntersectExceptExpr"><lhs>IntersectExceptExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-InstanceofExpr" xlink:type="simple">InstanceofExpr</nt> ( ("intersect"  |  "except")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-InstanceofExpr" xlink:type="simple">InstanceofExpr</nt> )*</rhs></prod><prod num="25" id="prod-xpath30-InstanceofExpr"><lhs>InstanceofExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-TreatExpr" xlink:type="simple">TreatExpr</nt> ( "instance"  "of"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-SequenceType" xlink:type="simple">SequenceType</nt> )?</rhs></prod><prod num="26" id="prod-xpath30-TreatExpr"><lhs>TreatExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-CastableExpr" xlink:type="simple">CastableExpr</nt> ( "treat"  "as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-SequenceType" xlink:type="simple">SequenceType</nt> )?</rhs></prod><prod num="27" id="prod-xpath30-CastableExpr"><lhs>CastableExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-CastExpr" xlink:type="simple">CastExpr</nt> ( "castable"  "as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-SingleType" xlink:type="simple">SingleType</nt> )?</rhs></prod><prod num="28" id="prod-xpath30-CastExpr"><lhs>CastExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-UnaryExpr" xlink:type="simple">UnaryExpr</nt> ( "cast"  "as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-SingleType" xlink:type="simple">SingleType</nt> )?</rhs></prod><prod num="29" id="prod-xpath30-UnaryExpr"><lhs>UnaryExpr</lhs><rhs>("-"  |  "+")* <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ValueExpr" xlink:type="simple">ValueExpr</nt>
                  </rhs></prod><prod num="30" id="prod-xpath30-ValueExpr"><lhs>ValueExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-SimpleMapExpr" xlink:type="simple">SimpleMapExpr</nt>
                  </rhs></prod><prod num="31" id="prod-xpath30-GeneralComp"><lhs>GeneralComp</lhs><rhs>"="  |  "!="  |  "&lt;"  |  "&lt;="  |  "&gt;"  |  "&gt;="</rhs></prod><prod num="32" id="prod-xpath30-ValueComp"><lhs>ValueComp</lhs><rhs>"eq"  |  "ne"  |  "lt"  |  "le"  |  "gt"  |  "ge"</rhs></prod><prod num="33" id="prod-xpath30-NodeComp"><lhs>NodeComp</lhs><rhs>"is"  |  "&lt;&lt;"  |  "&gt;&gt;"</rhs></prod><prod num="34" id="prod-xpath30-SimpleMapExpr"><lhs>SimpleMapExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-PathExpr" xlink:type="simple">PathExpr</nt>  ("!"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-PathExpr" xlink:type="simple">PathExpr</nt>)*</rhs></prod><prod num="35" id="prod-xpath30-PathExpr"><lhs>PathExpr</lhs><rhs>("/"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-RelativePathExpr" xlink:type="simple">RelativePathExpr</nt>?)<br/>|  ("//"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-RelativePathExpr" xlink:type="simple">RelativePathExpr</nt>)<br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-RelativePathExpr" xlink:type="simple">RelativePathExpr</nt>
                  </rhs><com>
                     <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#parse-note-leading-lone-slash" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">xgc: leading-lone-slash</loc>
                  </com></prod><prod num="36" id="prod-xpath30-RelativePathExpr"><lhs>RelativePathExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-StepExpr" xlink:type="simple">StepExpr</nt>  (("/"  |  "//")  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-StepExpr" xlink:type="simple">StepExpr</nt>)*</rhs></prod><prod num="37" id="prod-xpath30-StepExpr"><lhs>StepExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-PostfixExpr" xlink:type="simple">PostfixExpr</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-AxisStep" xlink:type="simple">AxisStep</nt>
                  </rhs></prod><prod num="38" id="prod-xpath30-AxisStep"><lhs>AxisStep</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ReverseStep" xlink:type="simple">ReverseStep</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ForwardStep" xlink:type="simple">ForwardStep</nt>)  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-PredicateList" xlink:type="simple">PredicateList</nt>
                  </rhs></prod><prod num="39" id="prod-xpath30-ForwardStep"><lhs>ForwardStep</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ForwardAxis" xlink:type="simple">ForwardAxis</nt>  
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-NodeTest" xlink:type="simple">NodeTest</nt>)  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-AbbrevForwardStep" xlink:type="simple">AbbrevForwardStep</nt>
                  </rhs></prod><prod num="40" id="prod-xpath30-ForwardAxis"><lhs>ForwardAxis</lhs><rhs>("child"  "::")<br/>|  ("descendant"  "::")<br/>|  ("attribute"  "::")<br/>|  ("self"  "::")<br/>|  ("descendant-or-self"  "::")<br/>|  ("following-sibling"  "::")<br/>|  ("following"  "::")<br/>|  ("namespace"  "::")</rhs></prod><prod num="41" id="prod-xpath30-AbbrevForwardStep"><lhs>AbbrevForwardStep</lhs><rhs>"@"?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-NodeTest" xlink:type="simple">NodeTest</nt>
                  </rhs></prod><prod num="42" id="prod-xpath30-ReverseStep"><lhs>ReverseStep</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ReverseAxis" xlink:type="simple">ReverseAxis</nt>  
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-NodeTest" xlink:type="simple">NodeTest</nt>)  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-AbbrevReverseStep" xlink:type="simple">AbbrevReverseStep</nt>
                  </rhs></prod><prod num="43" id="prod-xpath30-ReverseAxis"><lhs>ReverseAxis</lhs><rhs>("parent"  "::")<br/>|  ("ancestor"  "::")<br/>|  ("preceding-sibling"  "::")<br/>|  ("preceding"  "::")<br/>|  ("ancestor-or-self"  "::")</rhs></prod><prod num="44" id="prod-xpath30-AbbrevReverseStep"><lhs>AbbrevReverseStep</lhs><rhs>".."</rhs></prod><prod num="45" id="prod-xpath30-NodeTest"><lhs>NodeTest</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-KindTest" xlink:type="simple">KindTest</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-NameTest" xlink:type="simple">NameTest</nt>
                  </rhs></prod><prod num="46" id="prod-xpath30-NameTest"><lhs>NameTest</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-EQName" xlink:type="simple">EQName</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Wildcard" xlink:type="simple">Wildcard</nt>
                  </rhs></prod><prod num="47" id="prod-xpath30-Wildcard"><lhs>Wildcard</lhs><rhs>"*"<br/>|  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-NCName" xlink:type="simple">NCName</nt>  ":"  "*")<br/>|  ("*"  ":"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-NCName" xlink:type="simple">NCName</nt>)<br/>|  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-BracedURILiteral" xlink:type="simple">BracedURILiteral</nt>  "*")</rhs><com>
                     <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ws-explicit" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">ws: explicit</loc>
                  </com></prod><prod num="48" id="prod-xpath30-PostfixExpr"><lhs>PostfixExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-PrimaryExpr" xlink:type="simple">PrimaryExpr</nt>  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Predicate" xlink:type="simple">Predicate</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ArgumentList" xlink:type="simple">ArgumentList</nt>)*</rhs></prod><prod num="49" id="prod-xpath30-ArgumentList"><lhs>ArgumentList</lhs><rhs>"("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Argument" xlink:type="simple">Argument</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Argument" xlink:type="simple">Argument</nt>)*)?  ")"</rhs></prod><prod num="50" id="prod-xpath30-PredicateList"><lhs>PredicateList</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Predicate" xlink:type="simple">Predicate</nt>*</rhs></prod><prod num="51" id="prod-xpath30-Predicate"><lhs>Predicate</lhs><rhs>"["  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Expr" xlink:type="simple">Expr</nt>  "]"</rhs></prod><prod num="52" id="prod-xpath30-PrimaryExpr"><lhs>PrimaryExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Literal" xlink:type="simple">Literal</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-VarRef" xlink:type="simple">VarRef</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ParenthesizedExpr" xlink:type="simple">ParenthesizedExpr</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ContextItemExpr" xlink:type="simple">ContextItemExpr</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-FunctionCall" xlink:type="simple">FunctionCall</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-FunctionItemExpr" xlink:type="simple">FunctionItemExpr</nt>
                  </rhs></prod><prod num="53" id="prod-xpath30-Literal"><lhs>Literal</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-NumericLiteral" xlink:type="simple">NumericLiteral</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-StringLiteral" xlink:type="simple">StringLiteral</nt>
                  </rhs></prod><prod num="54" id="prod-xpath30-NumericLiteral"><lhs>NumericLiteral</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-IntegerLiteral" xlink:type="simple">IntegerLiteral</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-DecimalLiteral" xlink:type="simple">DecimalLiteral</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-DoubleLiteral" xlink:type="simple">DoubleLiteral</nt>
                  </rhs></prod><prod num="55" id="prod-xpath30-VarRef"><lhs>VarRef</lhs><rhs>"$"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-VarName" xlink:type="simple">VarName</nt>
                  </rhs></prod><prod num="56" id="prod-xpath30-VarName"><lhs>VarName</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-EQName" xlink:type="simple">EQName</nt>
                  </rhs></prod><prod num="57" id="prod-xpath30-ParenthesizedExpr"><lhs>ParenthesizedExpr</lhs><rhs>"("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Expr" xlink:type="simple">Expr</nt>?  ")"</rhs></prod><prod num="58" id="prod-xpath30-ContextItemExpr"><lhs>ContextItemExpr</lhs><rhs>"."</rhs></prod><prod num="59" id="prod-xpath30-FunctionCall"><lhs>FunctionCall</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-EQName" xlink:type="simple">EQName</nt>  
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ArgumentList" xlink:type="simple">ArgumentList</nt>
                  </rhs><com>
                     <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#parse-note-reserved-function-names" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">xgc: reserved-function-names</loc>
                  </com><com>
                     <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#parse-note-parens" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">gn: parens</loc>
                  </com></prod><prod num="60" id="prod-xpath30-Argument"><lhs>Argument</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ExprSingle" xlink:type="simple">ExprSingle</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ArgumentPlaceholder" xlink:type="simple">ArgumentPlaceholder</nt>
                  </rhs></prod><prod num="61" id="prod-xpath30-ArgumentPlaceholder"><lhs>ArgumentPlaceholder</lhs><rhs>"?"</rhs></prod><prod num="62" id="prod-xpath30-FunctionItemExpr"><lhs>FunctionItemExpr</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-NamedFunctionRef" xlink:type="simple">NamedFunctionRef</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-InlineFunctionExpr" xlink:type="simple">InlineFunctionExpr</nt>
                  </rhs></prod><prod num="63" id="prod-xpath30-NamedFunctionRef"><lhs>NamedFunctionRef</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-EQName" xlink:type="simple">EQName</nt>  "#"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-IntegerLiteral" xlink:type="simple">IntegerLiteral</nt>
                  </rhs><com>
                     <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#parse-note-reserved-function-names" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">xgc: reserved-function-names</loc>
                  </com></prod><prod num="64" id="prod-xpath30-InlineFunctionExpr"><lhs>InlineFunctionExpr</lhs><rhs>"function"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ParamList" xlink:type="simple">ParamList</nt>?  ")"  ("as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-SequenceType" xlink:type="simple">SequenceType</nt>)?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-FunctionBody" xlink:type="simple">FunctionBody</nt>
                  </rhs></prod><prod num="65" id="prod-xpath30-SingleType"><lhs>SingleType</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-SimpleTypeName" xlink:type="simple">SimpleTypeName</nt>  "?"?</rhs></prod><prod num="66" id="prod-xpath30-TypeDeclaration"><lhs>TypeDeclaration</lhs><rhs>"as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-SequenceType" xlink:type="simple">SequenceType</nt>
                  </rhs></prod><prod num="67" id="prod-xpath30-SequenceType"><lhs>SequenceType</lhs><rhs>("empty-sequence"  "("  ")")<br/>|  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ItemType" xlink:type="simple">ItemType</nt>  
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-OccurrenceIndicator" xlink:type="simple">OccurrenceIndicator</nt>?)</rhs></prod><prod num="68" id="prod-xpath30-OccurrenceIndicator"><lhs>OccurrenceIndicator</lhs><rhs>"?"  |  "*"  |  "+"</rhs><com>
                     <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#parse-note-occurrence-indicators" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">xgc: occurrence-indicators</loc>
                  </com></prod><prod num="69" id="prod-xpath30-ItemType"><lhs>ItemType</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-KindTest" xlink:type="simple">KindTest</nt>  |  ("item"  "("  ")")  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-FunctionTest" xlink:type="simple">FunctionTest</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-AtomicOrUnionType" xlink:type="simple">AtomicOrUnionType</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ParenthesizedItemType" xlink:type="simple">ParenthesizedItemType</nt>
                  </rhs></prod><prod num="70" id="prod-xpath30-AtomicOrUnionType"><lhs>AtomicOrUnionType</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-EQName" xlink:type="simple">EQName</nt>
                  </rhs></prod><prod num="71" id="prod-xpath30-KindTest"><lhs>KindTest</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-DocumentTest" xlink:type="simple">DocumentTest</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ElementTest" xlink:type="simple">ElementTest</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-AttributeTest" xlink:type="simple">AttributeTest</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-SchemaElementTest" xlink:type="simple">SchemaElementTest</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-SchemaAttributeTest" xlink:type="simple">SchemaAttributeTest</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-PITest" xlink:type="simple">PITest</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-CommentTest" xlink:type="simple">CommentTest</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-TextTest" xlink:type="simple">TextTest</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-NamespaceNodeTest" xlink:type="simple">NamespaceNodeTest</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-AnyKindTest" xlink:type="simple">AnyKindTest</nt>
                  </rhs></prod><prod num="72" id="prod-xpath30-AnyKindTest"><lhs>AnyKindTest</lhs><rhs>"node"  "("  ")"</rhs></prod><prod num="73" id="prod-xpath30-DocumentTest"><lhs>DocumentTest</lhs><rhs>"document-node"  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ElementTest" xlink:type="simple">ElementTest</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-SchemaElementTest" xlink:type="simple">SchemaElementTest</nt>)?  ")"</rhs></prod><prod num="74" id="prod-xpath30-TextTest"><lhs>TextTest</lhs><rhs>"text"  "("  ")"</rhs></prod><prod num="75" id="prod-xpath30-CommentTest"><lhs>CommentTest</lhs><rhs>"comment"  "("  ")"</rhs></prod><prod num="76" id="prod-xpath30-NamespaceNodeTest"><lhs>NamespaceNodeTest</lhs><rhs>"namespace-node"  "("  ")"</rhs></prod><prod num="77" id="prod-xpath30-PITest"><lhs>PITest</lhs><rhs>"processing-instruction"  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-NCName" xlink:type="simple">NCName</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-StringLiteral" xlink:type="simple">StringLiteral</nt>)?  ")"</rhs></prod><prod num="78" id="prod-xpath30-AttributeTest"><lhs>AttributeTest</lhs><rhs>"attribute"  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-AttribNameOrWildcard" xlink:type="simple">AttribNameOrWildcard</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-TypeName" xlink:type="simple">TypeName</nt>)?)?  ")"</rhs></prod><prod num="79" id="prod-xpath30-AttribNameOrWildcard"><lhs>AttribNameOrWildcard</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-AttributeName" xlink:type="simple">AttributeName</nt>  |  "*"</rhs></prod><prod num="80" id="prod-xpath30-SchemaAttributeTest"><lhs>SchemaAttributeTest</lhs><rhs>"schema-attribute"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-AttributeDeclaration" xlink:type="simple">AttributeDeclaration</nt>  ")"</rhs></prod><prod num="81" id="prod-xpath30-AttributeDeclaration"><lhs>AttributeDeclaration</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-AttributeName" xlink:type="simple">AttributeName</nt>
                  </rhs></prod><prod num="82" id="prod-xpath30-ElementTest"><lhs>ElementTest</lhs><rhs>"element"  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ElementNameOrWildcard" xlink:type="simple">ElementNameOrWildcard</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-TypeName" xlink:type="simple">TypeName</nt>  "?"?)?)?  ")"</rhs></prod><prod num="83" id="prod-xpath30-ElementNameOrWildcard"><lhs>ElementNameOrWildcard</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ElementName" xlink:type="simple">ElementName</nt>  |  "*"</rhs></prod><prod num="84" id="prod-xpath30-SchemaElementTest"><lhs>SchemaElementTest</lhs><rhs>"schema-element"  "("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ElementDeclaration" xlink:type="simple">ElementDeclaration</nt>  ")"</rhs></prod><prod num="85" id="prod-xpath30-ElementDeclaration"><lhs>ElementDeclaration</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ElementName" xlink:type="simple">ElementName</nt>
                  </rhs></prod><prod num="86" id="prod-xpath30-AttributeName"><lhs>AttributeName</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-EQName" xlink:type="simple">EQName</nt>
                  </rhs></prod><prod num="87" id="prod-xpath30-ElementName"><lhs>ElementName</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-EQName" xlink:type="simple">EQName</nt>
                  </rhs></prod><prod num="88" id="prod-xpath30-SimpleTypeName"><lhs>SimpleTypeName</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-TypeName" xlink:type="simple">TypeName</nt>
                  </rhs></prod><prod num="89" id="prod-xpath30-TypeName"><lhs>TypeName</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-EQName" xlink:type="simple">EQName</nt>
                  </rhs></prod><prod num="90" id="prod-xpath30-FunctionTest"><lhs>FunctionTest</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-AnyFunctionTest" xlink:type="simple">AnyFunctionTest</nt>
                     <br/>|  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-TypedFunctionTest" xlink:type="simple">TypedFunctionTest</nt>
                  </rhs></prod><prod num="91" id="prod-xpath30-AnyFunctionTest"><lhs>AnyFunctionTest</lhs><rhs>"function"  "("  "*"  ")"</rhs></prod><prod num="92" id="prod-xpath30-TypedFunctionTest"><lhs>TypedFunctionTest</lhs><rhs>"function"  "("  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-SequenceType" xlink:type="simple">SequenceType</nt>  (","  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-SequenceType" xlink:type="simple">SequenceType</nt>)*)?  ")"  "as"  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-SequenceType" xlink:type="simple">SequenceType</nt>
                  </rhs></prod><prod num="93" id="prod-xpath30-ParenthesizedItemType"><lhs>ParenthesizedItemType</lhs><rhs>"("  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-ItemType" xlink:type="simple">ItemType</nt>  ")"</rhs></prod><prod num="94" id="prod-xpath30-EQName"><lhs>EQName</lhs><rhs>
                     <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-QName" xlink:type="simple">QName</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-URIQualifiedName" xlink:type="simple">URIQualifiedName</nt>
                  </rhs></prod></scrap><div3 id="EBNFNotation"><head>Notation</head><p>The following definitions will be helpful in defining
      precisely this exposition.</p><p>
                  <termdef id="symbol" term="symbol">Each rule in the grammar
        defines one 
        <term>symbol</term>, using the following format:
        <eg xml:space="preserve">symbol ::= expression</eg>
                  </termdef>
               </p><p>
                  <termdef term="terminal" id="terminal">A 
      <term>terminal</term> is a symbol or string or pattern that
      can appear in the right-hand side of a rule, but never
      appears on the left-hand side in the main grammar, although
      it may appear on the left-hand side of a rule in the grammar
      for terminals.</termdef> The following constructs are used to
      match strings of one or more characters in a terminal:</p><glist><gitem><label>[a-zA-Z]</label><def><p>matches any 
            <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Char" xlink:type="simple">Char</nt> with a value in the
            range(s) indicated (inclusive).</p></def></gitem><gitem><label>[abc]</label><def><p>matches any 
            <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Char" xlink:type="simple">Char</nt> with a value among the
            characters enumerated. 
            <phrase diff="del">Enumerations and ranges can be mixed
            in one set of brackets.</phrase>
                        </p></def></gitem><gitem><label>[^abc]</label><def><p>matches any 
            <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Char" xlink:type="simple">Char</nt> with a value not among the
            characters given.
            <phrase diff="del">Enumerations and ranges of forbidden
            values can be mixed in one set of
            brackets.</phrase>
                        </p></def></gitem><gitem><label>"string"</label><def><p>matches the sequence of characters that appear
            inside the double quotes.</p></def></gitem><gitem><label>'string'</label><def><p>matches the sequence of characters that appear
            inside the single quotes.</p></def></gitem><gitem><label>
          [http://www.w3.org/TR/REC-example/#NT-Example]</label><def><p>matches any string matched by the production defined
            in the external specification as per the provided
            reference.</p></def></gitem></glist><p>Patterns (including the above constructs) can be combined
      with grammatical operators to form more complex patterns,
      matching more complex sets of character strings. In the
      examples that follow, A and B represent (sub-)patterns.</p><glist><gitem><label>(A)</label><def><p>
                           <code>A</code> is treated as a unit and may be combined
            as described in this list.</p></def></gitem><gitem><label>A?</label><def><p>matches 
            <code>A</code> or nothing; optional 
            <code>A</code>.</p></def></gitem><gitem><label>A B</label><def><p>matches 
            <code>A</code> followed by 
            <code>B</code>. This operator has higher precedence
            than alternation; thus 
            <code>A B | C D</code> is identical to 
            <code>(A B) | (C D)</code>.</p></def></gitem><gitem><label>A | B</label><def><p>matches 
            <code>A</code> or 
            <code>B</code> but not both.</p></def></gitem><gitem><label>A - B</label><def><p>matches any string that matches 
            <code>A</code> but does not match 
            <code>B</code>.</p></def></gitem><gitem><label>A+</label><def><p>matches one or more occurrences of 
            <code>A</code>. Concatenation has higher precedence
            than alternation; thus 
            <code>A+ | B+</code> is identical to 
            <code>(A+) | (B+)</code>.</p></def></gitem></glist><glist><gitem><label>A*</label><def><p>matches zero or more occurrences of 
            <code>A</code>. Concatenation has higher precedence
            than alternation; thus 
            <code>A* | B*</code> is identical to 
            <code>(A*) | (B*)</code>
                        </p></def></gitem></glist></div3><div3 id="extra-grammatical-constraints"><head>Extra-grammatical Constraints</head><p>This section contains constraints on the EBNF productions,
      which are required to parse syntactically valid sentences. The notes below
      are referenced from the right side of the production, with
      the notation: 
      <emph>/* xgc: &lt;id&gt; */</emph>.</p><constraintnote id="parse-note-leading-lone-slash" type="xgc" diff="chg" at="XQ.E24 and XP.E16"><head>leading-lone-slash</head><p>A single slash may appear either as a complete path
        expression or as the first part of a path expression in
        which it is followed by a 
        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-RelativePathExpr" xlink:type="simple">RelativePathExpr</nt>. In some
        cases, the next token after the slash is insufficient to
        allow a parser to distinguish these two possibilities: the 
        <code>*</code> token and keywords like 
        <code>union</code> could be either an operator or a 
        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-NameTest" xlink:type="simple">NameTest</nt>
        . For example, without
        lookahead the first part of the expression 
        <code>/ * 5</code> is easily taken to be a complete
        expression, 
        <code role="parse-test">/ *</code>, which has a very different interpretation
        (the child nodes of 
        <code>/</code>).</p><p>Therefore to reduce the need for lookahead, if the token
        immediately following a slash can form the start of a 
        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-RelativePathExpr" xlink:type="simple">RelativePathExpr</nt>, then the
        slash must be the beginning of a 
        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-PathExpr" xlink:type="simple">PathExpr</nt>, not the entirety of
        it.</p><p>A single slash may be used as the left-hand argument of
        an operator by parenthesizing it: 
        <code role="parse-test">(/) * 5</code>. The expression 
        <code role="parse-test">5 * /</code>, on the other hand, is syntactically valid without
        parentheses.</p></constraintnote><constraintnote id="parse-note-xml-version" type="xgc"><head>xml-version</head><p diff="chg">The version of XML and XML Names (e.g. <bibref ref="XML"/> and <bibref ref="XMLNAMES"/>, or <bibref ref="XML1.1"/> and <bibref ref="XMLNAMES11"/>) is <termref def="dt-implementation-defined">implementation-defined</termref>. It
        is recommended that the latest applicable version be used
        (even if it is published later than this specification). The
        EBNF in this specification links only to the 1.0
        versions. Note also that these external productions follow the
        whitespace rules of their respective specifications, and not
        the rules of this specification, in particular <specref ref="DefaultWhitespaceHandling"/>. Thus <code>prefix :
        localname</code> is not a syntactically valid <termref def="dt-qname">lexical QName</termref> for purposes of this
        specification, just as it is not permitted in a XML
        document. Also, comments are not permissible on either side of
        the colon. Also extra-grammatical constraints such as
        well-formedness constraints must be taken into account.</p><p role="xpath" diff="chg">XPath expressions allow any legal XML Unicode character, subject only to constraints imposed by the host language.</p></constraintnote><constraintnote id="parse-note-reserved-function-names" type="xgc"><head>reserved-function-names</head><p>Unprefixed function names spelled the same way as
        language keywords could make the language harder to
        recognize. For instance, 
        <code>if(foo)</code> could be taken either as a 
        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-FunctionCall" xlink:type="simple">FunctionCall</nt> or as the beginning
        of an 
        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-IfExpr" xlink:type="simple">IfExpr</nt>.  Therefore, an unprefixed
	function name must not be any of the names in
	<specref ref="id-reserved-fn-names"/>.</p><p>A function named "if" can be called by binding its
        namespace to a prefix and using the prefixed form:
        "library:if(foo)" instead of "if(foo)".</p></constraintnote><constraintnote id="parse-note-occurrence-indicators" type="xgc"><head>occurrence-indicators</head><p>As written, the grammar
        in <specref ref="nt-bnf"/> is ambiguous for some forms using
        the '+' and '*' Kleene operators. The ambiguity is resolved as
        follows: these operators are tightly bound to the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SequenceType" xlink:type="simple">SequenceType</nt> expression, and have
        higher precedence than other uses of these symbols.  Any
        occurrence of '+' and '*', as well as '?', following a
        sequence type is assumed to be an occurrence indicator, which
        binds to the last <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ItemType" xlink:type="simple">ItemType</nt> in the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SequenceType" xlink:type="simple">SequenceType</nt>.</p><p>Thus, <code role="parse-test">4 treat as item() + -
	5</code> must be interpreted as <code role="parse-test">(4
	treat as item()+) - 5</code>, taking the '+' as an
	OccurrenceIndicator and the '-' as a subtraction operator. To
	force the interpretation of "+" as an addition operator (and
	the corresponding interpretation of the "-" as a unary minus),
	parentheses may be used: the form <code role="parse-test">(4
	treat as item()) + -5</code> surrounds the <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SequenceType" xlink:type="simple">SequenceType</nt> expression with
	parentheses and leads to the desired interpretation.</p><p> 
                     <code>function () as xs:string *</code>
	is interpreted as <code>function () as
	(xs:string *)</code>, not as <code>(function
	() as xs:string) *</code>.  Parentheses can be used as shown
	to force the latter interpretation.</p><p>This rule has as a consequence that certain forms which
        would otherwise be syntactically valid and unambiguous are not
        recognized: in "4 treat as item() + 5", the "+" is taken as
        an 
        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-OccurrenceIndicator" xlink:type="simple">OccurrenceIndicator</nt>, and
        not as an operator, which means this is not a syntactically valid
        expression.</p></constraintnote></div3><div3 id="notes-on-parsing"><head>Grammar Notes</head><p>This section contains general notes on the EBNF
      productions, which may be helpful in understanding how to
      interpret and implement the EBNF. These notes are not
      normative. The notes below are referenced from the right side
      of the production, with the notation: 
      <emph>/* gn: &lt;id&gt; */</emph>.</p><note><glist><gitem id="parse-note-parens"><label>grammar-note: parens</label><def><p>Look-ahead is required to distinguish 
              <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-FunctionCall" xlink:type="simple">FunctionCall</nt> from a EQName
              or keyword followed by a 
              
              <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Comment" xlink:type="simple">Comment</nt>. For example: 
              <code role="parse-test">address (: this may be empty
              :)</code> may be mistaken for a call to a function
              named "address" unless this lookahead is employed.
              Another example is 
              <code role="parse-test">for (: whom the bell :)
              $tolls in 3 return $tolls</code>, where the keyword
              "for" must not be mistaken for a function name.</p></def></gitem><gitem id="parse-note-comments"><label>grammar-note: comments</label><def><p>Comments are allowed everywhere that 
              <termref def="IgnorableWhitespace">ignorable
              whitespace</termref> is allowed, and the 
              <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Comment" xlink:type="simple">Comment</nt> symbol does not
              explicitly appear on the right-hand side of the
              grammar (except in its own production). See 
              <specref ref="DefaultWhitespaceHandling"/>. 
              </p><p>A comment can contain nested comments, as long as
              all "(:" and ":)" patterns are balanced, no matter
              where they occur within the outer comment.</p><note><p>Lexical analysis may typically handle nested
                comments by incrementing a counter for each "(:"
                pattern, and decrementing the counter for each ":)"
                pattern. The comment does not terminate until the
                counter is back to zero.</p></note><p>Some illustrative examples:</p><ulist><item><p>
                                    <code>(: commenting out a (: comment :) may be
                  confusing, but often helpful :)</code> is a syntactically valid
                  Comment, since balanced nesting of comments is
                  allowed.</p></item><item><p>
                                    <code role="parse-test">"this is just a string
                  :)"</code> is a syntactically valid expression. However, 
                  <code>(: "this is just a string :)" :)</code> will
                  cause a syntax error. Likewise, 
                  <code role="parse-test">"this is another string
                  (:"</code> is a syntactically valid expression, but 
                  <code>(: "this is another string (:"
                  :)</code> will cause a syntax error. It is a
                  limitation of nested comments that literal
                  content can cause unbalanced nesting of
                  comments.</p></item><item><p>
                                    <code role="parse-test">for (: set up loop :) $i
                  in $x return $i</code> is syntactically valid,
                  ignoring the comment.</p></item><item><p>
                                    <code role="parse-test">5 instance (: strange
                  place for a comment :) of xs:integer</code> is
                  also syntactically valid.</p></item></ulist></def></gitem></glist></note></div3></div2><div2 id="lexical-structure"><head>Lexical structure</head><p>The terminal symbols assumed by the grammar above are
    described in this section.</p><p>Quoted strings appearing in production rules are terminal
    symbols.</p><p>Other terminal symbols are defined in 
    <specref ref="terminal-symbols"/>.</p><p diff="add">Some productions are defined by reference to the XML and XML Names
specifications (e.g.  <bibref ref="XML"/> and <bibref ref="XMLNAMES"/>, or  <bibref ref="XML1.1"/> and  <bibref ref="XMLNAMES11"/> . <phrase role="xpath">A host language may choose</phrase> which version of these specifications is used; it is recommended that the latest applicable version be used (even if it is published later than this specification).</p><p role="xpath" diff="del">A 
    <term>host language</term> may choose whether the lexical rules
    of 
    <bibref ref="XML"/> and 
    <bibref ref="XMLNAMES"/> are followed, or alternatively, the
    lexical rules of 
    <bibref ref="XML1.1"/> and 
    <bibref ref="XMLNAMES11"/> are followed.</p><p>When tokenizing, the longest possible match that is <phrase diff="del">valid in
    the current context</phrase>
               <phrase diff="add">consistent with the EBNF</phrase> is used.</p><p>All keywords are case sensitive. Keywords are not
    reserved—that is, any <termref def="dt-qname">lexical
    QName</termref> may duplicate a keyword except as noted in
    <specref ref="id-reserved-fn-names"/>.</p><div3 id="terminal-symbols"><head>Terminal Symbols</head><scrap headstyle="show"><head/><prod num="95" id="prod-xpath30-IntegerLiteral"><lhs>IntegerLiteral</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Digits" xlink:type="simple">Digits</nt>
                     </rhs></prod><prod num="96" id="prod-xpath30-DecimalLiteral"><lhs>DecimalLiteral</lhs><rhs>("."  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Digits" xlink:type="simple">Digits</nt>)  |  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Digits" xlink:type="simple">Digits</nt>  "."  [0-9]*)</rhs><com>
                        <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ws-explicit" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">ws: explicit</loc>
                     </com></prod><prod num="97" id="prod-xpath30-DoubleLiteral"><lhs>DoubleLiteral</lhs><rhs>(("."  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Digits" xlink:type="simple">Digits</nt>)  |  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Digits" xlink:type="simple">Digits</nt>  ("."  [0-9]*)?))  [eE]  [+-]?  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Digits" xlink:type="simple">Digits</nt>
                     </rhs><com>
                        <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ws-explicit" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">ws: explicit</loc>
                     </com></prod><prod num="98" id="prod-xpath30-StringLiteral"><lhs>StringLiteral</lhs><rhs>('"'  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-EscapeQuot" xlink:type="simple">EscapeQuot</nt>  |  [^"])*  '"')  |  ("'"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-EscapeApos" xlink:type="simple">EscapeApos</nt>  |  [^'])*  "'")</rhs><com>
                        <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ws-explicit" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">ws: explicit</loc>
                     </com></prod><prod num="99" id="prod-xpath30-URIQualifiedName"><lhs>URIQualifiedName</lhs><rhs>
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-BracedURILiteral" xlink:type="simple">BracedURILiteral</nt>  
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-NCName" xlink:type="simple">NCName</nt>
                     </rhs><com>
                        <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ws-explicit" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">ws: explicit</loc>
                     </com></prod><prod num="100" id="prod-xpath30-BracedURILiteral"><lhs>BracedURILiteral</lhs><rhs>"Q"  "{"  [^{}]*  "}"</rhs><com>
                        <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ws-explicit" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">ws: explicit</loc>
                     </com></prod><prod num="101" id="prod-xpath30-EscapeQuot"><lhs>EscapeQuot</lhs><rhs>'""'</rhs></prod><prod num="102" id="prod-xpath30-EscapeApos"><lhs>EscapeApos</lhs><rhs>"''"</rhs></prod><prod num="103" id="prod-xpath30-Comment"><lhs>Comment</lhs><rhs>"(:"  (<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-CommentContents" xlink:type="simple">CommentContents</nt>  |  <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Comment" xlink:type="simple">Comment</nt>)*  ":)"</rhs><com>
                        <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ws-explicit" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">ws: explicit</loc>
                     </com><com>
                        <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#parse-note-comments" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">gn: comments</loc>
                     </com></prod><prod num="104" id="prod-xpath30-QName"><lhs>QName</lhs><rhs>
                        <xnt xmlns:xlink="http://www.w3.org/1999/xlink" ref="NT-QName" spec="Names" xlink:type="simple">[http://www.w3.org/TR/REC-xml-names/#NT-QName]</xnt>
                     </rhs><com>
                        <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#parse-note-xml-version" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">xgc: xml-version</loc>
                     </com></prod><prod num="105" id="prod-xpath30-NCName"><lhs>NCName</lhs><rhs>
                        <xnt xmlns:xlink="http://www.w3.org/1999/xlink" ref="NT-NCName" spec="Names" xlink:type="simple">[http://www.w3.org/TR/REC-xml-names/#NT-NCName]</xnt>
                     </rhs><com>
                        <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#parse-note-xml-version" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">xgc: xml-version</loc>
                     </com></prod><prod num="106" id="prod-xpath30-Char"><lhs>Char</lhs><rhs>
                        <xnt xmlns:xlink="http://www.w3.org/1999/xlink" ref="NT-Char" spec="XML" xlink:type="simple">[http://www.w3.org/TR/REC-xml#NT-Char]</xnt>
                     </rhs><com>
                        <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#parse-note-xml-version" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">xgc: xml-version</loc>
                     </com></prod></scrap><p>The following symbols are used only in the definition of
      terminal symbols; they are not terminal symbols in the
      grammar of 
      <specref ref="id-grammar"/>.</p><scrap headstyle="show"><head/><prod num="107" id="prod-xpath30-Digits"><lhs>Digits</lhs><rhs>[0-9]+</rhs></prod><prod num="108" id="prod-xpath30-CommentContents"><lhs>CommentContents</lhs><rhs>(<nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-Char" xlink:type="simple">Char</nt>+ - (Char* ('(:' | ':)') Char*))</rhs></prod></scrap></div3><div3 id="id-terminal-delimitation"><head>Terminal Delimitation</head><p>XPath 3.0 expressions consist of 
      <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#terminal-symbols" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">terminal symbols</loc> and 
      <termref def="symbolseparators">symbol
      separators</termref>.</p><p>Terminal symbols that are not used exclusively in 
      <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ws-explicit" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">/* ws: explicit */</loc> productions
      are of two kinds: delimiting and non-delimiting.</p><!-- The next paragraph is "filled in" by various stylesheets used to generate the "assembled" source files. --><p>
                  <termdef id="delimiting-token" term="delimiting terminal symbol">The 
        <term>delimiting terminal symbols</term> are: 
        "!", "!=", <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-StringLiteral" xlink:type="simple">StringLiteral</nt>, "#", "$", "(", ")", "*", "+", (comma), "-", (dot), "..", "/", "//", (colon), "::", ":=", "&lt;", "&lt;&lt;", "&lt;=", "=", "&gt;", "&gt;=", "&gt;&gt;", "?", "@", <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-BracedURILiteral" xlink:type="simple">BracedURILiteral</nt>, "[", "]", "{", "|", "||", "}"
                  </termdef>
               </p><!-- The next paragraph is "filled in" by various stylesheets used to generate the "assembled" source files. --><p>
                  <termdef id="non-delimiting-token" term="non-delimiting terminal symbol">The 
        <term>non-delimiting terminal symbols</term> are: 
        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-IntegerLiteral" xlink:type="simple">IntegerLiteral</nt>, <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-URIQualifiedName" xlink:type="simple">URIQualifiedName</nt>, <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-NCName" xlink:type="simple">NCName</nt>, <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-DecimalLiteral" xlink:type="simple">DecimalLiteral</nt>, <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-DoubleLiteral" xlink:type="simple">DoubleLiteral</nt>, <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="prod-xpath30-QName" xlink:type="simple">QName</nt>, "ancestor", "ancestor-or-self", "and", "as", "attribute", "cast", "castable", "child", "comment", "descendant", "descendant-or-self", "div", "document-node", "element", "else", "empty-sequence", "eq", "every", "except", "following", "following-sibling", "for", "function", "ge", "gt", "idiv", "if", "in", "instance", "intersect", "is", "item", "le", "let", "lt", "mod", "namespace", "namespace-node", "ne", "node", "of", "or", "parent", "preceding", "preceding-sibling", "processing-instruction", "return", "satisfies", "schema-attribute", "schema-element", "self", "some", "text", "then", "to", "treat", "union"
                  </termdef>
               </p><p>
                  <termdef id="symbolseparators" term="symbol separators">
                     <termref def="Whitespace">Whitespace</termref> and 
        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Comment" xlink:type="simple">Comments</nt> function as 
        <term>symbol separators</term>. For the most part, they are
        not mentioned in the grammar, and may occur between any two
        terminal symbols mentioned in the grammar, except where
        that is forbidden by the 
        <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ws-explicit" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">/* ws: explicit */</loc> annotation
        in the EBNF, or by the 
        <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#parse-note-xml-version" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">/* xgc: xml-version
        */</loc> annotation.</termdef>
               </p><p>It is customary to separate consecutive terminal symbols
      by 
      <termref def="Whitespace">whitespace</termref> and 
      <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Comment" xlink:type="simple">Comments</nt>, but this is required only
      when otherwise two non-delimiting symbols would be adjacent
      to each other. There are two exceptions to this, that of "."
      and "-", which do require a 
      <termref def="symbolseparators">symbol separator</termref> if
      they follow a QName or NCName. Also, "." requires a separator
      if it precedes or follows a numeric literal.</p></div3><div3 id="id-eol-handling"><head>End-of-Line Handling</head><p role="xpath">The host language must specify whether the
      XPath 3.0 processor normalizes all line breaks on input, before
      parsing, and if it does so, whether it uses the rules of <bibref ref="XML"/> or <bibref ref="XML1.1"/>.<phrase diff="del">It is implementation defined
      which version is used.</phrase>
               </p><div4 id="id-xml10-eol-handling"><head>XML 1.0 End-of-Line Handling</head><p>For 
        <bibref ref="XML"/> processing, all of the following must
        be translated to a single #xA character:</p><olist><item><p>the two-character sequence #xD #xA</p></item><item><p>any #xD character that is not immediately followed
            by #xA.</p></item></olist></div4><div4 id="id-xml11-eol-handling"><head>XML 1.1 End-of-Line Handling</head><p>For 
        <bibref ref="XML1.1"/> processing, all of the following
        must be translated to a single #xA character:</p><olist><item><p>the two-character sequence #xD #xA</p></item><item><p>the two-character sequence #xD #x85</p></item><item><p>the single character #x85</p></item><item><p>the single character #x2028</p></item><item><p>any #xD character that is not immediately followed
            by #xA or #x85.</p></item></olist></div4></div3><div3 id="whitespace-rules"><head>Whitespace Rules</head><div4 id="DefaultWhitespaceHandling"><head>Default Whitespace Handling</head><p>
                     <termdef id="Whitespace" term="whitespace">A 
          <term>whitespace</term> character is any of the characters
          defined by 
          <xnt xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/REC-xml/#NT-S" xlink:type="simple">
          [http://www.w3.org/TR/REC-xml/#NT-S]</xnt>.</termdef>
                  </p><p>
                     <termdef term="ignorable whitespace" id="IgnorableWhitespace">
                        <term>Ignorable whitespace</term> consists of any 
        <termref def="Whitespace">whitespace</termref> characters
        that may occur between 
        <termref def="terminal">terminals</termref>, unless these
        characters occur in the context of a production marked with
        a 
        <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#ExplicitWhitespaceHandling" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">
        ws:explicit</loc> annotation, in which case they can occur
        only where explicitly specified (see 
        <specref ref="ExplicitWhitespaceHandling"/>).</termdef> Ignorable
        whitespace characters are not significant to the semantics
        of an expression. Whitespace is allowed before the first
        terminal and after the last terminal <phrase role="xpath">of an XPath</phrase>.
        Whitespace is allowed between any two 
        <termref def="terminal">terminals</termref>. 
        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Comment" xlink:type="simple">Comments</nt> may also act as "whitespace"
        to prevent two adjacent terminals from being recognized as
        one. Some illustrative examples are as follows:</p><ulist><item><p>
                           <code>foo- foo</code> results in a syntax error. "foo-"
            would be recognized as a QName.</p></item><item><p>
                           <code role="parse-test">foo -foo</code> is syntactically
            equivalent to 
            <code role="parse-test">foo - foo</code>, two QNames
            separated by a subtraction operator.</p></item><item><p>
                           <code role="parse-test">foo(: This is a comment :)-
            foo</code> is syntactically equivalent to 
            <code>foo - foo</code>. This is because the comment
            prevents the two adjacent terminals from being
            recognized as one.</p></item><item><p>
                           <code role="parse-test">foo-foo</code> is syntactically equivalent to
            single QName. This is because "-" is a valid character
            in a QName. When used as an operator after the
            characters of a name, the "-" must be separated from
            the name, e.g. by using whitespace or parentheses.</p></item><item><p>
                           <code>10div 3</code> results in a syntax error.</p></item><item><p>
                           <code>10 div3</code> also results in a syntax error.</p></item><item><p>
                           <code>10div3</code> also results in a syntax error.</p></item></ulist></div4><div4 id="ExplicitWhitespaceHandling"><head>Explicit Whitespace Handling</head><p>Explicit whitespace notation is specified with the EBNF
        productions, when it is different from the default rules,
        using the notation shown below. This notation is not
        inherited. In other words, if an EBNF rule is marked as /*
        ws: explicit */, the notation does not automatically apply
        to all the 'child' EBNF productions of that rule.</p><glist><gitem id="ws-explicit"><label>ws: explicit</label><def><p>/* ws: explicit */ means that the EBNF notation
              explicitly notates, with 
              <code>S</code> or otherwise, where 
              <termref def="Whitespace">whitespace
              characters</termref> are allowed. In productions with
              the /* ws: explicit */ annotation, 
              <specref ref="DefaultWhitespaceHandling"/> does not
              apply. 
              <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Comment" xlink:type="simple">Comments</nt> are also not allowed
              in these productions.</p></def></gitem></glist></div4></div3></div2><div2 id="id-reserved-fn-names"><head>Reserved Function Names</head><p>The following names are not allowed as function names in an
    unprefixed form because expression syntax takes precedence.</p><!-- Note to editors: This list is (or should be) in alphabetical order. --><ulist><item><p>
                     <code>attribute</code>
                  </p></item><item><p>
                     <code>comment</code>
                  </p></item><item><p>
                     <code>document-node</code>
                  </p></item><item><p>
                     <code>element</code>
                  </p></item><item><p>
                     <code>empty-sequence</code>
                  </p></item><item><p>
                     <code>function</code>
                  </p></item><item><p>
                     <code>if</code>
                  </p></item><item><p>
                     <code>item</code>
                  </p></item><item><p>
                     <code>namespace-node</code>
                  </p></item><item><p>
                     <code>node</code>
                  </p></item><item><p>
                     <code>processing-instruction</code>
                  </p></item><item><p>
                     <code>schema-attribute</code>
                  </p></item><item><p>
                     <code>schema-element</code>
                  </p></item><item><p>
                     <code>switch</code>
                  </p></item><item><p>
                     <code>text</code>
                  </p></item><item><p>
                     <code>typeswitch</code>
                  </p></item></ulist><note role="xpath"><p>
      Although the keywords
      <code>switch</code>
      and
      <code>typeswitch</code>
      are not used in XPath,
      they are considered reserved function names
      for compatibility with XQuery.
      </p></note></div2><div2 id="id-precedence-order"><head>Precedence Order (Non-Normative)</head><p diff="chg" at="XQ.E26 and XP.E18">The grammar in
    <specref ref="id-grammar"/> normatively defines built-in
    precedence among the operators of XQuery. These operators are
    summarized here to make clear the order of their precedence
    from lowest to highest. The associativity column indicates the
    order in which operators of equal precedence in an expression
    are applied.</p><table border="1"><tbody><tr><th rowspan="1" colspan="1">#</th><th rowspan="1" colspan="1">Operator</th><th rowspan="1" colspan="1">Associativity</th></tr><tr><td rowspan="1" colspan="1">1</td><td rowspan="1" colspan="1">
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Expr" xlink:type="simple">, (comma)</nt>
                     </td><td rowspan="1" colspan="1">either</td></tr><tr><td rowspan="1" colspan="1">2</td><td rowspan="1" colspan="1">
                        <phrase role="xpath">
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ForExpr" xlink:type="simple">for</nt>,</phrase>
                        <phrase role="xpath">
                           <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-LetExpr" xlink:type="simple">let</nt>,</phrase>
            
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-QuantifiedExpr" xlink:type="simple">some, every</nt>, 
            
            
            
            <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-IfExpr" xlink:type="simple">if</nt>
                     </td><td rowspan="1" colspan="1">NA</td></tr><tr><td rowspan="1" colspan="1">3</td><td rowspan="1" colspan="1">
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-OrExpr" xlink:type="simple">or</nt>
                     </td><td rowspan="1" colspan="1">either</td></tr><tr><td rowspan="1" colspan="1">4</td><td rowspan="1" colspan="1">
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AndExpr" xlink:type="simple">and</nt>
                     </td><td rowspan="1" colspan="1">either</td></tr><tr><td rowspan="1" colspan="1">5</td><td rowspan="1" colspan="1">
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ValueComp" xlink:type="simple">eq, ne, lt, le, gt, ge</nt>, 
            <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-GeneralComp" xlink:type="simple">=, !=, &lt;, &lt;=, &gt;, &gt;=</nt>, 
            <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-NodeComp" xlink:type="simple">is, &lt;&lt;, &gt;&gt;</nt>
                     </td><td rowspan="1" colspan="1">NA</td></tr><tr diff="add"><td rowspan="1" colspan="1">6</td><td rowspan="1" colspan="1">
	                       <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-StringConcatExpr" xlink:type="simple">||</nt>
	                    </td><td rowspan="1" colspan="1">left-to-right</td></tr><tr><td rowspan="1" colspan="1">7</td><td rowspan="1" colspan="1">
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-RangeExpr" xlink:type="simple">to</nt>
                     </td><td rowspan="1" colspan="1">NA</td></tr><tr><td rowspan="1" colspan="1">8</td><td rowspan="1" colspan="1">
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AdditiveExpr" xlink:type="simple">+, - (binary)</nt>
                     </td><td rowspan="1" colspan="1">left-to-right</td></tr><tr><td rowspan="1" colspan="1">9</td><td rowspan="1" colspan="1">
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-MultiplicativeExpr" xlink:type="simple">*, div, idiv, mod</nt>
                     </td><td rowspan="1" colspan="1">left-to-right</td></tr><tr><td rowspan="1" colspan="1">10</td><td rowspan="1" colspan="1">
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-UnionExpr" xlink:type="simple">union, |</nt>
                     </td><td rowspan="1" colspan="1">either</td></tr><tr><td rowspan="1" colspan="1">11</td><td rowspan="1" colspan="1">
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-IntersectExceptExpr" xlink:type="simple">intersect, except</nt>
                     </td><td rowspan="1" colspan="1">left-to-right</td></tr><tr><td rowspan="1" colspan="1">12</td><td rowspan="1" colspan="1">
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-InstanceofExpr" xlink:type="simple">instance of</nt>
                     </td><td rowspan="1" colspan="1">NA</td></tr><tr><td rowspan="1" colspan="1">13</td><td rowspan="1" colspan="1">
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-TreatExpr" xlink:type="simple">treat as</nt>
                     </td><td rowspan="1" colspan="1">NA</td></tr><tr><td rowspan="1" colspan="1">14</td><td rowspan="1" colspan="1">
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-CastableExpr" xlink:type="simple">castable as</nt>
                     </td><td rowspan="1" colspan="1">NA</td></tr><tr><td rowspan="1" colspan="1">15</td><td rowspan="1" colspan="1">
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-CastExpr" xlink:type="simple">cast as</nt>
                     </td><td rowspan="1" colspan="1">NA</td></tr><tr><td rowspan="1" colspan="1">16</td><td rowspan="1" colspan="1">
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-UnaryExpr" xlink:type="simple">-, + (unary)</nt>
                     </td><td rowspan="1" colspan="1">right-to-left</td></tr><tr><td rowspan="1" colspan="1">17</td><td rowspan="1" colspan="1">
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SimpleMapExpr" xlink:type="simple">!</nt>
                     </td><td rowspan="1" colspan="1">left-to-right</td></tr><tr><td rowspan="1" colspan="1">18</td><td rowspan="1" colspan="1">
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-PathExpr" xlink:type="simple">/, //</nt>
                     </td><td rowspan="1" colspan="1">left-to-right</td></tr><!--        <tr diff="chg" at="XQ.E26 and XP.E18"> --><tr><td rowspan="1" colspan="1">19</td><td rowspan="1" colspan="1">
                        <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-Predicate" xlink:type="simple">[ ]</nt>
                     </td><td rowspan="1" colspan="1">left-to-right</td></tr></tbody></table><p>
      In the "Associativity" column,
      "either"
      indicates that all the operators at that level have the associative property
      (i.e., <code>(A op B) op C</code> is equivalent to <code>A op (B op C)</code>),
      so their associativity is inconsequential.
      "NA" (not applicable)
      indicates that the EBNF does not allow
      an expression that directly contains
      multiple operators from that precedence level,
      so the question of their associativity does not arise.
    </p><note diff="chg" at="XQ.E26 and XP.E18"><p>Parentheses can be used to override the operator
      precedence in the usual way. Square brackets in an expression
      such as A[B] serve two roles: they act as an operator causing
      B to be evaluated once for each item in the value of A, and
      they act as parentheses enclosing the expression B.</p></note></div2></div1><div1 id="id-type-promotion-and-operator-mapping"><head>Type Promotion and Operator Mapping</head><div2 id="promotion"><head>Type Promotion</head><p>
               <termdef term="type promotion" id="dt-type-promotion">Under certain circumstances, an atomic value can be promoted from
one type to another. <term>Type promotion</term> is used in evaluating function calls (see <specref ref="id-eval-function-call"/>)  and operators that accept numeric or string operands (see <specref ref="mapping"/>).</termdef> The following type promotions are permitted:</p><olist><item><p>Numeric type promotion:</p><olist><item><p>A value of type <code>xs:float</code> (or any type
derived by restriction from <code>xs:float</code>) can be promoted to
the type <code>xs:double</code>. The result is the
<code>xs:double</code> value that is the same as the original
value.</p></item><item><p>A value of type <code>xs:decimal</code> (or any type derived
by restriction from <code>xs:decimal</code>) can be promoted to either
of the types <code>xs:float</code> or <code>xs:double</code>.  The
result of this promotion is created by casting the original value to
the required type. This kind of promotion may cause loss of
precision.</p></item></olist></item><item><p>URI type promotion: A value of type <code>xs:anyURI</code> (or any type derived by restriction from <code>xs:anyURI</code>) can be promoted to the type <code>xs:string</code>. The result of this promotion is created by casting the original value to the type <code>xs:string</code>.</p><note><p>Since <code>xs:anyURI</code> values can be promoted to <code>xs:string</code>, functions and operators that compare strings using the <termref def="dt-def-collation">default collation</termref> also compare <code>xs:anyURI</code> values using the <termref def="dt-def-collation">default collation</termref>. This ensures that orderings that include strings, <code>xs:anyURI</code> values, or any combination of the two types are consistent and well-defined.</p></note></item></olist><p>Note that <termref def="dt-type-promotion">type promotion</termref> is different from <termref def="dt-subtype-substitution">subtype substitution</termref>. For example:</p><ulist><item><p>A function that expects a parameter <code>$p</code> of type <code>xs:float</code> can be invoked with a value of type <code>xs:decimal</code>. This is an example of <termref def="dt-type-promotion">type promotion</termref>. The value is actually converted to the expected type. Within the body of the function, <code>$p instance of xs:decimal</code> returns <code>false</code>.</p></item><item><p>A function that expects a parameter <code>$p</code> of type <code>xs:decimal</code> can be invoked with a value of type <code>xs:integer</code>. This is an example of <termref def="dt-subtype-substitution">subtype substitution</termref>. The value retains its original type. Within the body of the function, <code>$p instance of xs:integer</code> returns <code>true</code>.</p></item></ulist></div2><div2 id="mapping"><head>Operator Mapping</head><p>The operator mapping tables in this section list the
combinations of types for which the various operators of XPath 3.0
are defined. <termdef term="operator function" id="dt-operator-function">For each operator and valid combination of operand types, the operator mapping tables specify a result type and an <term>operator function</term> that implements the semantics of the operator for the given types.</termdef> The definitions of the operator functions are given in  <bibref ref="xpath-functions-30"/>. The result of an operator may be the raising of an error by its operator function, as defined in <bibref ref="xpath-functions-30"/>. In some cases, the operator function does not implement the full semantics of
a given operator. For the definition of each operator (including its
behavior for empty sequences or sequences of length greater than one),
see the descriptive material in the main part of this
document.</p><p>The <code>and</code> and
<code>or</code> operators are defined directly in the main body of
this document, and do not occur in the operator mapping tables.</p><p>If an operator in the operator mapping tables expects an operand of type
<emph>ET</emph>, that operator can be applied to an operand of type <emph>AT</emph> if type <emph>AT</emph> can
be converted to type <emph>ET</emph> by a combination of <termref def="dt-type-promotion">type promotion</termref> and <termref def="dt-subtype-substitution">subtype substitution</termref>. For example, a table entry indicates that the <code>gt</code> operator may
be applied to two <code>xs:date</code> operands, returning
<code>xs:boolean</code>. Therefore, the <code>gt</code> operator may
also be applied to two (possibly different) subtypes of
<code>xs:date</code>, also returning <code>xs:boolean</code>.</p><p>
               <termdef id="dt-numeric" term="numeric">When referring to a type, the term <term>numeric</term> denotes the types
<code>xs:integer</code>, <code>xs:decimal</code>,
<code>xs:float</code>, and <code>xs:double</code>.</termdef> An operator whose
operands and result are designated as <termref def="dt-numeric">numeric</termref> might be
thought of as representing four operators, one for each of the numeric
types. For example, the numeric <code>+</code> operator might be
thought of as representing the following four operators:</p><table width="80%" border="1" summary="Operators"><tbody><tr><td align="center" rowspan="1" colspan="1">Operator</td><td align="center" rowspan="1" colspan="1">First operand type</td><td align="center" rowspan="1" colspan="1">Second operand type</td><td align="center" rowspan="1" colspan="1">Result type</td></tr><tr><td align="center" rowspan="1" colspan="1">
                        <code>+</code>
                     </td><td align="center" rowspan="1" colspan="1">
                        <code>xs:integer</code>
                     </td><td align="center" rowspan="1" colspan="1">
                        <code>xs:integer</code>
                     </td><td align="center" rowspan="1" colspan="1">
                        <code>xs:integer</code>
                     </td></tr><tr><td align="center" rowspan="1" colspan="1">
                        <code>+</code>
                     </td><td align="center" rowspan="1" colspan="1">
                        <code>xs:decimal</code>
                     </td><td align="center" rowspan="1" colspan="1">
                        <code>xs:decimal</code>
                     </td><td align="center" rowspan="1" colspan="1">
                        <code>xs:decimal</code>
                     </td></tr><tr><td align="center" rowspan="1" colspan="1">
                        <code>+</code>
                     </td><td align="center" rowspan="1" colspan="1">
                        <code>xs:float</code>
                     </td><td align="center" rowspan="1" colspan="1">
                        <code>xs:float</code>
                     </td><td align="center" rowspan="1" colspan="1">
                        <code>xs:float</code>
                     </td></tr><tr><td align="center" rowspan="1" colspan="1">
                        <code>+</code>
                     </td><td align="center" rowspan="1" colspan="1">
                        <code>xs:double</code>
                     </td><td align="center" rowspan="1" colspan="1">
                        <code>xs:double</code>
                     </td><td align="center" rowspan="1" colspan="1">
                        <code>xs:double</code>
                     </td></tr></tbody></table><p>A numeric operator may be validly applied to an operand of type <emph>AT</emph> if type
<emph>AT</emph> can be converted to any of the four numeric types by a combination of
<termref def="dt-type-promotion">type promotion</termref> and <termref def="dt-subtype-substitution">subtype substitution</termref>. If the result type of an
operator is listed as numeric, it means "the first type in the ordered list <code>(xs:integer, xs:decimal, xs:float, xs:double)</code> into which all operands can be converted by <termref def="dt-subtype-substitution">subtype substitution</termref> and <termref def="dt-type-promotion">type promotion</termref>." As an example, suppose that the type <code>hatsize</code> is derived from <code>xs:integer</code> and the type <code>shoesize</code> is derived from <code>xs:float</code>.   Then if the <code>+</code> operator is invoked with operands of type <code>hatsize</code> and <code>shoesize</code>, it returns a result of type <code>xs:float</code>.  Similarly, if <code>+</code> is invoked with two operands of type <code>hatsize</code> it returns a result of type <code>xs:integer</code>.</p><p>
               <termdef id="dt-gregorian" term="Gregorian">In the operator mapping tables,
the term <term>Gregorian</term> refers to the types
<code>xs:gYearMonth</code>, <code>xs:gYear</code>,
<code>xs:gMonthDay</code>, <code>xs:gDay</code>, and
<code>xs:gMonth</code>.</termdef>  For binary operators that accept two
Gregorian-type operands, both operands must have the same type (for
example, if one operand is of type <code>xs:gDay</code>, the other
operand must be of type <code>xs:gDay</code>.)</p><table border="1" summary="Binary operators" role="small"><caption>Binary Operators</caption><tbody><tr><th rowspan="1" colspan="1">Operator</th><th rowspan="1" colspan="1">Type(A)</th><th rowspan="1" colspan="1">Type(B)</th><th rowspan="1" colspan="1">Function</th><th rowspan="1" colspan="1">Result type</th></tr><tr><td rowspan="1" colspan="1">A + B</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">op:numeric-add(A, B)</td><td rowspan="1" colspan="1">numeric</td></tr><tr><td rowspan="1" colspan="1">A + B</td><td rowspan="1" colspan="1">xs:date</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td><td rowspan="1" colspan="1">op:add-yearMonthDuration-to-date(A, B)</td><td rowspan="1" colspan="1">xs:date</td></tr><tr><td rowspan="1" colspan="1">A + B</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td><td rowspan="1" colspan="1">xs:date</td><td rowspan="1" colspan="1">op:add-yearMonthDuration-to-date(B, A)</td><td rowspan="1" colspan="1">xs:date</td></tr><tr><td rowspan="1" colspan="1">A + B</td><td rowspan="1" colspan="1">xs:date</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">op:add-dayTimeDuration-to-date(A, B)</td><td rowspan="1" colspan="1">xs:date</td></tr><tr><td rowspan="1" colspan="1">A + B</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">xs:date</td><td rowspan="1" colspan="1">op:add-dayTimeDuration-to-date(B, A)</td><td rowspan="1" colspan="1">xs:date</td></tr><tr><td rowspan="1" colspan="1">A + B</td><td rowspan="1" colspan="1">xs:time</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">op:add-dayTimeDuration-to-time(A, B)</td><td rowspan="1" colspan="1">xs:time</td></tr><tr><td rowspan="1" colspan="1">A + B</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">xs:time</td><td rowspan="1" colspan="1">op:add-dayTimeDuration-to-time(B, A)</td><td rowspan="1" colspan="1">xs:time</td></tr><tr><td rowspan="1" colspan="1">A + B</td><td rowspan="1" colspan="1">xs:dateTime</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td><td rowspan="1" colspan="1">op:add-yearMonthDuration-to-dateTime(A, B)</td><td rowspan="1" colspan="1">xs:dateTime</td></tr><tr><td rowspan="1" colspan="1">A + B</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td><td rowspan="1" colspan="1">xs:dateTime</td><td rowspan="1" colspan="1">op:add-yearMonthDuration-to-dateTime(B, A)</td><td rowspan="1" colspan="1">xs:dateTime</td></tr><tr><td rowspan="1" colspan="1">A + B</td><td rowspan="1" colspan="1">xs:dateTime</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">op:add-dayTimeDuration-to-dateTime(A, B)</td><td rowspan="1" colspan="1">xs:dateTime</td></tr><tr><td rowspan="1" colspan="1">A + B</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">xs:dateTime</td><td rowspan="1" colspan="1">op:add-dayTimeDuration-to-dateTime(B, A)</td><td rowspan="1" colspan="1">xs:dateTime</td></tr><tr><td rowspan="1" colspan="1">A + B</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td><td rowspan="1" colspan="1">op:add-yearMonthDurations(A, B)</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td></tr><tr><td rowspan="1" colspan="1">A + B</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">op:add-dayTimeDurations(A, B)</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td></tr><tr><td rowspan="1" colspan="1">A - B</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">op:numeric-subtract(A, B)</td><td rowspan="1" colspan="1">numeric</td></tr><tr><td rowspan="1" colspan="1">A - B</td><td rowspan="1" colspan="1">xs:date</td><td rowspan="1" colspan="1">xs:date</td><td rowspan="1" colspan="1">op:subtract-dates(A, B)</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td></tr><tr><td rowspan="1" colspan="1">A - B</td><td rowspan="1" colspan="1">xs:date</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td><td rowspan="1" colspan="1">op:subtract-yearMonthDuration-from-date(A, B)</td><td rowspan="1" colspan="1">xs:date</td></tr><tr><td rowspan="1" colspan="1">A - B</td><td rowspan="1" colspan="1">xs:date</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">op:subtract-dayTimeDuration-from-date(A, B)</td><td rowspan="1" colspan="1">xs:date</td></tr><tr><td rowspan="1" colspan="1">A - B</td><td rowspan="1" colspan="1">xs:time</td><td rowspan="1" colspan="1">xs:time</td><td rowspan="1" colspan="1">op:subtract-times(A, B)</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td></tr><tr><td rowspan="1" colspan="1">A - B</td><td rowspan="1" colspan="1">xs:time</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">op:subtract-dayTimeDuration-from-time(A, B)</td><td rowspan="1" colspan="1">xs:time</td></tr><tr><td rowspan="1" colspan="1">A - B</td><td rowspan="1" colspan="1">xs:dateTime</td><td rowspan="1" colspan="1">xs:dateTime</td><td rowspan="1" colspan="1">op:subtract-dateTimes(A, B)</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td></tr><tr><td rowspan="1" colspan="1">A - B</td><td rowspan="1" colspan="1">xs:dateTime</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td><td rowspan="1" colspan="1">op:subtract-yearMonthDuration-from-dateTime(A, B)</td><td rowspan="1" colspan="1">xs:dateTime</td></tr><tr><td rowspan="1" colspan="1">A - B</td><td rowspan="1" colspan="1">xs:dateTime</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">op:subtract-dayTimeDuration-from-dateTime(A, B)</td><td rowspan="1" colspan="1">xs:dateTime</td></tr><tr><td rowspan="1" colspan="1">A - B</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td><td rowspan="1" colspan="1">op:subtract-yearMonthDurations(A, B)</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td></tr><tr><td rowspan="1" colspan="1">A - B</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">op:subtract-dayTimeDurations(A, B)</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td></tr><tr><td rowspan="1" colspan="1">A * B</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">op:numeric-multiply(A, B)</td><td rowspan="1" colspan="1">numeric</td></tr><tr><td rowspan="1" colspan="1">A * B</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">op:multiply-yearMonthDuration(A, B)</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td></tr><tr><td rowspan="1" colspan="1">A * B</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td><td rowspan="1" colspan="1">op:multiply-yearMonthDuration(B, A)</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td></tr><tr><td rowspan="1" colspan="1">A * B</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">op:multiply-dayTimeDuration(A, B)</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td></tr><tr><td rowspan="1" colspan="1">A * B</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">op:multiply-dayTimeDuration(B, A)</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td></tr><tr><td rowspan="1" colspan="1">A idiv B</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">op:numeric-integer-divide(A, B)</td><td rowspan="1" colspan="1">xs:integer</td></tr><tr><td rowspan="1" colspan="1">A div B</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">op:numeric-divide(A, B)</td><td rowspan="1" colspan="1">numeric; but xs:decimal if both operands are xs:integer</td></tr><tr><td rowspan="1" colspan="1">A div B</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">op:divide-yearMonthDuration(A, B)</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td></tr><tr><td rowspan="1" colspan="1">A div B</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">op:divide-dayTimeDuration(A, B)</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td></tr><tr><td rowspan="1" colspan="1">A div B</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td><td rowspan="1" colspan="1">op:divide-yearMonthDuration-by-yearMonthDuration (A, B)</td><td rowspan="1" colspan="1">xs:decimal</td></tr><tr><td rowspan="1" colspan="1">A div B</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">op:divide-dayTimeDuration-by-dayTimeDuration (A, B)</td><td rowspan="1" colspan="1">xs:decimal</td></tr><tr><td rowspan="1" colspan="1">A mod B</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">op:numeric-mod(A, B)</td><td rowspan="1" colspan="1">numeric</td></tr><tr><td rowspan="1" colspan="1">A eq B</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">op:numeric-equal(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A eq B</td><td rowspan="1" colspan="1">xs:boolean</td><td rowspan="1" colspan="1">xs:boolean</td><td rowspan="1" colspan="1">op:boolean-equal(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A eq B</td><td rowspan="1" colspan="1">xs:string</td><td rowspan="1" colspan="1">xs:string</td><td rowspan="1" colspan="1">op:numeric-equal(fn:compare(A, B), 0)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A eq B</td><td rowspan="1" colspan="1">xs:date</td><td rowspan="1" colspan="1">xs:date</td><td rowspan="1" colspan="1">op:date-equal(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A eq B</td><td rowspan="1" colspan="1">xs:time</td><td rowspan="1" colspan="1">xs:time</td><td rowspan="1" colspan="1">op:time-equal(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A eq B</td><td rowspan="1" colspan="1">xs:dateTime</td><td rowspan="1" colspan="1">xs:dateTime</td><td rowspan="1" colspan="1">op:dateTime-equal(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A eq B</td><td rowspan="1" colspan="1">xs:duration</td><td rowspan="1" colspan="1">xs:duration</td><td rowspan="1" colspan="1">op:duration-equal(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A eq B</td><td rowspan="1" colspan="1">Gregorian</td><td rowspan="1" colspan="1">Gregorian</td><td rowspan="1" colspan="1">op:gYear-equal(A, B) etc.</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A eq B</td><td rowspan="1" colspan="1">xs:hexBinary</td><td rowspan="1" colspan="1">xs:hexBinary</td><td rowspan="1" colspan="1">op:hexBinary-equal(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A eq B</td><td rowspan="1" colspan="1">xs:base64Binary</td><td rowspan="1" colspan="1">xs:base64Binary</td><td rowspan="1" colspan="1">op:base64Binary-equal(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A eq B</td><td rowspan="1" colspan="1">xs:anyURI</td><td rowspan="1" colspan="1">xs:anyURI</td><td rowspan="1" colspan="1">op:numeric-equal(fn:compare(A, B), 0)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A eq B</td><td rowspan="1" colspan="1">xs:QName</td><td rowspan="1" colspan="1">xs:QName</td><td rowspan="1" colspan="1">op:QName-equal(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A eq B</td><td rowspan="1" colspan="1">xs:NOTATION</td><td rowspan="1" colspan="1">xs:NOTATION</td><td rowspan="1" colspan="1">op:NOTATION-equal(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A ne B</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">fn:not(op:numeric-equal(A, B))</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A ne B</td><td rowspan="1" colspan="1">xs:boolean</td><td rowspan="1" colspan="1">xs:boolean</td><td rowspan="1" colspan="1">fn:not(op:boolean-equal(A, B))</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A ne B</td><td rowspan="1" colspan="1">xs:string</td><td rowspan="1" colspan="1">xs:string</td><td rowspan="1" colspan="1">fn:not(op:numeric-equal(fn:compare(A, B), 0))</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A ne B</td><td rowspan="1" colspan="1">xs:date</td><td rowspan="1" colspan="1">xs:date</td><td rowspan="1" colspan="1">fn:not(op:date-equal(A, B))</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A ne B</td><td rowspan="1" colspan="1">xs:time</td><td rowspan="1" colspan="1">xs:time</td><td rowspan="1" colspan="1">fn:not(op:time-equal(A, B))</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A ne B</td><td rowspan="1" colspan="1">xs:dateTime</td><td rowspan="1" colspan="1">xs:dateTime</td><td rowspan="1" colspan="1">fn:not(op:dateTime-equal(A, B))</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A ne B</td><td rowspan="1" colspan="1">xs:duration</td><td rowspan="1" colspan="1">xs:duration</td><td rowspan="1" colspan="1">fn:not(op:duration-equal(A, B))</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A ne B</td><td rowspan="1" colspan="1">Gregorian</td><td rowspan="1" colspan="1">Gregorian</td><td rowspan="1" colspan="1">fn:not(op:gYear-equal(A, B)) etc.</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A ne B</td><td rowspan="1" colspan="1">xs:hexBinary</td><td rowspan="1" colspan="1">xs:hexBinary</td><td rowspan="1" colspan="1">fn:not(op:hexBinary-equal(A, B))</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A ne B</td><td rowspan="1" colspan="1">xs:base64Binary</td><td rowspan="1" colspan="1">xs:base64Binary</td><td rowspan="1" colspan="1">fn:not(op:base64Binary-equal(A, B))</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A ne B</td><td rowspan="1" colspan="1">xs:anyURI</td><td rowspan="1" colspan="1">xs:anyURI</td><td rowspan="1" colspan="1">fn:not(op:numeric-equal(fn:compare(A, B), 0))</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A ne B</td><td rowspan="1" colspan="1">xs:QName</td><td rowspan="1" colspan="1">xs:QName</td><td rowspan="1" colspan="1">fn:not(op:QName-equal(A, B))</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A ne B</td><td rowspan="1" colspan="1">xs:NOTATION</td><td rowspan="1" colspan="1">xs:NOTATION</td><td rowspan="1" colspan="1">fn:not(op:NOTATION-equal(A, B))</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A gt B</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">op:numeric-greater-than(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A gt B</td><td rowspan="1" colspan="1">xs:boolean</td><td rowspan="1" colspan="1">xs:boolean</td><td rowspan="1" colspan="1">op:boolean-greater-than(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A gt B</td><td rowspan="1" colspan="1">xs:string</td><td rowspan="1" colspan="1">xs:string</td><td rowspan="1" colspan="1">op:numeric-greater-than(fn:compare(A, B), 0)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A gt B</td><td rowspan="1" colspan="1">xs:date</td><td rowspan="1" colspan="1">xs:date</td><td rowspan="1" colspan="1">op:date-greater-than(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A gt B</td><td rowspan="1" colspan="1">xs:time</td><td rowspan="1" colspan="1">xs:time</td><td rowspan="1" colspan="1">op:time-greater-than(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A gt B</td><td rowspan="1" colspan="1">xs:dateTime</td><td rowspan="1" colspan="1">xs:dateTime</td><td rowspan="1" colspan="1">op:dateTime-greater-than(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A gt B</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td><td rowspan="1" colspan="1">op:yearMonthDuration-greater-than(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A gt B</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">op:dayTimeDuration-greater-than(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A gt B</td><td rowspan="1" colspan="1">xs:anyURI</td><td rowspan="1" colspan="1">xs:anyURI</td><td rowspan="1" colspan="1">op:numeric-greater-than(fn:compare(A, B), 0)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A lt B</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">op:numeric-less-than(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A lt B</td><td rowspan="1" colspan="1">xs:boolean</td><td rowspan="1" colspan="1">xs:boolean</td><td rowspan="1" colspan="1">op:boolean-less-than(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A lt B</td><td rowspan="1" colspan="1">xs:string</td><td rowspan="1" colspan="1">xs:string</td><td rowspan="1" colspan="1">op:numeric-less-than(fn:compare(A, B), 0)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A lt B</td><td rowspan="1" colspan="1">xs:date</td><td rowspan="1" colspan="1">xs:date</td><td rowspan="1" colspan="1">op:date-less-than(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A lt B</td><td rowspan="1" colspan="1">xs:time</td><td rowspan="1" colspan="1">xs:time</td><td rowspan="1" colspan="1">op:time-less-than(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A lt B</td><td rowspan="1" colspan="1">xs:dateTime</td><td rowspan="1" colspan="1">xs:dateTime</td><td rowspan="1" colspan="1">op:dateTime-less-than(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A lt B</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td><td rowspan="1" colspan="1">op:yearMonthDuration-less-than(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A lt B</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">op:dayTimeDuration-less-than(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A lt B</td><td rowspan="1" colspan="1">xs:anyURI</td><td rowspan="1" colspan="1">xs:anyURI</td><td rowspan="1" colspan="1">op:numeric-less-than(fn:compare(A, B), 0)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A ge B</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">op:numeric-greater-than(A, B) or op:numeric-equal(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A ge B</td><td rowspan="1" colspan="1">xs:boolean</td><td rowspan="1" colspan="1">xs:boolean</td><td rowspan="1" colspan="1">fn:not(op:boolean-less-than(A, B))</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A ge B</td><td rowspan="1" colspan="1">xs:string</td><td rowspan="1" colspan="1">xs:string</td><td rowspan="1" colspan="1">op:numeric-greater-than(fn:compare(A, B), -1)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A ge B</td><td rowspan="1" colspan="1">xs:date</td><td rowspan="1" colspan="1">xs:date</td><td rowspan="1" colspan="1">fn:not(op:date-less-than(A, B))</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A ge B</td><td rowspan="1" colspan="1">xs:time</td><td rowspan="1" colspan="1">xs:time</td><td rowspan="1" colspan="1">fn:not(op:time-less-than(A, B))</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A ge B</td><td rowspan="1" colspan="1">xs:dateTime</td><td rowspan="1" colspan="1">xs:dateTime</td><td rowspan="1" colspan="1">fn:not(op:dateTime-less-than(A, B))</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A ge B</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td><td rowspan="1" colspan="1">fn:not(op:yearMonthDuration-less-than(A, B))</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A ge B</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">fn:not(op:dayTimeDuration-less-than(A, B))</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A ge B</td><td rowspan="1" colspan="1">xs:anyURI</td><td rowspan="1" colspan="1">xs:anyURI</td><td rowspan="1" colspan="1">op:numeric-greater-than(fn:compare(A, B), -1)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A le B</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">op:numeric-less-than(A, B) or op:numeric-equal(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A le B</td><td rowspan="1" colspan="1">xs:boolean</td><td rowspan="1" colspan="1">xs:boolean</td><td rowspan="1" colspan="1">fn:not(op:boolean-greater-than(A, B))</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A le B</td><td rowspan="1" colspan="1">xs:string</td><td rowspan="1" colspan="1">xs:string</td><td rowspan="1" colspan="1">op:numeric-less-than(fn:compare(A, B), 1)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A le B</td><td rowspan="1" colspan="1">xs:date</td><td rowspan="1" colspan="1">xs:date</td><td rowspan="1" colspan="1">fn:not(op:date-greater-than(A, B))</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A le B</td><td rowspan="1" colspan="1">xs:time</td><td rowspan="1" colspan="1">xs:time</td><td rowspan="1" colspan="1">fn:not(op:time-greater-than(A, B))</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A le B</td><td rowspan="1" colspan="1">xs:dateTime</td><td rowspan="1" colspan="1">xs:dateTime</td><td rowspan="1" colspan="1">fn:not(op:dateTime-greater-than(A, B))</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A le B</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td><td rowspan="1" colspan="1">xs:yearMonthDuration</td><td rowspan="1" colspan="1">fn:not(op:yearMonthDuration-greater-than(A, B))</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A le B</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">xs:dayTimeDuration</td><td rowspan="1" colspan="1">fn:not(op:dayTimeDuration-greater-than(A, B))</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A le B</td><td rowspan="1" colspan="1">xs:anyURI</td><td rowspan="1" colspan="1">xs:anyURI</td><td rowspan="1" colspan="1">op:numeric-less-than(fn:compare(A, B), 1)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A is B</td><td rowspan="1" colspan="1">node()</td><td rowspan="1" colspan="1">node()</td><td rowspan="1" colspan="1">op:is-same-node(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A &lt;&lt; B</td><td rowspan="1" colspan="1">node()</td><td rowspan="1" colspan="1">node()</td><td rowspan="1" colspan="1">op:node-before(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A &gt;&gt; B</td><td rowspan="1" colspan="1">node()</td><td rowspan="1" colspan="1">node()</td><td rowspan="1" colspan="1">op:node-after(A, B)</td><td rowspan="1" colspan="1">xs:boolean</td></tr><tr><td rowspan="1" colspan="1">A union B</td><td rowspan="1" colspan="1">node()*</td><td rowspan="1" colspan="1">node()*</td><td rowspan="1" colspan="1">op:union(A, B)</td><td rowspan="1" colspan="1">node()*</td></tr><tr><td rowspan="1" colspan="1">A | B</td><td rowspan="1" colspan="1">node()*</td><td rowspan="1" colspan="1">node()*</td><td rowspan="1" colspan="1">op:union(A, B)</td><td rowspan="1" colspan="1">node()*</td></tr><tr><td rowspan="1" colspan="1">A intersect B</td><td rowspan="1" colspan="1">node()*</td><td rowspan="1" colspan="1">node()*</td><td rowspan="1" colspan="1">op:intersect(A, B)</td><td rowspan="1" colspan="1">node()*</td></tr><tr><td rowspan="1" colspan="1">A except B</td><td rowspan="1" colspan="1">node()*</td><td rowspan="1" colspan="1">node()*</td><td rowspan="1" colspan="1">op:except(A, B)</td><td rowspan="1" colspan="1">node()*</td></tr><tr><td rowspan="1" colspan="1">A to B</td><td rowspan="1" colspan="1">xs:integer</td><td rowspan="1" colspan="1">xs:integer</td><td rowspan="1" colspan="1">op:to(A, B)</td><td rowspan="1" colspan="1">xs:integer*</td></tr><tr><td rowspan="1" colspan="1">A , B</td><td rowspan="1" colspan="1">item()*</td><td rowspan="1" colspan="1">item()*</td><td rowspan="1" colspan="1">op:concatenate(A, B)</td><td rowspan="1" colspan="1">item()*</td></tr><tr><td rowspan="1" colspan="1">A || B</td><td rowspan="1" colspan="1">xs:anyAtomicType</td><td rowspan="1" colspan="1">xs:anyAtomicType</td><td rowspan="1" colspan="1">fn:concat(A, B)</td><td rowspan="1" colspan="1">xs:string</td></tr></tbody></table><table border="1" summary="Unary operators" role="small"><caption>Unary Operators</caption><tbody><tr><th rowspan="1" colspan="1">Operator</th><th rowspan="1" colspan="1">Operand type</th><th rowspan="1" colspan="1">Function</th><th rowspan="1" colspan="1">Result type</th></tr><tr><td rowspan="1" colspan="1">+ A</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">op:numeric-unary-plus(A)</td><td rowspan="1" colspan="1">numeric</td></tr><tr><td rowspan="1" colspan="1">- A</td><td rowspan="1" colspan="1">numeric</td><td rowspan="1" colspan="1">op:numeric-unary-minus(A)</td><td rowspan="1" colspan="1">numeric</td></tr></tbody></table></div2></div1><div1 id="id-xp-context-components" role="xpath"><head>Context Components</head><p>The tables in this
section describe the scope (range of applicability) of the various
components in <phrase diff="add">a module's</phrase>
            <phrase diff="del">the</phrase> static context and dynamic context.</p><div2 id="id-xp-static-context-components"><head>Static Context
Components</head><p>The following table describes the components of
the <term>static context</term>. For each component, "global"
indicates that the value of the component applies throughout an XPath
expression, whereas "lexical" indicates that the value of the
component applies only within the subexpression in which it is
defined.</p><table width="60%" border="1" summary="Static Context" role="small"><caption>Static Context Components</caption><tbody><tr><th rowspan="1" colspan="1">Component</th><th rowspan="1" colspan="1">Scope</th></tr><tr><td rowspan="1" colspan="1">XPath 1.0 Compatibility Mode</td><td rowspan="1" colspan="1">global</td></tr><tr><td rowspan="1" colspan="1">Statically known namespaces</td><td rowspan="1" colspan="1">global</td></tr><tr><td rowspan="1" colspan="1">Default element/type namespace</td><td rowspan="1" colspan="1">global</td></tr><tr><td rowspan="1" colspan="1">Default function namespace</td><td rowspan="1" colspan="1">global</td></tr><tr><td rowspan="1" colspan="1">In-scope schema types</td><td rowspan="1" colspan="1">global</td></tr><tr><td rowspan="1" colspan="1">In-scope element declarations</td><td rowspan="1" colspan="1">global</td></tr><tr><td rowspan="1" colspan="1">In-scope attribute declarations</td><td rowspan="1" colspan="1">global</td></tr><tr><td rowspan="1" colspan="1">In-scope variables</td><td rowspan="1" colspan="1">lexical; for-expressions, let-expressions, and quantified expressions can bind new variables</td></tr><tr><td rowspan="1" colspan="1">Context item static type</td><td rowspan="1" colspan="1">lexical</td></tr><tr><td rowspan="1" colspan="1">
                        <phrase diff="add">Statically known</phrase> function signatures</td><td rowspan="1" colspan="1">global</td></tr><tr><td rowspan="1" colspan="1">Statically known collations</td><td rowspan="1" colspan="1">global</td></tr><tr><td rowspan="1" colspan="1">Default collation</td><td rowspan="1" colspan="1">global</td></tr><tr><td rowspan="1" colspan="1">Base URI</td><td rowspan="1" colspan="1">global</td></tr><tr><td rowspan="1" colspan="1">Statically known documents</td><td rowspan="1" colspan="1">global</td></tr><tr><td rowspan="1" colspan="1">Statically known collections</td><td rowspan="1" colspan="1">global  </td></tr><tr><td rowspan="1" colspan="1">Statically known default collection type</td><td rowspan="1" colspan="1">global</td></tr></tbody></table></div2><div2 id="id-xp-evaluation-context-components"><head>Dynamic Context Components</head><p>The following table describes how values are assigned to the various components of the <term>dynamic context</term>. All these components are initialized by mechanisms defined by the host language. For each component, "global" indicates that the value of the component remains constant throughout evaluation of the XPath expression, whereas "dynamic" indicates that the value of the component can be modified by the evaluation of subexpressions.</p><table width="60%" border="1" summary="Static Context" role="small"><caption>Dynamic Context Components</caption><tbody><tr><th rowspan="1" colspan="1">Component</th><th rowspan="1" colspan="1">Scope</th></tr><tr><td rowspan="1" colspan="1">Context item</td><td rowspan="1" colspan="1">dynamic; changes during evaluation of path expressions and predicates</td></tr><tr><td rowspan="1" colspan="1">Context position</td><td rowspan="1" colspan="1">dynamic; changes during evaluation of path expressions and predicates</td></tr><tr><td rowspan="1" colspan="1">Context size</td><td rowspan="1" colspan="1">dynamic; changes during evaluation of path expressions and predicates</td></tr><tr><td rowspan="1" colspan="1">Variable values</td><td rowspan="1" colspan="1">dynamic; for-expressions, let-expressions, and quantified expressions can bind new variables</td></tr><tr><td rowspan="1" colspan="1">Current date and time</td><td rowspan="1" colspan="1">global; must be initialized </td></tr><tr><td rowspan="1" colspan="1">Implicit timezone</td><td rowspan="1" colspan="1">global; must be initialized </td></tr><tr><td rowspan="1" colspan="1">Available documents</td><td rowspan="1" colspan="1">global; must be initialized </td></tr><tr><td rowspan="1" colspan="1">Available node collections</td><td rowspan="1" colspan="1">global; must be initialized </td></tr><tr><td rowspan="1" colspan="1">Default node collection</td><td rowspan="1" colspan="1">global; overwriteable by implementation</td></tr><tr><td rowspan="1" colspan="1">Available resource collections</td><td rowspan="1" colspan="1">global; must be initialized </td></tr><tr><td rowspan="1" colspan="1">Default resource collection</td><td rowspan="1" colspan="1">global; overwriteable by implementation</td></tr></tbody></table></div2></div1><div1 id="id-impl-defined-items"><head>Implementation-Defined Items</head><p>The following items in this specification are <termref def="dt-implementation-defined">implementation-defined</termref>:</p><olist><item><p>The version of Unicode that is used to construct expressions.</p></item><item><p>The <termref def="dt-static-collations">statically-known collations</termref>.</p></item><item><p>The <termref def="dt-timezone">implicit timezone</termref>.</p></item><item><p>The circumstances in which <termref def="dt-warning">warnings</termref> are raised, and the ways in which warnings are handled.</p></item><item><p>The method by which errors are reported to the external processing environment.</p></item><item diff="chg" at="XQ.E21"><p>Which version of XML and XML Names (e.g. <bibref ref="XML"/> and <bibref ref="XMLNAMES"/> or <bibref ref="XML1.1"/> and <bibref ref="XMLNAMES11"/>) and which version of XML Schema (e.g. <bibref ref="XMLSchema10"/> or <bibref ref="XMLSchema11"/>) is used for the definitions of primitives such as characters and names, and for the definitions  of operations such as normalization of line endings and normalization of whitespace in attribute values. It is recommended that the latest applicable version be used (even if it is published later than this specification).</p></item><item><p diff="add">How XDM instances are created from sources other than an Infoset or PSVI.</p></item><item role="xpath"><p>Whether the implementation supports the namespace axis.</p></item><!--
<item role="xquery" diff="del"><p>Which of the <termref def="dt-optional-axis">optional axes</termref> are supported by the implementation, if the <termref def="dt-full-axis-feature">Full-Axis Feature</termref> is not supported.</p></item>
--><item><p>Whether the type system is based on <bibref ref="XMLSchema10"/> or <bibref ref="XMLSchema11"/>. An implementation that has based its type system on XML Schema 1.0 is not required to support the use of the xs:dateTimeStamp constructor or the use of xs:dateTimeStamp as TypeName in any expression.</p></item><item><p>The signatures of functions provided by the implementation or via an implementation-defined API (see <specref ref="static_context"/>).</p></item><item><p>Any <termref def="dt-environment-variables">environment variables</termref> provided by the implementation.</p></item><item><p>Any rules used for static typing (see <specref ref="id-static-analysis"/>).</p></item><item><p>Any serialization parameters provided by the implementationn</p></item><item><p>What error, if any, is returned if an external function's implementation does not return the declared result type (see <specref ref="id-consistency-constraints"/>).</p></item></olist><note><p>Additional <termref def="dt-implementation-defined">implementation-defined</termref> items are listed in <bibref ref="xpath-datamodel-30"/> and <bibref ref="xpath-functions-30"/>.</p></note></div1><div1 id="id-references"><head>References</head><div2 id="id-normative-references"><head>Normative References</head><blist><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="RFC2119" key="RFC 2119" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">S. Bradner.
      <emph>Key Words for use in RFCs to Indicate Requirement Levels.</emph> IETF RFC 2119.
      See <loc href="http://www.ietf.org/rfc/rfc2119.txt" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.ietf.org/rfc/rfc2119.txt</loc>.</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="RFC3986" key="RFC3986" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">T. Berners-Lee, R. Fielding, and
      L. Masinter.  <emph>Uniform Resource Identifiers (URI): Generic
      Syntax</emph>. IETF RFC 3986.
      See <loc href="http://www.ietf.org/rfc/rfc3986.txt" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.ietf.org/rfc/rfc3986.txt</loc>.</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="RFC3987" key="RFC3987" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">M. Duerst and M. Suignard.
      <emph>Internationalized Resource Identifiers (IRIs)</emph>.
      IETF RFC 3987. See <loc href="http://www.ietf.org/rfc/rfc3987.txt" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.ietf.org/rfc/rfc3987.txt</loc>.</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="ISO10646" key="ISO/IEC 10646" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">ISO (International Organization for Standardization).
      <emph>ISO/IEC 10646:2003. Information technology—Universal Multiple-Octet Coded Character Set (UCS)</emph>,
      as, from time to time, amended, replaced by a new edition, or expanded by the addition of new parts.
      [Geneva]: International Organization for Standardization.
      (See <loc href="http://www.iso.org" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.iso.org</loc> for the latest version.)</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="Unicode" key="Unicode" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">The Unicode Consortium. <emph>The Unicode Standard</emph>
      Reading, Mass.: Addison-Wesley, 2003, as updated from time to time by the publication of new versions.
      See <loc href="http://www.unicode.org/standard/versions/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.unicode.org/standard/versions/</loc>
      for the latest version and additional information on versions of the standard and of the Unicode Character Database.
      The version of Unicode to be used is <termref def="dt-implementation-defined">implementation-defined</termref>,
      but implementations are recommended to use the latest Unicode version.</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="XML" key="XML 1.0" diff="chg" at="XQ.E21 and XP.E13" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">World Wide Web Consortium.
      <emph>Extensible Markup Language (XML) 1.0.</emph>
      W3C Recommendation.
      See <loc href="http://www.w3.org/TR/REC-xml/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/REC-xml/</loc>.
      The edition of XML 1.0 must be no earlier than the Third Edition;
      the edition used is <termref def="dt-implementation-defined">implementation-defined</termref>,
      but we recommend that implementations use the latest version.
</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="XML1.1" key="XML 1.1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">World Wide Web Consortium.
      <emph>Extensible Markup Language (XML) 1.1.</emph>
      W3C Recommendation.
      See <loc href="http://www.w3.org/TR/xml11/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/xml11/</loc>
               </bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="XMLBASE" key="XML Base" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">World Wide Web Consortium.
      <emph>XML Base.</emph> W3C Recommendation. See
      <loc href="http://www.w3.org/TR/xmlbase/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/xmlbase/</loc>
               </bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="XMLNAMES" key="XML Names" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">World Wide Web Consortium.
      <emph>Namespaces in XML.</emph> W3C Recommendation. See
      <loc href="http://www.w3.org/TR/REC-xml-names/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/REC-xml-names/</loc>
               </bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="XMLNAMES11" key="XML Names 1.1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">World Wide Web Consortium.
      <emph>Namespaces in XML 1.1.</emph> W3C Recommendation. See
      <loc href="http://www.w3.org/TR/xml-names11/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/xml-names11/</loc>
               </bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="XMLID" key="XML ID" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">World Wide Web Consortium. <emph>xml:id Version 1.0.</emph>
      W3C Recommendation. See <loc href="http://www.w3.org/TR/xml-id/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/xml-id/</loc>
               </bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="XMLSchema10" key="XML Schema 1.0" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">World Wide Web Consortium.
      <emph>XML Schema, Parts 0, 1, and 2 (Second Edition)</emph>. W3C Recommendation, 28 October 2004.
      See <loc href="http://www.w3.org/TR/xmlschema-0/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/xmlschema-0/</loc>,
      <loc href="http://www.w3.org/TR/xmlschema-1/" id="schema1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/xmlschema-1/</loc>,
      and <loc href="http://www.w3.org/TR/xmlschema-2/" id="schema2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/xmlschema-2/</loc>.</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="XMLSchema11" key="XML Schema 1.1" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">World Wide Web Consortium.
      <emph>XML Schema, Parts 1, and 2</emph>. W3C Recommendation 5 April 2012.
      See <loc href="http://www.w3.org/TR/xmlschema11-1/" id="schema1-11" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/xmlschema11-1/</loc>,
      and <loc href="http://www.w3.org/TR/xmlschema11-2/" id="schema2-11" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/xmlschema11-2/</loc>.</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xpath-datamodel-30" key="XQuery and XPath Data Model (XDM) 3.0" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xpath-functions-30" key="XQuery and XPath Functions and Operators 3.0" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xslt-xquery-serialization-30" key="XSLT and XQuery Serialization 3.0" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/></blist></div2><div2 id="id-non-normative-references"><head>Non-normative References</head><blist><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xquery-30" key="XQuery 3.0: An XML Query Language" role="xpath" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xquery-semantics" key="XQuery 1.0 and XPath 2.0 Formal Semantics" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xslt-30" key="XSL Transformations (XSLT) Version 3.0" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="DOM" key="Document Object Model" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">World Wide Web Consortium. <emph>Document Object Model (DOM) Level 3 Core Specification.</emph> W3C Recommendation, April 7, 2004. See <loc href="http://www.w3.org/TR/DOM-Level-3-Core/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/DOM-Level-3-Core/</loc>.</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="XINFO" key="XML Infoset" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">World Wide Web
Consortium. <emph>XML Information Set.</emph> W3C Recommendation 24 October 2001. See
<loc href="http://www.w3.org/TR/xml-infoset/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/xml-infoset/</loc>
               </bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" key="XML Path Language (XPath) Version 1.0" id="xpath" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" key="XML Path Language (XPath) Version 2.0" id="xpath20" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="XPTR" key="XPointer" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">World Wide Web Consortium. <emph>XML
Pointer Language (XPointer).</emph> W3C Last Call Working Draft 8 January 2001.
See <loc href="http://www.w3.org/TR/WD-xptr" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/WD-xptr</loc>
               </bibl></blist></div2><div2 id="id-background-material"><head>Background Material</head><blist><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="CHARMOD" key="Character Model" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">World Wide Web Consortium.
<emph>Character Model for the World Wide Web.</emph> W3C Working
Draft. See <loc href="http://www.w3.org/TR/charmod/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/charmod/</loc>.</bibl><bibl xmlns:xlink="http://www.w3.org/1999/xlink" id="xslt" key="XSL Transformations (XSLT) Version 1.0" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/></blist></div2></div1><div1 role="xpath" id="id-xpath-conformance"><head>Conformance</head><p>XPath is
intended primarily as a component that can be used by other
specifications. Therefore, XPath relies on specifications that use it
(such as <bibref ref="XPTR"/> and <bibref ref="xslt-30"/>) to specify
conformance criteria for XPath in their respective
environments. Specifications that set conformance criteria for their
use of XPath must not change the syntactic or semantic definitions of XPath as
given in this specification, except by subsetting and/or compatible extensions.</p><p>The specification of such a language may describe it as an
extension of XPath provided that every expression that conforms to the
XPath grammar behaves as described in this specification.</p><div2 id="id-xpath-static-typing"><head>Static Typing Feature</head><p>
                <termdef id="dt-xpath-static-typing-feature" term="static typing feature" role="xpath">The <term>Static
                    Typing Feature</term> is an optional feature of XPath that provides support for static semantics, and requires implementations to detect and report <termref def="dt-type-error">type errors</termref> during the <termref def="dt-static-analysis">static analysis phase</termref>.</termdef> Specifications that use XPath may specify conformance criteria for use of the Static Typing Feature.</p><p>If an implementation does not support the <termref def="dt-xpath-static-typing-feature">Static Typing Feature</termref>, but can
                nevertheless determine during the static analysis phase that
                <phrase role="xpath">an XPath expression</phrase>, if evaluated, would necessarily raise a <termref def="dt-dynamic-error">dynamic error</termref> or that an expression, if evaluated, would necessarily raise a <termref def="dt-type-error">type error</termref>, the implementation may raise that error during the static analysis phase. The choice
                of whether to raise such an error at analysis time is <termref def="dt-implementation-dependent">implementation dependent</termref>.</p></div2></div1><div1 id="id-errors"><head>Error Conditions</head><error-list><error spec="XP" code="0001" class="ST" type="static"><p>
It is a <termref def="dt-static-error">static error</termref>
if analysis of an
expression relies on some component of the <termref def="dt-static-context">static context</termref> that <phrase diff="del">has not been
assigned a value</phrase>
                  <phrase diff="add">is <xtermref spec="DM30" ref="dt-absent"/>
                  </phrase>.</p></error><error spec="XP" code="0002" class="DY" type="dynamic"><p>It is a  <termref def="dt-dynamic-error">dynamic error</termref>
if evaluation of an expression relies on some part of the <termref def="dt-dynamic-context">dynamic
context</termref> that  <phrase diff="del">has not been
assigned a value</phrase>
                  <phrase diff="add">is <xtermref spec="DM30" ref="dt-absent"/>
                  </phrase>.</p></error><error spec="XP" code="0003" class="ST" type="static"><p>
It is a <termref def="dt-static-error">static error</termref> if an expression
is not a valid instance of the grammar defined in <specref ref="id-grammar"/>.</p></error><error spec="XP" code="0004" class="TY" type="type"><p>It is a  <termref def="dt-type-error">type error</termref>
if, during the <termref def="dt-static-analysis">static analysis phase</termref>, an expression is found to have a <termref def="dt-static-type">static type</termref> that is not appropriate
for the context in which the expression occurs, or during the <termref def="dt-dynamic-evaluation">dynamic evaluation
phase</termref>, the <termref def="dt-dynamic-type">dynamic type</termref> of a value does not match a required type as
specified by the matching rules in <specref ref="id-sequencetype-matching"/>.</p></error><error spec="XP" code="0005" class="ST" type="static"><p>
During the analysis phase,
it is a  <termref def="dt-static-error">static error</termref>
if the <termref def="dt-static-type">static type</termref> assigned to an expression other than the expression <code>()</code> or <code>data(())</code> is <code>empty-sequence()</code>.</p></error><!--
<error spec="XP" code="0006" class="TY" type="type">
<p>
(Not currently used.)</p></error>

<error spec="XP" code="0007" class="TY" type="type">
<p>(Not currently used.)</p>
</error>
--><error spec="XP" code="0008" class="ST" type="static"><p>
It is a  <termref def="dt-static-error">static error</termref>  if
an expression refers to an element name, attribute name,  schema type name, namespace prefix,
or variable name that is not defined in the
<termref def="dt-static-context">static context</termref>, except for an ElementName in an <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-ElementTest" xlink:type="simple">ElementTest</nt> or an AttributeName in an <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AttributeTest" xlink:type="simple">AttributeTest</nt>.</p></error><error spec="XP" code="0010" class="ST" type="static" role="xpath"><p>
An implementation that does not support the namespace axis  must raise a  <termref def="dt-static-error">static error</termref> if
it encounters a reference to the namespace axis and XPath 1.0 compatibility mode is false.
</p></error><!--
<error spec="XQ" role="xquery" code="0014" class="ST" type="static">
<p>(Not currently used.)</p>
</error>
--><!--
<error spec="XQ" role="xquery" code="0015" class="ST" type="static">
<p>(Not currently used.)</p>
</error>
--><error spec="XP" code="0017" class="ST" type="static"><p>
It is a <termref def="dt-static-error">static error</termref> if the <termref def="dt-expanded-qname">expanded QName</termref> and number of arguments in a <phrase diff="add">static</phrase> function call do
not match the name and arity of a <termref def="dt-known-func-signatures">function signature</termref> in
the <termref def="dt-static-context">static context</termref>.</p></error><error spec="XP" code="0018" class="TY" type="type"><p>It is a  <termref def="dt-type-error">type error</termref> if
the result of a path operator contains both nodes and non-nodes.</p></error><error spec="XP" code="0019" class="TY" type="type"><p>
It is a  <termref def="dt-type-error">type error</termref> if
<code>E1</code> in a path expression <code>E1/E2</code> does not evaluate to a sequence of nodes.</p></error><error spec="XP" code="0020" class="TY" type="type"><p>
It is a <termref def="dt-type-error">type error</termref> if,
in an axis step, the context item is not a node.</p></error><!--
<error spec="XP" code="0021" class="DY" type="dynamic">
<p>
(Not currently used.)</p>
</error>
--><!--
<error spec="XQ" role="xquery" code="0023" class="TY" type="type">
<p>(Not currently used.)</p>
</error>
--><!--
<error spec="XQ" role="xquery" code="0028" class="TY" type="type">
<p>
(Not currently used.)</p>
</error>
--><!--
<error spec="XQ" code="0029" class="DY" type="dynamic" role="xquery">
<p>(Not currently used.)</p>
</error>
--><!--
<error spec="XQ" role="xquery" code="0036" class="ST" type="type">
          <p diff="add">(Not currently used.)</p>
          <p diff="del">
            It is a <termref def="dt-static-error">static error</termref>
            to import a module if the
            <termref def="dt-issd">in-scope schema definitions</termref>
            of the importing module do not include all of the following:
          </p>
          <olist diff="del">
             <item>
                <p>An <termref def="dt-is-types">in-scope schema type</termref>
                   for each type name that appears:
                </p>
                <olist>
                   <item>
                      <p>in the type of a variable that is declared in the imported module
                         and referenced in the importing module, OR
                      </p>
                   </item><item>
                      <p>in a parameter-type or result-type of a function that is declared
                         in the imported module and referenced in the importing module.
                      </p>
                   </item>
                </olist>
             </item><item>
                <p>An <termref def="dt-is-elems">in-scope element declaration</termref>
                   for each element-name <code>EN</code> such that:
                </p>
                <olist>
                   <item>
                      <p><code>schema-element(EN)</code> appears in the declared
                         type of a variable
                         in the imported module, and that variable is referenced
                         in the importing module, OR
                      </p>
                   </item><item>
                      <p><code>schema-element(EN)</code> appears in a parameter-type or
                         result-type of a function declared in the imported module, and
                         that function is referenced in the importing module.
                      </p>
                   </item>
                </olist>
             </item><item>
                <p>An <termref def="dt-is-attrs">in-scope attribute declaration</termref>
                   for each attribute-name <code>AN</code> such that:
                </p>
                <olist>
                   <item>
                      <p><code>schema-attribute(AN)</code> appears in the declared
                         type of a variable
                         in the imported module, and that variable is referenced
                         in the importing module, OR
                      </p>
                   </item><item>
                      <p><code>schema-attribute(AN)</code> appears in a parameter-type
                         or result-type
                         of a function declared in the imported module, and that function
                         is referenced in the importing module.
                      </p>
                   </item>
                </olist>
             </item>
          </olist>
</error>
--><!--
<error spec="XQ" role="xquery" code="0037" class="ST" type="static">
<p>(Not currently used.)</p>
</error>
--><error spec="XQ" code="0039" class="ST" type="static"><p>
It is a <termref def="dt-static-error">static error</termref> for 

<phrase diff="add">an inline function expression</phrase> 
to have more than one parameter with the same name.
</p></error><!--
<error spec="XQ" role="xquery" code="0042" class="ST" type="static">
<p>
(Not currently used.)</p>
</error>
--><!--
<error spec="XQ" role="xquery" code="0043" class="ST" type="static">
<p>
(Not currently used.)</p>
</error>
--><error spec="XQ" code="0046" class="ST" type="static"><p>An implementation <phrase role="xpath">MAY</phrase>
raise a <termref def="dt-static-error">static error</termref> if the value of a <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-BracedURILiteral" xlink:type="simple">BracedURILiteral</nt> is of nonzero length and is  <phrase diff="del">not in the lexical space of <code>xs:anyURI</code>
                  </phrase>
                  <phrase diff="add">neither an absolute URI nor a relative URI</phrase>.</p></error><error spec="XP" code="0050" class="DY" type="dynamic"><p>It is  a <termref def="dt-dynamic-error">dynamic error</termref>
if the <termref def="dt-dynamic-type">dynamic type</termref> of the operand of a <code>treat</code> expression does not match the <termref def="dt-sequence-type">sequence type</termref> specified by the <code>treat</code> expression. This error might also be raised by a path expression beginning with "<code>/</code>" or "<code>//</code>" if the context node is not in a tree that is rooted at a document node. This is because a leading "<code>/</code>" or "<code>//</code>" in a path expression is an abbreviation for an initial step that includes the clause <code>treat as document-node()</code>.</p></error><error spec="XP" code="0051" class="ST" type="static"><p>It is  a <termref def="dt-static-error">static error</termref>
if the <termref def="dt-expanded-qname">expanded QName</termref> for an <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-AtomicOrUnionType" xlink:type="simple">AtomicOrUnionType</nt> in a <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-SequenceType" xlink:type="simple">SequenceType</nt> is not defined in the <termref def="dt-is-types">in-scope schema types</termref> as a  <termref def="dt-generalized-atomic-type">generalized atomic type</termref>.</p></error><error spec="XQ" code="0052" class="ST" type="static"><p>The type must be the name of a type defined in the <termref def="dt-is-types">in-scope schema types</termref>, and the
<code>{variety}</code> of the type must be <code>simple</code>.</p></error><!--
<error spec="XQ" role="xquery" code="0053" class="ST" type="static">
<p>
(Not currently used.)</p>
</error>
--><!--
<error spec="XQ" code="0056" class="ST" type="static" role="xquery">
<p>
(Not currently used.)</p>
</error>
--><!--
<error spec="XQ" role="xquery" code="0062" class="DY" type="dynamic">
<p>(Not currently used.)</p>
</error>
--><!--
<error spec="XQ" code="0063" class="ST" type="static" role="xquery">
<p>
(Not currently used.)</p>
</error>
--><error spec="XQ" code="0070" class="ST" type="static" diff="chg"><!-- <change diff="chg" at="XQ.E19"> --><p>A <termref def="dt-static-error">static error</termref> is raised
                if one of the predefined prefixes <code>xml</code> or <code>xmlns</code>
                appears in a namespace declaration 
		<phrase diff="add">or  a default namespace declaration,</phrase>
		or if any of the following conditions
                is statically detected in any expression or declaration:
             </p><ulist><item><p>The prefix <code>xml</code> is bound to some namespace URI
                   other than <code>http://www.w3.org/XML/1998/namespace</code>.
                </p></item><item><p>A prefix other than <code>xml</code> is bound to the
                   namespace URI <code>http://www.w3.org/XML/1998/namespace</code>.
                </p></item><item><p>The prefix <code>xmlns</code> is bound to any namespace URI.
                </p></item><item><p>A prefix other than <code>xmlns</code> is bound to the
                   namespace URI <code>http://www.w3.org/2000/xmlns/</code>.
                </p></item></ulist><!-- </change> --></error><!--
<error spec="XQ" role="xquery" code="0073" class="ST" type="static">
<p diff="chg" at="XQ.E8">(Not currently used.)</p>
</error>
--><!--
<error spec="XQ" role="xquery" code="0077" class="ST" type="static">
<p>
(Not currently used.)</p>
</error>
--><!--
<error spec="XQ" role="xquery" code="0078" class="ST" type="static">
<p>
(Not currently used.)</p>
</error>
--><error spec="XP" code="0080" class="ST" type="static"><p>It is a
<termref def="dt-static-error">static
error</termref> if the target type of a <code>cast</code> or <code>castable</code> expression is  <code>xs:NOTATION</code>
                  <phrase diff="add">
                     <code>xs:anySimpleType</code>,</phrase> or <code>xs:anyAtomicType</code>.</p></error><error spec="XP" code="0081" class="ST" type="static"><p>
It is a <termref def="dt-static-error">static error</termref>
if a QName used in <phrase role="xpath">an expression</phrase> contains a namespace prefix that cannot be expanded into a namespace URI by using the <termref def="dt-static-namespaces">statically known namespaces</termref>.</p></error><!--
<error spec="XQ" role="xquery" code="0082" class="ST" type="static">
<p>(Not currently used.)</p>
</error>
--><!--
<error spec="XP" code="0083" class="ST" type="static">
<p>
(Not currently used.)</p>
</error>
--><!--
<error spec="XQ" role="xquery" code="0093" class="ST" type="static">
<p>
It is a <termref def="dt-static-error">static
error</termref> to import a module M<sub>1</sub> if there exists a sequence of modules M<sub>1</sub> ... M<sub>i</sub> ... M<sub>1</sub> such that each module <termref def="dt-module-directly-depends">directly depends</termref> on the next module in the sequence (informally, if M<sub>1</sub> depends on itself through some chain of module dependencies.)</p>
</error>
--><!--
<error spec="XQ" role="xquery" code="0095" class="DY" type="dynamic">
<p>
In the <code>group by</code> clause of a FLWOR expression, it is a <termref def="dt-dynamic-error">dynamic error</termref>
if the value bound to a grouping  variable consists of a sequence of more than one item.</p>
</error> --><!-- ################ --><!--
<error  spec="XQ" role="xquery" code="0100" class="ST" type="static">
<p>(Not currently used.)
</p>
  <ulist>

  <item><p><termref
  def="id-static-decimal-separator">decimal-separator</termref></p></item>
  <item><p><termref
    def="id-static-decimal-format-grouping-separator">grouping-separator</termref></p></item>

    <item><p><termref
    def="id-static-decimal-format-percent-sign">percent-sign</termref></p></item>

    <item><p><termref
    def="id-static-decimal-format-per-mille-sign">per-mille-sign</termref></p></item>

    <item><p><termref
		 def="id-static-decimal-format-zero-digit">zero-digit</termref></p></item>

    <item><p><termref def="id-static-decimal-format-digit-sign">digit-sign</termref></p></item>
    <item><p><termref def="id-static-decimal-format-pattern-separator-sign">pattern-separator-sign</termref></p></item>
  </ulist>
</error>
--><!-- ############ --><!-- ################ 0112 --><error spec="XP" code="0117" class="TY" type="type"><p>
 In a cast expression, if an item is of type <code>xs:untypedAtomic</code> and the expected type is <termref def="dt-namespace-sensitive">namespace-sensitive</termref>, a <termref def="dt-type-error">type error</termref> 
                  <errorref class="TY" code="0117"/> is raised.
</p></error><!--
<error  spec="XQ" role="xquery" code="0121" class="ST" type="static">
<p>It is a static error if a feature specified in <code>prohibit-feature</code> is supported by the implementation.</p>
</error>
--><!--
<error  spec="XQ" role="xquery" code="0124" class="ST" type="static" diff="del">
<p>
It is a static error if the name of a feature in
<code>require-feature</code> or <code>prohibit-feature</code> is not recognized by the implementation.
</p>
</error>
--><!--
<error  spec="XQ" role="xquery" code="0127" class="ST" type="static" diff="add">
<p>
  It is a <termref def="dt-static-error">static error</termref> if a
  given feature is both required and prohibited, directly or indirectly, in a module.
</p>
</error>
--><error spec="XP" code="0130" class="DY" type="dynamic"><p>An implementation-defined limit has been exceeded.</p></error><!--
<error  spec="XQ" role="xquery" code="0132" class="ST" type="static">
<p>The <code>module</code> feature can only be required or prohibited in a main module, not in a library module.</p>
</error>
--><error spec="XP" code="0133" class="ST" type="static"><p>It is a <termref def="dt-static-error">static error</termref> 
                  <errorref class="ST" code="0133"/> if the namespace URI for an EQName is <code>http://www.w3.org/2000/xmlns/</code>.</p></error><error spec="XQ" code="0134" class="ST" type="static"><p>XQuery 3.0 does not support the namespace axis.</p></error><!-- DELETED
<error  spec="XP" role="xquery" code="0135" class="ST" type="static" diff="del">
<p> A processor may raise an error  <errorref code="0034" class="ST"/> if the modules of a query do not have the same version number.</p>
</error>
--><!--


<error  spec="XQ" role="xquery" code="010X" class="ST" type="static">
<p>
</p>
</error>

<error  spec="XQ" role="xquery" code="010X" class="ST" type="static">
<p>
</p>
</error>

<error  spec="XQ" role="xquery" code="010X" class="ST" type="static">
<p>
</p>
</error>

--></error-list></div1><inform-div1 id="id-glossary"><head>Glossary</head><!-- This processing instruction automatically generates the glossary. --><?glossary?></inform-div1><inform-div1 role="xpath" id="id-backwards-compatibility"><head>Backwards Compatibility with XPath 1.0</head><p>This appendix provides a summary of the areas of incompatibility
between XPath 3.0 and <bibref ref="xpath"/>. In each of these cases,
an XPath 3.0 processor is compatible with an XPath 2.0 processor.</p><p>Three separate cases are considered:</p><olist><item><p>Incompatibilities that exist when source documents have no schema,
and when running with XPath 1.0 compatibility mode set to true. This specification
has been designed to reduce the number of incompatibilities in this situation to
an absolute minimum, but some differences remain and are listed individually.</p></item><item><p>Incompatibilities that arise when XPath 1.0 compatibility mode is set to false.
In this case, the number of expressions where compatibility is lost is rather greater.</p></item><item><p>Incompatibilities that arise when the source document is processed using a schema
(whether or not XPath 1.0 compatibility mode is set to true). Processing the document with
a schema changes the way that the values of nodes are interpreted, and this can cause an XPath
expression to return different results.</p></item></olist><div2 id="id-incompat-in-true-mode"><head>Incompatibilities when Compatibility Mode is true</head><p>The list below contains all known areas, within the scope of this specification, where
an XPath 3.0 processor running with compatibility mode set to true will produce different
results from an XPath 1.0 processor evaluating the same expression, assuming that the expression
was valid in XPath 1.0, and that the nodes in the source document have no type annotations other than
<code>xs:untyped</code> and <code>xs:untypedAtomic</code>.</p><p>Incompatibilities in the behavior of individual functions are not listed here, but are included
in an appendix of <bibref ref="xpath-functions-30"/>.</p><p>Since both XPath 1.0 and XPath 3.0 leave some aspects of the specification
implementation-defined, there may be incompatibilities in the behavior of a particular implementation
that are outside the scope of this specification. Equally, some aspects of the behavior of XPath are defined
by the host language.</p><olist><item><p>Consecutive comparison operators such as <code>A &lt; B &lt; C</code> were
supported in XPath 1.0, but are not permitted by the XPath 3.0 grammar. In most cases such
comparisons in XPath 1.0 did not have the intuitive meaning, so it is unlikely that
they have been widely used in practice. If such a construct is found, an XPath 3.0 processor
will report a syntax error, and the construct can be rewritten as <code role="parse-test">(A &lt; B) &lt; C</code>
                  </p></item><item><p>When converting strings to numbers (either explicitly when using the <code>number</code> function,
or implicitly say on a function call), certain strings that converted to the special value <code>NaN</code>
under XPath 1.0 will convert to values other than <code>NaN</code> under XPath 3.0. These include
any number written with a leading <code>+</code> sign, any number in exponential floating point
notation (for example <code>1.0e+9</code>), and the strings <code>INF</code> and <code>-INF</code>.</p><p>Furthermore, the strings <code>Infinity</code>
and <code>-Infinity</code>, which were accepted by XPath 1.0 as
representations of the floating-point values positive and negative
infinity, are no longer recognized. They are converted
to <code>NaN</code> when running under XPath 3.0 with compatibility
mode set to true, and cause a dynamic error when compatibility mode is
set to false.</p></item><item><p>XPath 3.0 does not allow a token starting with a letter to follow immediately after a numeric
literal, without intervening whitespace. For example, <code>10div 3</code> was permitted in XPath 1.0,
but in XPath 3.0 must be written as <code>10 div 3</code>.</p></item><item><p>The namespace axis is deprecated <phrase diff="del">in</phrase>
                     <phrase diff="add">as of</phrase> XPath 2.0. Implementations may support
the namespace axis for backward compatibility with XPath 1.0, but they are not
required to do so. (XSLT 2.0 requires that if XPath backwards compatibility
mode is supported, then the namespace axis must also be supported; but other host languages
may define the conformance rules differently.)</p></item><item><p>In XPath 1.0, the expression <code>-x|y</code> parsed
as <code>-(x|y)</code>, and returned the negation of the numeric value
of the first node in the union of <code>x</code>
and <code>y</code>. In XPath 3.0, this expression parses
as <code>(-x)|y</code>. When XPath 1.0 Compatibility Mode is true,
this will always cause a type error.</p></item><item><p>The rules for converting numbers to strings have
changed. These may affect the way numbers are displayed in the output
of a stylesheet. For numbers whose absolute value is in the
range <code>1E-6</code> to <code>1E+6</code>, the result should be the
same, but outside this range, scientific format is used for
non-integral <code>xs:float</code> and <code>xs:double</code>
values.</p></item><item><p>If one operand in a general comparison is a single atomic
value of type <code>xs:boolean</code>, the other operand is converted
to <code>xs:boolean</code> when XPath 1.0 compatibility mode is set to
true.  In XPath 1.0, if neither operand of a comparison operation
using the &lt;, &lt;=, &gt; or &gt;= operator was a node set, both
operands were converted to numbers.  The result of the expression
<code>true() &gt; number('0.5')</code> is therefore true in XPath 1.0,
but is false in XPath 3.0 even when compatibility mode is set to
true.</p></item><item><p>In XPath 3.0, a type error is raised if the PITarget specified in a SequenceType of form <code>processing-instruction(PITarget)</code> is not a valid NCName. In XPath 1.0, this condition was not treated as an error.</p></item></olist></div2><div2 id="id-incompat-in-false-mode"><head>Incompatibilities when Compatibility Mode is false</head><p>Even when the setting of the XPath 1.0 compatibility mode is false, many XPath
expressions will still produce the same results under XPath 3.0 as under XPath 1.0. The exceptions
are described in this section.</p><p>In all cases it is assumed that the expression
in question was valid under XPath 1.0, that XPath 1.0 compatibility mode is false, and that all elements
and attributes are annotated with the types <code>xs:untyped</code> and <code>xs:untypedAtomic</code>
respectively.</p><p>In the description below, the terms <emph>node-set</emph> and <emph>number</emph>
are used with their XPath 1.0 meanings, that is, to describe expressions which according
to the rules of XPath 1.0 would have generated a node-set or a number respectively.</p><olist><item><p>When a node-set containing more than one node is supplied as an argument to a
function or operator that expects a single node or value, the XPath 1.0 rule was that all nodes after the first were
discarded. Under XPath 3.0, a type error occurs if there is more than one node.
The XPath 1.0 behavior can always be restored by using the predicate <code>[1]</code> to
explicitly select the first node in the node-set.</p></item><item><p>In XPath 1.0, the <code>&lt;</code> and <code>&gt;</code> operators, when applied
to two strings, attempted to convert both the strings to numbers and then made a numeric
comparison between the results. In XPath 3.0, these operators perform a string comparison using the
default collating sequence. (If either value is numeric, however, the results are compatible
with XPath 1.0)</p></item><item><p>When an empty node-set is supplied as an argument to a
function or operator that expects a number, the value is no longer converted
implicitly to NaN.
The XPath 1.0 behavior can always be restored by using the <code>number</code>
function to perform an explicit conversion.</p></item><item><p>More generally, the supplied arguments to a function or operator are no longer implicitly converted
to the required type, except in the case where the supplied argument is of type <code>xs:untypedAtomic</code>
(which will commonly be the case when a node in a schemaless document is supplied as the argument).
For example, the function call <code role="parse-test">substring-before(10 div 3, ".")</code> raises a type error under XPath 3.0, because the arguments
to the <code>substring-before</code> function must be strings rather than numbers. The XPath 1.0 behavior can be
restored by performing an explicit conversion to the required type using a constructor function
or cast.</p></item><item><p>The rules for comparing a node-set to a boolean have changed. In XPath 1.0,
an expression such as <code role="parse-test">$node-set = true()</code> was evaluated by converting the
node-set to a boolean and then performing a boolean comparison: so this expression would return <code>true</code>
if <code>$node-set</code> was non-empty. In XPath 3.0, this expression is handled in
the same way as other comparisons between a sequence and a singleton: it is <code>true</code> if
<code>$node-set</code> contains at least one node whose value, after atomization and conversion
to a boolean using the casting rules, is <code>true</code>.</p><p>This means that if <code>$node-set</code> is empty, the result under XPath 3.0
will be <code>false</code> regardless of
the value of the boolean operand, and regardless of which operator is used.
If <code>$node-set</code> is non-empty, then in most cases the comparison with a boolean is
likely to fail, giving a dynamic error. But if a node has the value "0",
"1", "true", or "false", evaluation of the expression may succeed.</p></item><item><p>Comparisons of a number to a boolean, a number to a string, or a string to a boolean
are not allowed in XPath 3.0: they result in a type error. In XPath 1.0 such comparisons were
allowed, and were handled by converting one of the operands to the type of the other. So for
example in XPath 1.0 <code role="parse-test">4 = true()</code> was true; <code role="parse-test">4 = "+4"</code> was false (because
the string <code>+4</code> converts to <code>NaN</code>), and <code>false = "false"</code> was
false (because the string <code>"false"</code> converts to the boolean <code>true</code>).
In XPath 3.0 all these comparisons are type errors.</p></item><item><p>Additional numeric types have been introduced, with the effect that arithmetic
may now be done as an integer, decimal, or single- or double-precision floating point calculation
where previously it was always performed as double-precision floating point.
The result of the <code>div</code> operator when dividing two integers is now a value
of type decimal rather than double. The expression <code role="parse-test">10 div 0</code> raises an
error rather than returning positive infinity.</p></item><item><p>The rules for converting strings to numbers have changed. The implicit
conversion that occurs when passing an <code>xs:untypedAtomic</code> value as an argument to a function
that expects a number no longer converts unrecognized strings to the value <code>NaN</code>;
instead, it reports a dynamic error. This is in addition to the differences that apply
when backwards compatibility mode is set to true.</p></item><item><p>Many operations in XPath 3.0 produce an empty sequence as their result
when one of the arguments or operands is an empty sequence. Where the operation
expects a string, an empty sequence is usually considered equivalent to a zero-length string, which
is compatible with the XPath 1.0 behavior. Where the operation expects a number, however, the
result is not the same. For example, if <code>@width</code> returns an empty sequence, then
in XPath 1.0 the result of <code role="parse-test">@width+1</code> was <code>NaN</code>, while with XPath 3.0
it is <code>()</code>. This has the effect that a filter expression such as <code role="parse-test">item[@width+1 != 2]</code>
will select items having no <code>width</code> attribute under XPath 1.0, and will not select them
under XPath 3.0.</p></item><item><p>The typed value of a comment node, processing instruction node, or namespace node under
XPath 3.0 is of type <code>xs:string</code>, not <code>xs:untypedAtomic</code>. This means that no implicit conversions
are applied if the value is used in a context where a number is expected. If a processing-instruction node is used as an operand of
an arithmetic operator, for example, XPath 1.0 would attempt to convert the string value of the node to a number (and deliver
<code>NaN</code> if unsuccessful), while XPath 3.0 will report a type error.</p></item><item><p>In XPath 1.0, it was defined that with an expression of the form <code>A and
B</code>,
B would not be evaluated if A was false. Similarly in the case of <code>A or
B</code>, B would not be evaluated if A was true. This is no longer
guaranteed with XPath 3.0: the implementation is free to evaluate the two
operands in either order or in parallel. This change has been made to give
more scope for optimization in situations where XPath expressions are
evaluated against large data collections supported by indexes. Implementations
may choose to retain backwards compatibility in this area, but they are not
obliged to do so.</p></item><item><p>In XPath 1.0, the expression <code>-x|y</code> parsed
as <code>-(x|y)</code>, and returned the negation of the numeric value
of the first node in the union of <code>x</code>
and <code>y</code>. In XPath 3.0, this expression parses
as <code>(-x)|y</code>. When XPath 1.0 Compatibility Mode is false,
this will cause a type error, except in the situation
where <code>x</code> evaluates to an empty sequence. In that
situation, XPath 3.0 will return the value of <code>y</code>, whereas
XPath 1.0 returned the negation of the numeric value
of <code>y</code>.</p></item></olist></div2><div2 id="id-incompat-when-using-schema"><head>Incompatibilities when using a Schema</head><p>An XPath expression applied to a document that has been processed against a schema will not always
give the same results as the same expression applied to the same document in the absence of a schema.
Since schema processing had no effect on the result of an XPath 1.0 expression, this may give rise
to further incompatibilities. This section gives a few examples of the differences that can arise.</p><p>Suppose that the context node is an element node derived from
the following markup: <code>&lt;background color="red green blue"/&gt;</code>.
In XPath 1.0, the predicate <code>[@color="blue"]</code> would return <code>false</code>.
In XPath 3.0, if the <code>color</code> attribute is defined in a schema
to be of type <code>xs:NMTOKENS</code>, the same predicate will return <code>true</code>.</p><p>Similarly, consider the expression <code role="parse-test">@birth &lt; @death</code> applied to the
element <code>&lt;person birth="1901-06-06" death="1991-05-09"/&gt;</code>. With XPath 1.0, this
expression would return false, because both attributes are converted to numbers, which returns
<code>NaN</code> in each case. With XPath 3.0, in the presence of a schema that annotates these
attributes as dates, the expression returns <code>true</code>.</p><p>Once schema validation is applied, elements and attributes cannot be used as operands and arguments
of expressions that expect a different data type. For example, it is no longer possible to apply the <code>substring</code>
function to a date to extract the year component, or to a number to extract the integer part. Similarly, if an attribute is
annotated as a boolean then it is not possible to compare it with the strings <code>"true"</code> or <code>"false"</code>.
All such operations lead to type errors. The remedy when such errors occur is to introduce an explicit conversion, or
to do the computation in a different way. For example, <code role="parse-test">substring-after(@temperature, "-")</code> might be
rewritten as <code role="parse-test">abs(@temperature)</code>.</p><p>In the case of an XPath 3.0 implementation that provides the static typing feature, many further type errors will
be reported in respect of expressions that worked under XPath 1.0. For example, an expression such as
<code role="parse-test">round(../@price)</code> might lead to a static type error because the processor cannot infer statically that
<code role="parse-test">../@price</code> is guaranteed to be numeric.</p><p>Schema validation will in many cases perform whitespace normalization on the contents of elements (depending on their type).
This will change the result of operations such as the <code>string-length</code> function.</p><p>Schema validation augments the data model by adding default values for omitted attributes and empty elements.</p></div2></inform-div1><inform-div1 id="id-revision-log"><head>Change Log</head><p role="xpath">This appendix lists the changes that have been made to this
specification since the <phrase diff="add">first</phrase> publication of XPath 2.0 Recommendation.</p><div2 id="id-incompatibilities"><head>Incompatibilities</head><p>The following names are now reserved, and cannot appear as function names (see <specref ref="id-reserved-fn-names"/>):</p><ulist><item><p>
                     <code>function</code>
                  </p></item><item><p>
                     <code>namespace-node</code>
                  </p></item><item><p>
                     <code>switch</code>
                  </p></item></ulist><p>Code written for XQuery 1.0 processors may assume that every item
is either a node or an atomic value. This is no longer true, since
XQuery 3.0 introduces function items. Thus, an XQuery 1.0 function
that declares a parameter as an <code>item()</code> can now have a
function item passed as a parameter, which might not have been
anticipated by the author of the function.</p></div2><div2 id="id-changes-this-draft"><head>Changes introduced during the Proposed Recommendation period:</head><div3 id="id-changes-this-draft-substantive"><head>Substantive Changes</head><p>No substantive changes were made during the Proposed Recommendation period.</p></div3><div3 id="id-changes-this-draft-editorial"><head>Editorial Changes</head><olist><item role="xpath"><p>Added FunctionBody to list of productions in description of Inline Functions.  Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=24199" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 24199</loc>.</p></item></olist></div3></div2><div2 id="id-changes-PR"><head>Changes introduced during the Candidate Recommendation period:</head><div3 id="id-changes-PR-substantive"><head>Substantive Changes</head><p>The following substantive changes have been made.</p><olist><item><p>Removed <code>require-feature()</code>/<code>prohibit-feature()</code> due to implementation experience.</p></item><item><p>Added entry to <specref ref="id-incompatibilities"/> to indicate that <code>function</code>, 
<code>namespace-node</code>, and <code>switch</code> are all reserved. Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=20902" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 20902</loc>.</p></item><item><p>Added entry to <specref ref="id-incompatibilities"/> to indicate that function items violate the XQuery 1.0/XPath 2.0 expectation that a every item is either a node or an atomic value. See <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="https://lists.w3.org/Archives/Member/w3c-xsl-query/2013Feb/0050.html" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://lists.w3.org/Archives/Member/w3c-xsl-query/2013Feb/0050.htm (member only)</loc>.</p></item><item><p>Fixed text for castable. Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=21664" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 21664</loc>.</p></item><item><p>Added error code  <errorref class="DY" code="0130"/> for implementation-defined limits.
      Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=21413" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 21413</loc>.</p></item><item><p>Changed <code>fn:map</code> to <code>fn:for-each</code>, changed <code>fn:map-pairs</code> to <code>fn:for-each-pair</code>. 
      See <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=21128" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 21128</loc>.</p></item><item><p>Adopted new definition of derives-from(AT, ET).
      Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=20643" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 20643</loc>.</p></item><item><p>If the NodeTest in an axis step is a NamespaceNodeTest then a static error is raised.
      Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=20736" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 20736</loc>.</p></item><item><p>A try/catch expression catches dynamic errors and type errors raised by the evaluation of the target expression of the try clause. Previously, the text referred to expressions lexically contained within the try clause.  Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=18877" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 18877</loc>.</p></item><item role="xpath"><p>The host language must specify whether or not the XPath 3.0 processor normalizes all
line breaks before parsing, and if it does so, whether it uses the rules of XML 1.0 or 1.1.
      Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=14917" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 14917</loc>.</p></item><item><p>Added support for <code>xs:error</code>. 
      Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=20634" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 20634</loc>.</p></item><item><p>If any component in the focus is defined, all components of the focus are defined.
      Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=21011" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 21011</loc>.</p></item><item role="xpath"><p>XPath expressions allow any legal XML Unicode character, subject only to constraints imposed by the host language. 
 <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=21574" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 21574</loc>.</p></item><item><p>Changed XPTY0117 to FONS0004 in section 2.5.2, changed text of <errorref class="TY" code="0117"/>. Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=21893" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 21893</loc>.</p></item><item><p>Explicitly stated that no catch clause "matches" the error value, a the try/catch expression raises the error that was raised by the target expression.
       Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=21666" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 21666</loc>.</p></item><item><p>Changed "When tokenizing, the longest possible match that is valid in the  current context is used."  to "When tokenizing, the longest  possible match consistent with the EBNF is used."  Decided in Teleconference #541 2013-05-21.</p></item><item><p>Added an exception for subtype(Ai*, Bi?) when Ai is a pure union type with no member types, as in xs:error. Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=20862" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 20862</loc>.</p></item><item><p>Modified definition of statically known decimal formats in context. Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=19365" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 19365</loc>, see comment #10.</p></item><item><p>A processor must not raise errors for serialization parameters that it does not support. "A processor that is performing serialization must raise a serialization error if the values of any serialization parameters <phrase diff="add">that it supports</phrase> (other than any that are ignored under the previous paragraph) are incorrect."</p></item><item><p>Changed the second rule of <specref ref="id-itemtype-subtype"/> and <specref ref="id-itemtype-subtype"/> for the sake of transitivity. Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=20632" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 20632</loc>.</p></item><item><p>Removed the paragraph that said no published version of XML Schema references the XML 1.1 specifications, since this is no longer true.</p></item><item><p>Modified <specref ref="id-sequencetype-subtype"/> to better account for <code>xs:error</code>.  Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=22552" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 22552</loc>.</p></item><item><p>Improved Step 5.b.ii.A in <specref ref="id-eval-function-call"/>. </p></item></olist></div3><div3 id="id-changes-PR-editorial"><head>Editorial Changes</head><p>The following are some of the editorial changes that have been made.</p><olist><item><p>Deleted unused error, checked for consistency of errors. 
      Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=20837" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 20837</loc>.</p></item><item><p>Added an example to show how to copy "unused" namespaces from one node to another using <code>in-scope-prefixes($e) ! namespace {namespace-uri-for-prefix($e,.)} {.}</code>.
      Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=21025" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 21025</loc>.</p></item><item><p>Restored normative status of FunctionTest semantics - see <specref ref="id-function-test"/>. They had been accidentally demoted to NOTE status. Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=19341" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 19341</loc>.</p></item><item><p>Added entry for <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-StringConcatExpr" xlink:type="simple">||</nt> to <specref ref="id-precedence-order"/>.</p></item><item><p>Deleted note on the converse relationship from <specref ref="id-sequencetype-subtype"/>.</p></item><item><p>Removed statement that implied the XQuery 3.0 requirements include a requirement for an XML-based representation.</p></item></olist></div3><div3 id="id-changes-this-draft-not-implemented"><head>Resolutions that are no longer relevant.</head><p>The following are changes that have been decided, but are no longer relevant because of our decision to remove  <code>require-feature</code>/<code>prohibit-feature</code>.</p><olist><item><p>Resolution of the following bugs, all related to require/prohibit feature, has not yet been implemented in this document:  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=21130#c2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 21130</loc>, <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=19597" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 19597</loc>,  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=21717" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 21717</loc>.</p></item></olist></div3></div2><div2 id="id-changes-CR"><head>Changes introduced in the Candidate Recommendation</head><div3 id="id-changes-CR-substantive"><head>Substantive Changes</head><p>The following substantive changes have been made.</p><olist><item><p>Pure union types (formerly known as restricted union types)  are now permitted in AtomicOrUnionTypes. Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=13399" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 13399</loc>.</p></item><item><p>Adopted the XML restriction that control characters #x1 to #x1F and 0x7F to 0x9F cannot appear in unescaped form in an XQuery. Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=14921" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 14921</loc>.</p></item><item role="xpath"><p>Function conversion rules depend on the setting of XPath 1.0 compatibility mode only for static functions. Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=15398" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 15398</loc>.</p></item><item><p>Added available text resources to the static context, as part of the resolution of <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=14932" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 14932</loc>.</p></item><item><p>Changed error XQST0046 for URI literals so that it is no longer dependent on the lexical space of xs:anyURI - the error is now raised if the value of a URILiteral or a BracedURILiteral is of nonzero length and is neither an absolute URI nor a relative URI.  Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=15675" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 15675</loc>.</p></item><item><p>Clarified and extended rules for casting. Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=15807" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 15807</loc>.</p></item><item><p>Abandoned the special casting rule that prevented atomization for namespace sensitive types. Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=16089" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 16089</loc>.</p></item><item><p>The split of base URI into static base URI and dynamic
      base URI has been reverted. Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=17595" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 17595</loc>.</p></item><item><p>Changed the syntax of EQName to avoid conflicts with potential JSON syntax extensions in future versions. Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=15399" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 15399</loc>.</p></item><item><p>Relaxed rules that required inputs, outputs, and query modules to all use the same versions of XML, XML Names, and XML Schemas for names, characters, attribute value normalization, line-breaks, etc. Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=15966" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 15966</loc>.</p></item><item><p>Function items are now supported for context-dependent functions if they depend only on the static context. Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=15912" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 15912</loc>.</p></item><item><p>Removed error XPDY0229.  Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=16681" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 16681</loc>.</p></item><item><p>Changed precedence of simple map operator, reorganized text accordingly. Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=16197" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 16197</loc>.</p></item><item><p>Integrated proposals on static and dynamic context 
from <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://lists.w3.org/Archives/Member/w3c-xsl-query/2012May/0118.html" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://lists.w3.org/Archives/Member/w3c-xsl-query/2012May/0118.html</loc>.  Resolves  Bugs <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=14656" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">14656</loc>, <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=14375" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">14375</loc>, and <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=15791" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">15791</loc>.</p></item><item><p>If there is a Comment before the end of a Version Declaration, an implementation must either raise an implementation-defined static error or ignore the commment. Decided in Montreal Face-to-Face, see <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://lists.w3.org/Archives/Member/w3c-xsl-query/2012Jul/0081.html" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">https://lists.w3.org/Archives/Member/w3c-xsl-query/2012Jul/0081.html</loc>.</p></item><item><p>Changed rules for whitespace in URI Literals and Braced URI Literals in <specref ref="id-uri-literals"/>. Decided in  face-to-face #517, 2012-07-23 to 2012-07-25.</p></item><item><p>Updated the appendix of implementation-defined items.</p></item><item><p>In <code>E castable as T</code>, if <code>E</code> raises a dyanmic error, <code>castable</code> returns <code>false</code>, it does not "fail". See <specref ref="id-castable"/>.</p></item><item><p>Adopted rewording of <specref ref="id-schema-element-test"/>. Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=10207" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 10207</loc>.</p></item><item><p>Corrected rule #17 of <specref ref="id-itemtype-subtype"/>. Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=19425" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 19425</loc>.</p></item><item><p>Added error <errorref class="ST" code="0133"/>, which is raised if the namespace URI for an EQName is <code>http://www.w3.org/2000/xmlns/</code>, in the early section on names. Removed duplicate material in the section on node tests. Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=19658" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 19658</loc>.</p></item><item><p>Updated <specref ref="id-incompatibilities"/> to state that three function names are now reserved (<code>function</code>, <code>namespace-node</code>, and <code>switch</code>). Fulfils Action A-523-06.</p></item><item><p>Ai is a subtype of Bi if	Ai and Bi are both pure union types, and every type t in the transitive membership of Ai is also in the transitive membership of Bi. Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=19504" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 19504</loc>.</p></item><item><p>Added <code>html-version</code> and <code>item-separator</code> to Appendix C.1. Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=20267" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 20267</loc>.</p></item><item><p>Implementations must raise an error if limits are exceeded. Resolves  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=20310" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 20310</loc>.</p></item></olist></div3><div3 id="id-changes-CR-editorial"><head>Editorial Changes</head><p>The following are some of the editorial changes that have been made.</p><olist><item><p>Introduced the concept of singleton focus, borrowed from XSLT, and used it to clarify context declaration. Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=15789" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 15789</loc>.</p></item><item><p>Reworked much of the prose re functions, to increase clarity and better accommodate dynamic function calls and partial function applications.</p></item><item role="xpath"><p>Reworked abstract and introductory text for XPath.</p></item><item><p>Consistently use "absent" for properties with no value in both static and dynamic context.</p></item><item role="xpath"><p>Removed erroneous references to modules in XPath.</p></item><item role="xpath"><p>Removed erroneous reference to XQST0034 codes in XPath.</p></item><item><p>More consistent use of terminology for raising an error, eliminating other terms (signal, report, raise, throw) that have been used in various versions of this specification over the years.</p></item><item role="xpath"><p>Eliminated Serialization section, which has no place in the XPath specification.</p></item><item><p>Improved the definition of <termref def="dt-static-error">static error</termref>.</p></item><item role="xpath"><p>Added a reference to XQuery try/catch expressions as a possible implementation-defined way to catch errors.</p></item><item><p>Editorial rewrite of the description of document order.</p></item><item role="xpath"><p>Corrected erroneous inclusion of XQuery text on function assertions in XPath.</p></item><item><p>Corrected several places where EQNames, QNames, and expanded QNames were conflated.</p></item><item><p>Simplified <specref ref="id-variables"/> so that it no longer enumerates expressions that bind variables, and merely refers to the static context. This simplifies maintenance of the specification.</p></item><item><p>Improved the definition of <termref def="dt-node-test">node test</termref>.</p></item><item role="xpath"><p>Removed change log entries that apply only to XQuery.</p></item><item><p>Removed a dangling note describing an obsolete error for context-sensitive functions in <specref ref="id-named-function-ref"/>.</p></item><item><p>Fixed headings in Appendix C that implied that it describes static and dynamic contexts only for modules.  Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=20350" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 20350</loc>.</p></item></olist></div3></div2><div2 id="id-changes-prior-drafts"><head>Changes introduced in prior Working Drafts</head><div3 id="id-changes-prior-drafts-substantive"><head>Substantive Changes</head><p>The following substantive changes have been made in prior Working Drafts.</p><olist><item role="xpath"><p>Applied all <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/XML/2007/qt-errata/xpath20-errata.html" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XPath 2.0 2ed errata</loc>.</p></item><item><p>Added <phrase diff="del">literal function items</phrase> 
                        <phrase diff="add">named function references</phrase> (<specref ref="id-named-function-ref"/>).</p></item><item><p>Added inline function<phrase diff="add"> expression</phrase>s (<specref ref="id-inline-func"/>).</p></item><item><p>Added dynamic function <phrase diff="del">invocation</phrase>
                        <phrase diff="add">call</phrase> (<specref ref="id-dynamic-function-invocation"/>).</p></item><item><p>Added <specref ref="id-function-coercion"/>.</p></item><item><p>Added <specref ref="id-sequencetype-subtype"/>, moving sequence type subtype judgments into the language specification rather than the formal semantics.</p></item><item><p>Clarified type information available to <function>derives-from()</function> in <specref ref="id-sequencetype-matching"/>. Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=6513#c21" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 6513, Comment #21</loc>.</p></item><item><p>Modified <function>derives-from()</function> in <specref ref="id-sequencetype-matching"/> to support union types. Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=7749#c2" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 7749</loc>.</p></item><item role="xpath"><p>Added <termref def="id-let-expressions">let expressions</termref>.</p></item><item><p>Removed section on static typing extensions.</p></item><item><p>Added support for literal URLs in names, using <nt xmlns:xlink="http://www.w3.org/1999/xlink" def="doc-xpath30-EQName" xlink:type="simple">EQNames</nt>.</p></item><item><p>Added support for XML Schema 1.1.</p></item><item><p>Added support for union types in function arguments.</p></item><item><p>Clarified wording on conflicts between function signatures and constructor functions in <termref def="dt-known-func-signatures">
                           <phrase diff="add">statically known</phrase> function signatures</termref>.</p></item><item diff="del"><p>Added definition for closure of a function item.  Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=10579" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 10579</loc>.</p></item><item><p>Added missing consistency constraints for statically known namespaces to <specref ref="id-consistency-constraints"/> (the prefix <code>xmlns</code> is not bound to any namespace URI, no prefix is bound to the namespace URI <code>http://www.w3.org/2000/xmlns/</code>).  Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=10700" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 10700</loc>.</p></item><item><p>Adopted rules for abstract elements in substitution groups: abstract elements do not appear in substitution groups, block attributes must be taken into account when building the  substitution groups.  Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=10207" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 10207</loc>.</p></item><item><p>Added missing semantics for EQNames with URILiterals.  Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=10857" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 10857</loc>.</p></item><item><p>Added support for casting to union types.  Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=7860" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 7860</loc>.</p></item><item><p>Allowed a <code>URILiteral</code> in <code>Wildcard</code>. (This change appeared in an earlier draft, but was not mentioned in the corresponding change log.)</p></item><item><p>How XDM instances are created from sources other than an Infoset or PSVI is implementation-defined.  Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=12208" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 12208</loc>. (This change appeared in an earlier draft, but was not mentioned in the corresponding change log.)</p></item><item><p>Clarified use of Static Base URI, Dynamic Base URI per <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=11561#c6" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 11561#c6</loc>. (This change appeared in an earlier draft, but was not mentioned in the corresponding change log.)</p></item><item><p>Adds errors for casts to namepace sensitive types in cast and function conversion rules.  Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=11964" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 11964</loc>. (This change appeared in an earlier draft, but was not mentioned in the corresponding change log.)</p></item><item><p>Specified use of "unknown" types, including types from documents and types from other modules.  Eliminated err:XQST0036. Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=11095#c6" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 11095</loc>. (This change appeared in an earlier draft, but was not mentioned in the corresponding change log.)</p></item><item><p>Introduced <termref def="dt-generalized-atomic-type">Generalized atomic types</termref>, restricted unions in SequenceType to these types.</p></item><item><p>Added string concatenation operator <code>"con" || "cat" || "enate"</code>
                     </p></item><item><p>Implemented simple mapping operator proposal using "!" operator.  Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=12951" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 12951</loc>.</p></item><item><p>Changed rules for matching substitution groups.  Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=10065" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 10065</loc>.</p></item><item><p>For a partial function application, a failure in the function conversion rules MUST raise a type error.</p></item><item><p>Function item coercion is required to raise a type error if there's a mismatch in the number of parameters (expected vs actual).  Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=14350" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 14350</loc>.</p></item><item><p>In the triggers for err:XPST0112, broaden the class of functions that can't be referenced by partial function applications and named function references, from "focus-dependent" to "context-dependent built-in".</p></item><item><p>Added default language, calendar, and place to the dynamic context.  Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=14995" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 14995</loc>.</p></item><item role="xpath"><p>Removed function annotations from XPath. Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=14883" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 14883</loc>.</p></item><item role="xpath"><p>Whether end-of-line handling is done before parsing is defined by the host language.  Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=14917" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 14917</loc>.</p></item><item><p>Expanded definition of XPST0080 so that casting to xs:anySimpleType is also an error. Resolves <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/show_bug.cgi?id=19090" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Bug 19090</loc>.</p></item></olist></div3></div2></inform-div1></back></spec>