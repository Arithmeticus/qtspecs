<?xml version='1.0'?>
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax"
	xmlns:xs="http://www.w3.org/2001/XMLSchema" exclude-result-prefixes="e xs">

	<xsl:param name="catalog">element-catalog.xml</xsl:param>

	<!--
	<xsl:output method="xml" doctype-system="../../../schema/xsl-query.dtd"/>
	-->

	<!-- This stylesheet expands xsl:* element declrations into the XSLT spec. 
		At present it does little more than interpolate from processing instructions.
 -->

	<xsl:variable name="elemdoc" select="document($catalog, /)"/>

	<xsl:variable name="isXSLT" select="contains(/spec/header/title, 'XSL Transformations')"
		as="xs:boolean"/>

	<xsl:template match="/">
		<xsl:for-each select="1 to 20">
			<xsl:comment>DO NOT EDIT: GENERATED BY merge-element-specs.xsl</xsl:comment>
			<xsl:text>&#xa;</xsl:text>
		</xsl:for-each>
		<xsl:apply-templates/>
	</xsl:template>

	<xsl:template match="*" mode="#default">
		<xsl:copy copy-namespaces="no">
			<xsl:copy-of select="@*"/>
			<xsl:apply-templates mode="#current"/>
		</xsl:copy>
	</xsl:template>

	<xsl:template match="processing-instruction()">
		<xsl:copy/>
	</xsl:template>

	<xsl:function name="e:get-element" as="element(e:element-syntax)?">
		<xsl:param name="prefix" as="xs:string"/>
		<xsl:param name="local" as="xs:string"/>
		<xsl:variable name="espec"
			select="$elemdoc/e:instructions/e:element-syntax
		[@name=$local][(@prefix, 'xsl')[1]=$prefix]"/>
		<xsl:if test="empty($espec)">
			<xsl:message>Element not found in catalog: <xsl:value-of select="$prefix, $local"
					separator=":"/></xsl:message>
		</xsl:if>
		<xsl:if test="exists($espec[2])">
			<xsl:message>Duplicate element found in catalog: <xsl:value-of select="$prefix, $local"
					separator=":"/></xsl:message>
		</xsl:if>
		<xsl:sequence select="$espec"/>
	</xsl:function>

	<xsl:template match="processing-instruction('element')">
		<xsl:variable name="lexname" select="normalize-space(.)"/>
		<xsl:variable name="espec"
			select="e:get-element(substring-before($lexname, ':'), substring-after($lexname,':'))"/>
		<xsl:copy-of select="$espec"/>
	</xsl:template>



</xsl:stylesheet>
