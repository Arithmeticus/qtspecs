<div1 id="sec_functions_and_operators">
  <head>Functions and Operators</head>

  <div2 id="sec_used_functions">
    <head>Functions and Operators used in the Formal Semantics</head>

    <p>Here is the list of functions from the &xq_functions; document
    that are used in the &language; Formal Semantics:</p>

    <ulist>
      <item><p id="func-add-dayTimeDurations"><xspecref spec="FO" ref="func-add-dayTimeDurations"/></p></item>
      <item><p id="func-add-dayTimeDuration-to-dateTime"><xspecref spec="FO" ref="func-add-dayTimeDuration-to-dateTime"/></p></item>
      <item><p id="func-add-dayTimeDuration-to-date"><xspecref spec="FO" ref="func-add-dayTimeDuration-to-date"/></p></item>
      <item><p id="func-add-dayTimeDuration-to-time"><xspecref spec="FO" ref="func-add-dayTimeDuration-to-time"/></p></item>
      <item><p id="func-add-yearMonthDurations"><xspecref spec="FO" ref="func-add-yearMonthDurations"/></p></item>
      <item><p id="func-add-yearMonthDuration-to-dateTime"><xspecref spec="FO" ref="func-add-yearMonthDuration-to-dateTime"/></p></item>
      <item><p id="func-add-yearMonthDuration-to-date"><xspecref spec="FO" ref="func-add-yearMonthDuration-to-date"/></p></item>
      <item><p id="func-boolean-equal"><xspecref spec="FO" ref="func-boolean-equal"/></p></item>
      <item><p id="func-boolean-greater-than"><xspecref spec="FO" ref="func-boolean-greater-than"/></p></item>
      <item><p id="func-boolean-less-than"><xspecref spec="FO" ref="func-boolean-less-than"/></p></item>
      <item><p id="func-boolean"><xspecref spec="FO" ref="func-boolean"/></p></item>
      <item><p id="func-compare"><xspecref spec="FO" ref="func-compare"/></p></item>
      <item><p id="func-concatenate"><xspecref spec="FO" ref="func-concatenate"/></p></item>
      <item><p id="func-count"><xspecref spec="FO" ref="func-count"/></p></item>
      <item><p id="func-dateTime-equal"><xspecref spec="FO" ref="func-dateTime-equal"/></p></item>
      <item><p id="func-dateTime-greater-than"><xspecref spec="FO" ref="func-dateTime-greater-than"/></p></item>
      <item><p id="func-dateTime-less-than"><xspecref spec="FO" ref="func-dateTime-less-than"/></p></item>
      <item><p id="func-dayTimeDuration-greater-than"><xspecref spec="FO" ref="func-dayTimeDuration-greater-than"/></p></item>
      <item><p id="func-dayTimeDuration-less-than"><xspecref spec="FO" ref="func-dayTimeDuration-less-than"/></p></item>
      <item><p id="func-divide-dayTimeDuration"><xspecref spec="FO" ref="func-divide-dayTimeDuration"/></p></item>
      <item><p id="func-divide-yearMonthDuration"><xspecref spec="FO" ref="func-divide-yearMonthDuration"/></p></item>
      <item><p id="func-data"><xspecref spec="FO" ref="func-data"/></p></item>
      <item><p id="func-empty"><xspecref spec="FO" ref="func-empty"/></p></item>
      <item><p id="func-error"><xspecref spec="FO" ref="func-error"/></p></item>
      <item><p id="func-except"><xspecref spec="FO" ref="func-except"/></p></item>
      <item><p id="func-false"><xspecref spec="FO" ref="func-false"/></p></item>
      <item><p id="func-intersect"><xspecref spec="FO" ref="func-intersect"/></p></item>
      <item><p id="func-is-same-node"><xspecref spec="FO" ref="func-is-same-node"/></p></item>
      <item><p id="func-last"><xspecref spec="FO" ref="func-last"/></p></item>
      <item><p id="func-multiply-dayTimeDuration"><xspecref spec="FO" ref="func-multiply-dayTimeDuration"/></p></item>
      <item><p id="func-multiply-yearMonthDuration"><xspecref spec="FO" ref="func-multiply-yearMonthDuration"/></p></item>
      <item><p id="func-node-after"><xspecref spec="FO" ref="func-node-after"/></p></item>
      <item><p id="func-node-before"><xspecref spec="FO" ref="func-node-before"/></p></item>
      <item><p id="func-NOTATION-equal"><xspecref spec="FO" ref="func-NOTATION-equal"/></p></item>
      <item><p id="func-not"><xspecref spec="FO" ref="func-not"/></p></item>
      <item><p id="func-numeric-add"><xspecref spec="FO" ref="func-numeric-add"/></p></item>
      <item><p id="func-numeric-divide"><xspecref spec="FO" ref="func-numeric-divide"/></p></item>
      <item><p id="func-numeric-equal"><xspecref spec="FO" ref="func-numeric-equal"/></p></item>
      <item><p id="func-numeric-greater-than"><xspecref spec="FO" ref="func-numeric-greater-than"/></p></item>
      <item><p id="func-numeric-less-than"><xspecref spec="FO" ref="func-numeric-less-than"/></p></item>
      <item><p id="func-numeric-mod"><xspecref spec="FO" ref="func-numeric-mod"/></p></item>
      <item><p id="func-numeric-multiply"><xspecref spec="FO" ref="func-numeric-multiply"/></p></item>
      <item><p id="func-numeric-subtract"><xspecref spec="FO" ref="func-numeric-subtract"/></p></item>
      <item><p id="func-numeric-unary-minus"><xspecref spec="FO" ref="func-numeric-unary-minus"/></p></item>
      <item><p id="func-numeric-unary-plus"><xspecref spec="FO" ref="func-numeric-unary-plus"/></p></item>
      <item><p id="func-position"><xspecref spec="FO" ref="func-position"/></p></item>
      <item><p id="func-QName-equal"><xspecref spec="FO" ref="func-QName-equal"/></p></item>
      <item><p id="func-root"><xspecref spec="FO" ref="func-root"/></p></item>
      <item><p id="func-round"><xspecref spec="FO" ref="func-round"/></p></item>
      <item diff='add' at='E031'><p id="func-string-join"><xspecref spec="FO" ref="func-string-join"/></p></item>
      <item diff='del' at='E024'><p id="func-subsequence"><xspecref spec="FO" ref="func-subsequence"/></p></item>
      <item><p id="func-subtract-dayTimeDuration-from-dateTime"><xspecref spec="FO" ref="func-subtract-dayTimeDuration-from-dateTime"/></p></item>
      <item><p id="func-subtract-dayTimeDuration-from-date"><xspecref spec="FO" ref="func-subtract-dayTimeDuration-from-date"/></p></item>
      <item><p id="func-subtract-dayTimeDuration-from-time"><xspecref spec="FO" ref="func-subtract-dayTimeDuration-from-time"/></p></item>
      <item><p id="func-subtract-dayTimeDurations"><xspecref spec="FO" ref="func-subtract-dayTimeDurations"/></p></item>
      <item><p id="func-subtract-yearMonthDuration-from-dateTime"><xspecref spec="FO" ref="func-subtract-yearMonthDuration-from-dateTime"/></p></item>
      <item><p id="func-subtract-yearMonthDuration-from-date"><xspecref spec="FO" ref="func-subtract-yearMonthDuration-from-date"/></p></item>
      <item><p id="func-subtract-yearMonthDurations"><xspecref spec="FO" ref="func-subtract-yearMonthDurations"/></p></item>
      <item><p id="func-to"><xspecref spec="FO" ref="func-to"/></p></item>
      <item><p id="func-true"><xspecref spec="FO" ref="func-true"/></p></item>
      <item><p id="func-union"><xspecref spec="FO" ref="func-union"/></p></item>
      <item><p id="func-yearMonthDuration-greater-than"><xspecref spec="FO" ref="func-yearMonthDuration-greater-than"/></p></item>
      <item><p id="func-yearMonthDuration-less-than"><xspecref spec="FO" ref="func-yearMonthDuration-less-than"/></p></item>
    </ulist>
  </div2>

  <div2 id="sec_operators">
    <head>Mapping of Overloaded Internal Functions</head>

    <p>This section gives the semantics specific to overloaded
    internal functions (with prefix <emph>fs:</emph>) that are used to
    define overloaded XQuery operators (with prefix <emph>op:</emph>),
    such as comparison expressions or arithmetic expressions. Static
    typing for those functions are defined over unions of (possibly
    optional) atomic types. The semantics is obtained in three
    steps. First, a rule is applied to deal with the union of those
    (possibly optional) atomic types. A second set of rules treat the
    cases where one of the operands of those functions is the empty
    type (resp. empty sequence) or optional. Finally, a final rule
    deals with type promotion and access to an operators mapping table
    which maps the overloaded internal functions to the appropriate
    operator functions defined in &xq_functions; and give the
    corresponding type.</p>

    <smnotation>
      <p>The following auxiliary grammar production describe optional
      atomic types.</p>

      <scrap>
        <head>OptAtomicType</head>
      
        <prodrecap ref="OptAtomicType" id="OptAtomicType" orig="formal"/>
      </scrap>

    </smnotation>

    <smtype>
      <p>The following static typing rules apply generically to all
      the <emph>fs:</emph> special functions. They do not apply to any
      other function calls, which are treated in <specref
      ref="id-function-calls"/>.</p>

      <p>First, if the static type of one or several of the
      expressions passed as argument is a union of atomic types, the
      function call is type checked once separately for each atomic
      type in that union. The static type of the entire function call
      expression is then the union of the types computed in each
      case.</p>

      <infergr>
        <infer>
          <prejudge>
            <multiclause>
              <clause>
                <expression>
                  &gr_Type1; = (&gr_OptAtomicType1;<subscript>,1</subscript>|...|&gr_OptAtomicTypem;<subscript>,1</subscript>)
                </expression>
              </clause>
            </multiclause>
            <multiclause>
              <clause>
                <expression>
                  ...
                </expression>
              </clause>
            </multiclause>
            <multiclause>
              <clause>
                <expression>
                  &gr_Typen; = (&gr_OptAtomicType1;<subscript>,n</subscript>|...|&gr_OptAtomicTypem;<subscript>,n</subscript>)
                </expression>
              </clause>
            </multiclause>
            <multiclause>
              <clause><environment>&xq_stat_env; </environment>
                <expression>
                  &xd_qname;(&gr_OptAtomicType1;<subscript>,1</subscript>,..., &gr_OptAtomicType1;<subscript>,n</subscript>) &jd_has_type; &gr_OptAtomicType1;'
                </expression>
              </clause>
            </multiclause>
            <multiclause><clause><expression>...</expression></clause></multiclause>
            <multiclause>
              <clause><environment>&xq_stat_env; </environment>
                <expression>
                  &xd_qname;(&gr_OptAtomicTypem;<subscript>,1</subscript>,..., &gr_OptAtomicTypem;<subscript>,n</subscript>) &jd_has_type; &gr_OptAtomicTyper;'
                </expression>
              </clause>
            </multiclause>
          </prejudge>
          <postjudge>
            <multiclause>
              <clause><environment>&xq_stat_env; </environment>
                <expression>
                  &xd_qname;(&gr_Type1;, ..., &gr_Typen;)
                  &jd_has_type;
                  (&gr_OptAtomicType1;'|...|&gr_OptAtomicTyper;')
                </expression>
              </clause>
            </multiclause>
          </postjudge>
        </infer>
      </infergr>

      <smnote>
        <p>Note that this approach can be used since the type declared
        for a function parameter is never itself be a union.</p>
      </smnote>

      <p>The following rules deal with optional arguments. In the case
      of binary operators, if either one of the types of the operands
      is empty, the resulting type is empty.</p>

	<infergr>
	  <infer>
	    <prejudge>
             <multiclause>
	      <clause>
		<expression>
		  &gr_Type1; = empty
		</expression>
	      </clause>
             </multiclause>
	    </prejudge>
	    <postjudge>
	      <clause>
                <environment>&xq_stat_env;</environment>
		<expression>
		  <emph>&xd_qname;</emph>(&gr_Type1;,&gr_Type2;) &jd_has_type; empty
		</expression>
	      </clause>
	    </postjudge>
	  </infer>
	</infergr>

	<infergr>
	  <infer>
	    <prejudge>
             <multiclause>
	      <clause>
		<expression>
		  &gr_Type2; = empty
		</expression>
	      </clause>
             </multiclause>
	    </prejudge>
	    <postjudge>
	      <clause>
                <environment>&xq_stat_env;</environment>
		<expression>
		  <emph>&xd_qname;</emph>(&gr_Type1;,&gr_Type2;) &jd_has_type; empty
		</expression>
	      </clause>
	    </postjudge>
	  </infer>
	</infergr>

        <p>If either one of the types of the operands is optional, the
        type obtained by propagating the optional occurrence
        indicator.</p>

	<infergr>
	  <infer>
	    <prejudge>
             <multiclause>
	      <clause>
		<expression>
		  &gr_Type1; = &gr_AtomicType1;
		</expression>
	      </clause>
             </multiclause>
             <multiclause>
	      <clause>
		<expression>
		  &gr_Type2; = &gr_AtomicType2;?
		</expression>
	      </clause>
             </multiclause>
             <multiclause>
	      <clause>
                <environment>&xq_stat_env;</environment>
		<expression>
          &xd_qname;(&gr_AtomicType1;,&gr_AtomicType2;) &jd_has_type; &gr_AtomicType3;
		</expression>
	      </clause>
             </multiclause>
	    </prejudge>
	    <postjudge>
	      <clause>
                <environment>&xq_stat_env;</environment>
		<expression>
		  <emph>&xd_qname;</emph>(&gr_Type1;,&gr_Type2;) &jd_has_type; &gr_AtomicType3;?
		</expression>
	      </clause>
	    </postjudge>
	  </infer>
	</infergr>

	<infergr>
	  <infer>
	    <prejudge>
             <multiclause>
	      <clause>
		<expression>
		  &gr_Type1; = &gr_AtomicType1;?
		</expression>
	      </clause>
             </multiclause>
             <multiclause>
	      <clause>
		<expression>
		  &gr_Type2; = &gr_AtomicType2;
		</expression>
	      </clause>
             </multiclause>
             <multiclause>
	      <clause>
                <environment>&xq_stat_env;</environment>
		<expression>
          &xd_qname;(&gr_AtomicType1;,&gr_AtomicType2;) &jd_has_type; &gr_AtomicType3;
		</expression>
	      </clause>
             </multiclause>
	    </prejudge>
	    <postjudge>
	      <clause>
                <environment>&xq_stat_env;</environment>
		<expression>
		  <emph>&xd_qname;</emph>(&gr_Type1;,&gr_Type2;) &jd_has_type; &gr_AtomicType3;?
		</expression>
	      </clause>
	    </postjudge>
	  </infer>
	</infergr>

	<infergr>
	  <infer>
	    <prejudge>
             <multiclause>
	      <clause>
		<expression>
		  &gr_Type1; = &gr_AtomicType1;?
		</expression>
	      </clause>
             </multiclause>
             <multiclause>
	      <clause>
		<expression>
		  &gr_Type2; = &gr_AtomicType2;?
		</expression>
	      </clause>
             </multiclause>
             <multiclause>
	      <clause>
                <environment>&xq_stat_env;</environment>
		<expression>
          &xd_qname;(&gr_AtomicType1;,&gr_AtomicType2;) &jd_has_type; &gr_AtomicType3;
		</expression>
	      </clause>
             </multiclause>
	    </prejudge>
	    <postjudge>
	      <clause>
                <environment>&xq_stat_env;</environment>
		<expression>
		  <emph>&xd_qname;</emph>(&gr_Type1;,&gr_Type2;) &jd_has_type; &gr_AtomicType3;?
		</expression>
	      </clause>
	    </postjudge>
	  </infer>
	</infergr>

      <p>In the case of unary operators, if the type of the operand is
      empty, the resulting type is empty.</p>

	<infergr>
	  <infer>
	    <prejudge>
             <multiclause>
	      <clause>
		<expression>
		  &gr_Type1; = empty
		</expression>
	      </clause>
             </multiclause>
	    </prejudge>
	    <postjudge>
	      <clause>
                <environment>&xq_stat_env;</environment>
		<expression>
		  <emph>&xd_qname;</emph>(&gr_Type1;) &jd_has_type; empty
		</expression>
	      </clause>
	    </postjudge>
	  </infer>
	</infergr>

      <p>Finally, the resulting type is obtained by performing type
      promotion and accessing the operators mapping table (using the
      &jd_operator_type_for; judgment defined below).</p>

      <infergr>
        <infer>
          <prejudge>
              <multiclause>
                <clause><environment> &xq_stat_env; </environment>
                        <expression>&gr_AtomicType1; &jd_can_be_promoted_to; &gr_AtomicType1;'</expression></clause>
              </multiclause>
              <multiclause>
                <clause><environment> &xq_stat_env; </environment>
                        <expression>&gr_AtomicType2; &jd_can_be_promoted_to; &gr_AtomicType2;'</expression></clause>
              </multiclause>
             <multiclause>
	      <clause>
		<expression>
		  &xd_qname; &jd_operator_type_for; &gr_AtomicType1; &jd_operator_type_for_and; &gr_AtomicType2; &jd_operator_type_for_is; &gr_AtomicType3;
		</expression>
	      </clause>
             </multiclause>
          </prejudge>
          <postjudge>
            <multiclause>
              <clause><environment>&xq_stat_env; </environment>
                <expression>
                  &xd_qname;(&gr_AtomicType1;,&gr_AtomicType2;) &jd_has_type; &gr_AtomicType3;
                </expression>
              </clause>
            </multiclause>
          </postjudge>
        </infer>
      </infergr>

      <infergr>
        <infer>
          <prejudge>
              <multiclause>
                <clause><environment> &xq_stat_env; </environment>
                        <expression>&gr_AtomicType1; &jd_can_be_promoted_to; &gr_AtomicType1;'</expression></clause>
              </multiclause>
             <multiclause>
	      <clause>
		<expression>
		  &xd_qname; &jd_operator_type_for; &gr_AtomicType1; &jd_operator_type_for_is; &gr_AtomicType3;
		</expression>
	      </clause>
             </multiclause>
          </prejudge>
          <postjudge>
            <multiclause>
              <clause><environment>&xq_stat_env; </environment>
                <expression>
                  &xd_qname;(&gr_AtomicType1;) &jd_has_type; &gr_AtomicType3;
                </expression>
              </clause>
            </multiclause>
          </postjudge>
        </infer>
      </infergr>

<!--
            Type1 is not a union of atomic types
            Type2 is not a union of atomic types
            statEnv |- Type1 can be promoted to Type1'
            statEnv |- Type2 can be promoted to Type2'
            operator type for Type1' and Type2' is Type3'

            statEnv |- expanded-QName(Type1, Type2) : Type3'

            [expanded-Qname is that of a unary pseudo-function]
            Type1 is not a union of atomic types
            statEnv |- Type1 can be promoted to Type1'
            operator type for Type1' is Type3'

            statEnv |- expanded-QName(Type1) : Type3'
-->

    </smtype>

    <smeval>
      <p>Each <code>fs:</code> overloaded operator maps to the
      corresponding equivalent overloaded <code>op:</code> operator,
      as defined in &xq_functions;, and deals with the case where one
      of the operands is the empty sequence.</p>

      <p>The dynamic semantics of the <code>fs:</code> operator is
      similar to using the following user-defined function.</p>

      <table summary="">
        <tbody>
          <tr>
            <td><code>declare function</code> <emph>fs:opname</emph><code>($x1 as
            xs:anyAtomicType?, $x2 as xs:anyAtomicType?) as
            xs:anyAtomicType? {</code></td>
          </tr>
          <tr>
            <td>&nbsp;&nbsp;<code>if (fn:empty($x1) or fn:empty($x2)) then () else</code>
            <map><emph>fs:opname($x1,$x2)</emph></map>&jd_map_overloaded_op;</td>
          </tr>
          <tr>
            <td><code>};</code></td>
          </tr>
        </tbody>
      </table>

      <p>Where
      <map><emph>fs:opname()</emph></map>&jd_map_overloaded_op; maps
      to the corresponding op: operator in &xq_functions;, as defined
      in the table below.</p>
    </smeval>

    <smnotation>
      <p>The operators mapping table is given below. The table is used
      to define the following auxiliary mapping rules and
      judgments.</p>

      <p id="jd_map_overloaded_op">The mapping rule for binary and
      unary operators</p>

      <display>
        <clause>
        <!-- E056 start -->
        <expression><map><emph>fs:opname1</emph>(&gr_Expr1;,&gr_Expr2;)</map>&jd_map_overloaded_op;
        == <emph>op:opname2</emph>(&gr_Expr1;,&gr_Expr2;)</expression>
        <!-- E056 end -->
        </clause>
      </display>
    
      <p>and</p>

      <display>
        <clause>
        <!-- E056 start -->
        <expression><map><emph>fs:opname1</emph>(&gr_Expr1;)</map>&jd_map_overloaded_op;
        == <emph>op:opname2</emph>(&gr_Expr1;)</expression>
        <!-- E056 end -->
        </clause>
      </display>

      <p>where the operator depends on the type of each value returned
      by &gr_Expr1; and &gr_Expr2;.</p>

      <p id="jd_operator_type_for">The judgments for binary and unary
      operators</p>

      <display>
        <clause>
	 <expression>
	  &xd_qname; &jd_operator_type_for; &gr_AtomicType1; &jd_operator_type_for_and; &gr_AtomicType2; &jd_operator_type_for_is; &gr_AtomicType3;
	 </expression>
        </clause>
      </display>

      <p>and</p>

      <display>
        <clause>
	 <expression>
	  &xd_qname; &jd_operator_type_for; &gr_AtomicType1; &jd_operator_type_for_is; &gr_AtomicType3;
	 </expression>
        </clause>
      </display>

      <p>hold when the operator table indicates that the operator
      &xd_qname; has the output type &gr_AtomicType3; for the input
      types &gr_AtomicType1; and &gr_AtomicType2;.</p>

    </smnotation>

    <p>Note that in the following table, all numeric functions are
    applied to operands with the same type.  Values are promoted to
    compatible types using the function call semantics given in
    <specref ref="id-function-calls"/>.</p>

    <p><term>Gregorian</term> refers to the types &xs_gYearMonth;,
    &xs_gYear;, &xs_gMonthDay;, &xs_gDay;, and &xs_gMonth;.  For
    binary operators that accept two Gregorian-type operands, both
    operands must have the same type (for example, if one operand is
    of type &xs_gDay;, the other operand must be of type
    &xs_gDay;.)</p>

    <table summary="" border="1">
    <caption>Binary Operators</caption>
    <tbody><tr>
    <th rowspan="1" colspan="1"><small>Internal Function</small></th><th rowspan="1" colspan="1"><small>&gr_AtomicType1;</small></th><th rowspan="1" colspan="1"><small>&gr_AtomicType2;</small></th><th rowspan="1" colspan="1"><small>Denotes</small></th><th rowspan="1" colspan="1"><small>&gr_AtomicType3;</small></th>
    </tr>

    <tr>
    <td rowspan="1" colspan="1"><small>&fs_plus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td><td rowspan="1" colspan="1"><small>op:numeric-add(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td>
    </tr>

    <tr>
    <td rowspan="1" colspan="1"><small>&fs_plus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td><td rowspan="1" colspan="1"><small>op:numeric-add(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_plus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td><td rowspan="1" colspan="1"><small>op:numeric-add(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_plus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>op:numeric-add(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td>
    </tr>

    <tr>
    <td rowspan="1" colspan="1"><small>&fs_plus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td><td rowspan="1" colspan="1"><small>op:add-yearMonthDuration-to-date(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_plus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td><td rowspan="1" colspan="1"><small>op:add-yearMonthDuration-to-date(B, A)</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_plus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>op:add-dayTimeDuration-to-date(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_plus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td><td rowspan="1" colspan="1"><small>op:add-dayTimeDuration-to-date(B, A)</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_plus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_time;</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>op:add-dayTimeDuration-to-time(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_time;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_plus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>&xs_time;</small></td><td rowspan="1" colspan="1"><small>op:add-dayTimeDuration-to-time(B, A)</small></td><td rowspan="1" colspan="1"><small>&xs_time;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_plus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td><td rowspan="1" colspan="1"><small>op:add-yearMonthDuration-to-dateTime(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_plus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td><td rowspan="1" colspan="1"><small>op:add-yearMonthDuration-to-dateTime(B, A)</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_plus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>op:add-dayTimeDuration-to-dateTime(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_plus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td><td rowspan="1" colspan="1"><small>op:add-dayTimeDuration-to-dateTime(B, A)</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_plus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td><td rowspan="1" colspan="1"><small>op:add-yearMonthDurations(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_plus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>op:add-dayTimeDurations(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td>
    </tr>


    <tr>
    <td rowspan="1" colspan="1"><small>&fs_minus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td><td rowspan="1" colspan="1"><small>op:numeric-subtract(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td>
    </tr>


    <tr>
    <td rowspan="1" colspan="1"><small>&fs_minus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td><td rowspan="1" colspan="1"><small>op:numeric-subtract(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_minus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td><td rowspan="1" colspan="1"><small>op:numeric-subtract(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_minus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>op:numeric-subtract(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td>
    </tr>

    <tr>
    <td rowspan="1" colspan="1"><small>&fs_minus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td><td rowspan="1" colspan="1"><small><phrase diff='del' at='E053'>fn</phrase><phrase diff='add' at='E053'>op</phrase>:subtract-dates(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_minus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td><td rowspan="1" colspan="1"><small>op:subtract-yearMonthDuration-from-date(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_minus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>op:subtract-dayTimeDuration-from-date(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_minus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_time;</small></td><td rowspan="1" colspan="1"><small>&xs_time;</small></td><td rowspan="1" colspan="1"><small><phrase diff='del' at='E053'>fn</phrase><phrase diff='add' at='E053'>op</phrase>:subtract-times(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_minus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_time;</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>op:subtract-dayTimeDuration-from-time(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_time;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_minus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td><td rowspan="1" colspan="1"><small><phrase diff='del' at='E053'>fn</phrase><phrase diff='add' at='E053'>op</phrase>:subtract-dateTimes(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_minus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td><td rowspan="1" colspan="1"><small>op:subtract-yearMonthDuration-from-dateTime(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_minus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>op:subtract-dayTimeDuration-from-dateTime(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_minus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td><td rowspan="1" colspan="1"><small>op:subtract-yearMonthDurations(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_minus;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>op:subtract-dayTimeDurations(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td>
    </tr>

    <tr>
    <td rowspan="1" colspan="1"><small>&fs_times;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td><td rowspan="1" colspan="1"><small>op:numeric-multiply(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_times;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td><td rowspan="1" colspan="1"><small>op:numeric-multiply(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_times;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td><td rowspan="1" colspan="1"><small>op:numeric-multiply(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_times;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>op:numeric-multiply(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td>
    </tr>

    <tr>
    <td rowspan="1" colspan="1"><small>&fs_times;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>op:multiply-yearMonthDuration(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_times;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td><td rowspan="1" colspan="1"><small>op:multiply-yearMonthDuration(B, A)</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_times;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>op:multiply-dayTimeDuration(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_times;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>op:multiply-dayTimeDuration(B, A)</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td>
    </tr>

    <tr>
    <td rowspan="1" colspan="1"><small>&fs_idiv;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td><td rowspan="1" colspan="1" diff='chg' at='E016'><small>op:numeric-integer-divide(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td>
    </tr>
    <tr diff='add' at='E016'>
    <td rowspan="1" colspan="1"><small>&fs_idiv;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td><td rowspan="1" colspan="1"><small>op:numeric-integer-divide(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td>
    </tr>
    <tr diff='add' at='E016'>
    <td rowspan="1" colspan="1"><small>&fs_idiv;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td><td rowspan="1" colspan="1"><small>op:numeric-integer-divide(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td>
    </tr>
    <tr diff='add' at='E016'>
    <td rowspan="1" colspan="1"><small>&fs_idiv;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>op:numeric-integer-divide(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td>
    </tr>

    <tr>
    <td rowspan="1" colspan="1"><small>&fs_div;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td><td rowspan="1" colspan="1"><small>op:numeric-divide(A, B)</small></td><td rowspan="1" colspan="1" diff='chg' at='E025'><small>&xs_decimal;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_div;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td><td rowspan="1" colspan="1"><small>op:numeric-divide(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_div;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td><td rowspan="1" colspan="1"><small>op:numeric-divide(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_div;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>op:numeric-divide(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td>
    </tr>

    <tr>
    <td rowspan="1" colspan="1"><small>&fs_div;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>op:divide-yearMonthDuration(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_div;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>op:divide-dayTimeDuration(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td>
    </tr>


    <tr>
    <td rowspan="1" colspan="1"><small>&fs_div;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td><td rowspan="1" colspan="1"><small>op:divide-yearMonthDuration-by-yearMonthDuration(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td>
    </tr>

    <tr>
    <td rowspan="1" colspan="1"><small>&fs_div;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>op:divide-dayTimeDuration-by-dayTimeDuration(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td>
    </tr>

    <tr>
    <td rowspan="1" colspan="1"><small>&fs_mod;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td><td rowspan="1" colspan="1"><small>op:numeric-mod(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_mod;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td><td rowspan="1" colspan="1"><small>op:numeric-mod(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_mod;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td><td rowspan="1" colspan="1"><small>op:numeric-mod(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small>&fs_mod;(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>op:numeric-mod(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td>
    </tr>

    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>eq</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td><td rowspan="1" colspan="1"><small>op:numeric-equal(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>eq</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td><td rowspan="1" colspan="1"><small>op:numeric-equal(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>eq</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td><td rowspan="1" colspan="1"><small>op:numeric-equal(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>eq</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>op:numeric-equal(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>

    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>eq</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td><td rowspan="1" colspan="1"><small>op:boolean-equal(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>

    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>eq</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_string;</small></td><td rowspan="1" colspan="1"><small>&xs_string;</small></td><td rowspan="1" colspan="1"><small>op:numeric-equal(fn:compare(A, B), 0)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>eq</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td><td rowspan="1" colspan="1"><small>op:date-equal(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>eq</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_time;</small></td><td rowspan="1" colspan="1"><small>&xs_time;</small></td><td rowspan="1" colspan="1"><small>op:time-equal(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>eq</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td><td rowspan="1" colspan="1"><small>op:dateTime-equal(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>eq</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_duration;</small></td><td rowspan="1" colspan="1"><small>&xs_duration;</small></td><td rowspan="1" colspan="1"><small>op:duration-equal(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>eq</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>Gregorian</small></td><td rowspan="1" colspan="1"><small>Gregorian</small></td><td rowspan="1" colspan="1"><small>op:gYear-equal(A, B) etc.</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>eq</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_hexBinary;</small></td><td rowspan="1" colspan="1"><small>&xs_hexBinary;</small></td><td rowspan="1" colspan="1"><small><phrase diff='del' at='E053'>op:hex-binary-equal</phrase><phrase diff='add' at='E053'>op:hexBinary-equal</phrase>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>eq</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_base64Binary;</small></td><td rowspan="1" colspan="1"><small>&xs_base64Binary;</small></td><td rowspan="1" colspan="1"><small><phrase diff='del' at='E053'>op:base64-binary-equal</phrase><phrase diff='add' at='E053'>op:base64Binary-equal</phrase>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>eq</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_anyURI;</small></td><td rowspan="1" colspan="1"><small>&xs_anyURI;</small></td><td rowspan="1" colspan="1"><small><phrase diff='chg' at='E010'>op:numeric-equal(fn:compare(A, B), 0)</phrase></small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>eq</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_QName;</small></td><td rowspan="1" colspan="1"><small>&xs_QName;</small></td><td rowspan="1" colspan="1"><small>op:QName-equal(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>eq</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_NOTATION;</small></td><td rowspan="1" colspan="1"><small>&xs_NOTATION;</small></td><td rowspan="1" colspan="1"><small>op:NOTATION-equal(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>


    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ne</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td><td rowspan="1" colspan="1"><small>&fn_not;(op:numeric-equal(A, B))</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ne</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td><td rowspan="1" colspan="1"><small>&fn_not;(op:numeric-equal(A, B))</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ne</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td><td rowspan="1" colspan="1"><small>&fn_not;(op:numeric-equal(A, B))</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ne</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>&fn_not;(op:numeric-equal(A, B))</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ne</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td><td rowspan="1" colspan="1"><small>&fn_not;(op:boolean-equal(A, B))</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ne</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_string;</small></td><td rowspan="1" colspan="1"><small>&xs_string;</small></td><td rowspan="1" colspan="1"><small>&fn_not;(op:numeric-equal(fn:compare(A, B), 0))</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ne</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td><td rowspan="1" colspan="1"><small>&fn_not;(op:date-equal(A, B))</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ne</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_time;</small></td><td rowspan="1" colspan="1"><small>&xs_time;</small></td><td rowspan="1" colspan="1"><small>&fn_not;(op:time-equal(A, B))</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ne</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td><td rowspan="1" colspan="1"><small>&fn_not;(op:dateTime-equal(A, B))</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ne</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_duration;</small></td><td rowspan="1" colspan="1"><small>&xs_duration;</small></td><td rowspan="1" colspan="1"><small>&fn_not;(op:duration-equal(A, B))</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ne</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>Gregorian</small></td><td rowspan="1" colspan="1"><small>Gregorian</small></td><td rowspan="1" colspan="1"><small>&fn_not;(op:gYear-equal(A, B)) etc.</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ne</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_hexBinary;</small></td><td rowspan="1" colspan="1"><small>&xs_hexBinary;</small></td><td rowspan="1" colspan="1"><small>&fn_not;(<phrase diff='del' at='E053'>op:hex-binary-equal</phrase><phrase diff='add' at='E053'>op:hexBinary-equal</phrase>(A, B))</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ne</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_base64Binary;</small></td><td rowspan="1" colspan="1"><small>&xs_base64Binary;</small></td><td rowspan="1" colspan="1"><small>&fn_not;(<phrase diff='del' at='E053'>op:base64-binary-equal</phrase><phrase diff='add' at='E053'>op:base64Binary-equal</phrase>(A, B))</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ne</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_anyURI;</small></td><td rowspan="1" colspan="1"><small>&xs_anyURI;</small></td><td rowspan="1" colspan="1"><small>&fn_not;(<phrase diff='chg' at='E010'>op:numeric-equal(fn:compare(A, B), 0)</phrase>)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ne</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_QName;</small></td><td rowspan="1" colspan="1"><small>&xs_QName;</small></td><td rowspan="1" colspan="1"><small>&fn_not;(op:QName-equal(A, B))</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ne</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_NOTATION;</small></td><td rowspan="1" colspan="1"><small>&xs_NOTATION;</small></td><td rowspan="1" colspan="1"><small>&fn_not;(op:NOTATION-equal(A, B))</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>

    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>gt</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td><td rowspan="1" colspan="1"><small>op:numeric-greater-than(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>gt</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td><td rowspan="1" colspan="1"><small>op:numeric-greater-than(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>gt</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td><td rowspan="1" colspan="1"><small>op:numeric-greater-than(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>gt</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>op:numeric-greater-than(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>gt</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td><td rowspan="1" colspan="1"><small>op:boolean-greater-than(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>gt</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_string;</small></td><td rowspan="1" colspan="1"><small>&xs_string;</small></td><td rowspan="1" colspan="1"><small>op:numeric-greater-than(&fn_compare;(A, B), 0)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>gt</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td><td rowspan="1" colspan="1"><small>op:date-greater-than(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>gt</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_time;</small></td><td rowspan="1" colspan="1"><small>&xs_time;</small></td><td rowspan="1" colspan="1"><small>op:time-greater-than(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>gt</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td><td rowspan="1" colspan="1"><small>op:dateTime-greater-than(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>gt</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td><td rowspan="1" colspan="1"><small>op:yearMonthDuration-greater-than(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>gt</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>op:dayTimeDuration-greater-than(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>

    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>lt</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td><td rowspan="1" colspan="1"><small>&xs_integer;</small></td><td rowspan="1" colspan="1"><small>op:numeric-less-than(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>lt</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td><td rowspan="1" colspan="1"><small>op:numeric-less-than(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>lt</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td><td rowspan="1" colspan="1"><small>op:numeric-less-than(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>lt</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>op:numeric-less-than(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>

    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>lt</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td><td rowspan="1" colspan="1"><small>op:boolean-less-than(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>lt</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_string;</small></td><td rowspan="1" colspan="1"><small>&xs_string;</small></td><td rowspan="1" colspan="1"><small>op:numeric-less-than(&fn_compare;(A, B), 0)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>lt</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td><td rowspan="1" colspan="1"><small>op:date-less-than(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>lt</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_time;</small></td><td rowspan="1" colspan="1"><small>&xs_time;</small></td><td rowspan="1" colspan="1"><small>op:time-less-than(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>lt</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td><td rowspan="1" colspan="1"><small>op:dateTime-less-than(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>lt</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td><td rowspan="1" colspan="1"><small>op:yearMonthDuration-less-than(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>lt</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>op:dayTimeDuration-less-than(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>

    <tr>
    <td rowspan="1"
    colspan="1"><small><emph>fs:</emph><code>ge</code>(A,
    B)</small></td><td rowspan="1"
    colspan="1"><small>&xs_integer;</small></td><td rowspan="1"
    colspan="1"><small>&xs_integer;</small></td><td rowspan="1"
    colspan="1"><small>op:numeric-greater-than(A, B) or op:numeric-equal(A,B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ge</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td><td rowspan="1" colspan="1"><small>op:numeric-greater-than(A, B) or op:numeric-equal(A,B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ge</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td><td rowspan="1" colspan="1"><small>op:numeric-greater-than(A, B) or op:numeric-equal(A,B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ge</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>op:numeric-greater-than(A, B) or op:numeric-equal(A,B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ge</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td><td rowspan="1" colspan="1"><small>op:numeric-greater-than(A, B) or op:numeric-equal(A,B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ge</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_string;</small></td><td rowspan="1" colspan="1"><small>&xs_string;</small></td><td rowspan="1" colspan="1"><small>op:numeric-greater-than(&fn_compare;(A, B), -1)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ge</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td><td rowspan="1" colspan="1"><small>op:date-less-than(B, A)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ge</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_time;</small></td><td rowspan="1" colspan="1"><small>&xs_time;</small></td><td rowspan="1" colspan="1"><small>op:time-less-than(B, A)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ge</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td><td rowspan="1" colspan="1"><small>op:dateTime-less-than(B, A)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ge</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td><td rowspan="1" colspan="1"><small>op:yearMonthDuration-less-than(B, A)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>ge</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>op:dayTimeDuration-less-than(B, A)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>

    <tr>
    <td rowspan="1"
    colspan="1"><small><emph>fs:</emph><code>le</code>(A,
    B)</small></td><td rowspan="1"
    colspan="1"><small>&xs_integer;</small></td><td rowspan="1"
    colspan="1"><small>&xs_integer;</small></td><td rowspan="1"
    colspan="1"><small>op:numeric-less-than(A, B) or op:numeric-equal(A,B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>le</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td><td rowspan="1" colspan="1"><small>&xs_decimal;</small></td><td rowspan="1" colspan="1"><small>op:numeric-less-than(A, B) or op:numeric-equal(A,B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>le</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td><td rowspan="1" colspan="1"><small>&xs_float;</small></td><td rowspan="1" colspan="1"><small>op:numeric-less-than(A, B) or op:numeric-equal(A,B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>le</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>&xs_double;</small></td><td rowspan="1" colspan="1"><small>op:numeric-less-than(A, B) or op:numeric-equal(A,B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>le</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td><td rowspan="1" colspan="1"><small>op:numeric-less-than(A, B) or op:numeric-equal(A,B)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>le</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_string;</small></td><td rowspan="1" colspan="1"><small>&xs_string;</small></td><td rowspan="1" colspan="1"><small>op:numeric-less-than(&fn_compare;(A, B), 1)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>le</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td><td rowspan="1" colspan="1"><small>&xs_date;</small></td><td rowspan="1" colspan="1"><small>op:date-greater-than(B, A)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>le</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_time;</small></td><td rowspan="1" colspan="1"><small>&xs_time;</small></td><td rowspan="1" colspan="1"><small>op:time-greater-than(B, A)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>le</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td><td rowspan="1" colspan="1"><small>&xs_dateTime;</small></td><td rowspan="1" colspan="1"><small>op:dateTime-greater-than(B, A)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>
    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>le</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td><td rowspan="1" colspan="1"><small>&xs_yearMonthDuration;</small></td><td rowspan="1" colspan="1"><small>op:yearMonthDuration-greater-than(B, A)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>

    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>le</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>&xs_dayTimeDuration;</small></td><td rowspan="1" colspan="1"><small>op:dayTimeDuration-greater-than(B, A)</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>


    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>is-same-node</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>node()</small></td><td rowspan="1" colspan="1"><small>node()</small></td><td rowspan="1" colspan="1"><small>&fn_nodeequal;</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>

    <tr>
    <td rowspan="1" colspan="1"><small><emph>fs:</emph><code>node-before</code>(A, B)</small></td><td rowspan="1" colspan="1"><small>node()</small></td><td rowspan="1" colspan="1"><small>node()</small></td><td rowspan="1" colspan="1"><small>&fn_nodebefore;</small></td><td rowspan="1" colspan="1"><small>&xs_boolean;</small></td>
    </tr>

    <tr>
    <td rowspan="1"
    colspan="1"><small><emph>fs:</emph><code>node-after</code>(A,
    B)</small></td><td rowspan="1"
    colspan="1"><small>node()</small></td><td rowspan="1"
    colspan="1"><small>node()</small></td><td rowspan="1"
    colspan="1"><small>&fn_nodeafter;</small></td><td rowspan="1"
    colspan="1"><small>&xs_boolean;</small></td>
    </tr>

    </tbody></table>

<table border="1" summary="Unary operators">
<caption>Unary Operators</caption>
<tbody>
<tr>
<th><small>Internal Function</small></th>
<th><small>&gr_AtomicType1;</small></th>
<th><small>Denotes</small></th>
<th><small>&gr_AtomicType3;</small></th>
</tr>

<tr><td><small>&fs_unary_plus;(A)</small></td><td><small>&xs_integer;</small></td><td><small>op:numeric-unary-plus(A)</small></td><td><small>&xs_integer;</small></td></tr>
<tr><td><small>&fs_unary_plus;(A)</small></td><td><small>&xs_decimal;</small></td><td><small>op:numeric-unary-plus(A)</small></td><td><small>&xs_decimal;</small></td></tr>
<tr><td><small>&fs_unary_plus;(A)</small></td><td><small>&xs_float;</small></td><td><small>op:numeric-unary-plus(A)</small></td><td><small>&xs_float;</small></td></tr>
<tr><td><small>&fs_unary_plus;(A)</small></td><td><small>&xs_double;</small></td><td><small>op:numeric-unary-plus(A)</small></td><td><small>&xs_double;</small></td></tr>

<tr><td><small>&fs_unary_minus;(A)</small></td><td><small>&xs_integer;</small></td><td><small>op:numeric-unary-minus(A)</small></td><td><small>&xs_integer;</small></td></tr>
<tr><td><small>&fs_unary_minus;(A)</small></td><td><small>&xs_decimal;</small></td><td><small>op:numeric-unary-minus(A)</small></td><td><small>&xs_decimal;</small></td></tr>
<tr><td><small>&fs_unary_minus;(A)</small></td><td><small>&xs_float;</small></td><td><small>op:numeric-unary-minus(A)</small></td><td><small>&xs_float;</small></td></tr>
<tr><td><small>&fs_unary_minus;(A)</small></td><td><small>&xs_double;</small></td><td><small>op:numeric-unary-minus(A)</small></td><td><small>&xs_double;</small></td></tr>

</tbody>
</table>
  </div2>
</div1>
