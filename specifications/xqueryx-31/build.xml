<?xml version="1.0" encoding='utf-8'?>
<project name="xqueryx" default="all" basedir=".">

<!-- Import a bunch of global property definitions -->
  <dirname property="etc.dir" file="../../etc/*"/>
  <import file="${etc.dir}/build-constants.xml"/>

<!-- Set properties for "this" document's build requirements -->
  <property name="generic-shortname" value="xqueryx"/>
  <property name="this-spec-version-code" value="31"/>
  <property name="spec.style" value="../../style/xsl-query-2016.xsl"/>

  <property name="spec.code" value="XQX${this-spec-version-code}"/>
  <property name="shortname" value="${generic-shortname}-${this-spec-version-code}"/>
  <property name="spec.uri" value="${W3C.TR}/${shortname}/"/>
  <property name="spec.xml" value="${src.dir}/${generic-shortname}.xml"/>
  <property name="skiptidy" value="true"/>

  <!-- 2008-09-03, Jim: The following property has no meaning at present,     -->
  <!--   because we do not build errata in the qtspecs tree. Maybe later...   -->
<!--  <property name="errata.xml" value="${src.dir}/${generic-shortname}-errata.xml"/> -->

<!-- Import target, etc. definitions that work globally -->
  <import file="${etc.dir}/build-impl.xml"/>

<!-- Recall that any targets defined herein override targets of the same name -->
<!--   that are defined in build-impl.xml.  If you cannot find a target of a  -->
<!--   given name in this file, look in build-impl.xml.                       -->

<!-- ======================================================================== -->

  <!-- additional properties -->

  <property name="assemble-spec-file" value="${local.style.dir}/assemble-xqueryx.xsl"/>

<!-- ====================================================================== -->

  <!-- The "help" template displays on the message medium the names of the    -->
  <!--   various targets in this project and their purposes.                  -->
  <target name="help">
    <echo message="This project to build ${shortname} includes a number of targets."/>
    <echo message="To invoke any of these targets from the command line, use 'ant target-name'"/>
    <echo message="  all -- the default target (target-name not required); builds 'everything'"/>
    <echo message="  chk.spec -- determines whether the spec HTML must be created"/>
    <echo message="  -style-spec -- transforms the document sources into near-pubrules-ready HTML (ordinary and diff docs)"/>
    <echo message="  -copy-xml -- creates final XML source file from assembled source file"/>
    <echo message="  namespacedocs -- Causes namespace doc to be created"/>
    <echo message="  chk.namespacedocs -- checks whether the namespace document must be built"/>
    <echo message="  stage -- stages the contents of the .../html/ directory for publication"/>
    <echo message="  stage-nsdocs -- stages the namespace document contents of the .../html/ directory for publication"/>
    <echo message="The targets that are most likely to be desired from the command line are 'all', '-stylespec' and 'namespacedoc'."/>
  </target>

<!-- ======================================================================== -->

  <!-- Overrides global template -->
  <target name="all"
          depends="clean, spec, namespacedocs"
          description="This is the default target. ">
  </target>

<!-- ======================================================================== -->

  <!-- Overrides internal template -->
  <target name="chk.spec" depends="specinit">
<echo message="Target chk.spec starting"/>
    <condition property="spec.exists">
      <uptodate targetfile="${spec.html}">
         <srcfiles file="${base.dir}/build.xml"/>
         <srcfiles file="${etc.dir}/build-constants.xml"/>
         <srcfiles file="${etc.dir}/build-impl.xml"/>
         <srcfiles file="${etc.dir}/status-entities.dtd"/>
         <srcfiles file="${etc.dir}/status-general.xml"/>
         <srcfiles file="${etc.dir}/xsl-query-bibl.xml"/>
         <srcfiles dir="${src.dir}" includes="**/*.xml"/>
         <srcfiles dir="${src.dir}" includes="*.xsl"/>
         <srcfiles dir="${src.dir}" includes="*.xsd"/>
         <srcfiles file="${assemble-spec-file}"/>
         <srcfiles file="${shared.style.dir}/xsl-query-2016.xsl"/>
         <srcfiles file="${shared.style.dir}/xmlspec-2016.xsl"/>
         <srcfiles file="${local.style.dir}/xqueryx-diff.xsl"/>
         <srcfiles file="${shared.style.dir}/assemble-spec.xsl"/>
         <srcfiles file="${shared.schema.dir}/xsl-query.dtd"/>
         <srcfiles file="${shared.schema.dir}/xmlspec.dtd"/>
         <srcfiles file="${shared.schema.dir}/elements.dtd"/>
         <srcfiles file="${shared.schema.dir}/tree-diagram.dtd"/>
      </uptodate>
    </condition>
  </target>

<!-- ======================================================================== -->

  <target name="-style-spec" depends="specinit,chk.spec,validate-spec"
          if="build.spec" unless="spec.exists">
<echo message="Building ${shortname} ..."/>

    <!-- The assembly step is used to bring together all of the source files  -->
    <!--   that are incorporated by using entity references, but also to      -->
    <!--   transform grammar-related productions into XML elements that can   -->
    <!--   be readily rendered into a form needed in the HTML document.       -->
<echo message="Creating ${generic-shortname}-assembled.xml"/>
    <xslt in="${spec.xml}" out="${build.dir}/${generic-shortname}-assembled.xml"
          style="${assemble-spec-file}"
          classpathref="saxon9.classpath" force="yes">
      <factory name="net.sf.saxon.TransformerFactoryImpl">
        <attribute name="http://saxon.sf.net/feature/generateByteCode" value="false"/>
      </factory>
      <param name="spec" expression="xqueryx"/>
    </xslt>

<echo message="Validating ${generic-shortname}-assembled.xml"/>
    <xmlvalidate file="${build.dir}/${generic-shortname}-assembled.xml" 
                 failonerror="yes" lenient="no" warn="yes"/>

<echo message="Transforming ${generic-shortname}-assembled.xml"/>
    <xslt in="${build.dir}/${generic-shortname}-assembled.xml"
          out="${build.dir}/${generic-shortname}-html.xml"
          style="${spec.style}"
          classpathref="saxon9.classpath" force="yes">
      <factory name="net.sf.saxon.TransformerFactoryImpl">
        <attribute name="http://saxon.sf.net/feature/generateByteCode" value="false"/>
      </factory>
      <param name="spec" expression="xqueryx"/>
      <param name="kwFull" expression="brief"/>
      <param name="kwSort" expression="cluster"/>
    </xslt>

<!-- 2009-11-25, Jim: Added param to pass DSTAMP and TSTAMP properties -->
<echo message="Fixing up ${generic-shortname}.html"/>
    <xslt in="${build.dir}/${generic-shortname}-html.xml"
          out="${build.dir}/${generic-shortname}-html-fix.xml"
          style="${shared.style.dir}/html-fix.xsl"
          classpathref="saxon9.classpath" force="yes">
      <factory name="net.sf.saxon.TransformerFactoryImpl">
        <attribute name="http://saxon.sf.net/feature/generateByteCode" value="false"/>
      </factory>
      <param name="currentDateTime" expression="${DSTAMP} ${TSTAMP}"/>
    </xslt>

    <antcall target="xml-to-html5">
      <param name="xml-to-html5.input" value="${build.dir}/${generic-shortname}-html-fix.xml"/>
      <param name="xml-to-html5.output" value="${dist.dir}/Overview.html"/>
    </antcall>

<echo message="Transforming ${generic-shortname}-assembled.xml with diffs"/>
    <xslt in="${build.dir}/${generic-shortname}-assembled.xml"
          out="${build.dir}/${generic-shortname}-html-diff.xml"
          style="${spec.style}"
          classpathref="saxon9.classpath" force="yes">
      <factory name="net.sf.saxon.TransformerFactoryImpl">
        <attribute name="http://saxon.sf.net/feature/generateByteCode" value="false"/>
      </factory>
      <param name="spec" expression="${generic-shortname}"/>
      <param name="kwFull" expression="brief"/>
      <param name="kwSort" expression="cluster"/>
      <param name="currentDateTime" expression="${DSTAMP} ${TSTAMP}"/>
      <param name="show-markup" expression="1"/>
    </xslt>

<!-- 2009-11-25, Jim: Added param to pass DSTAMP and TSTAMP properties -->
<echo message="Fixing up xqueryx-diffs.html"/>
    <xslt in="${build.dir}/${generic-shortname}-html-diff.xml"
          out="${build.dir}/${generic-shortname}-html-diff-fix.xml"
          style="${shared.style.dir}/html-fix.xsl"
          classpathref="saxon9.classpath" force="yes">
      <factory name="net.sf.saxon.TransformerFactoryImpl">
        <attribute name="http://saxon.sf.net/feature/generateByteCode" value="false"/>
      </factory>
      <param name="currentDateTime" expression="${DSTAMP} ${TSTAMP}"/>
    </xslt>

    <antcall target="xml-to-html5">
      <param name="xml-to-html5.input" value="${build.dir}/${generic-shortname}-html-diff-fix.xml"/>
      <param name="xml-to-html5.output" value="${dist.dir}/Overview-diff.html"/>
    </antcall>

    <copy file="${src.dir}/xqueryx.xsd"
          tofile="${dist.dir}/xqueryx.xsd"/>
    <copy file="${src.dir}/xqueryx.xsl"
          tofile="${dist.dir}/xqueryx.xsl"/>
  </target>

<!-- ======================================================================== -->

  <!-- Overrides internal template -->
  <target name="-copy-xml" depends="specinit,chk.spec"
          if="build.spec" unless="spec.exists">
    <echo message="Copying XML for ${shortname}..." />

    <xslt in="${build.dir}/${generic-shortname}-assembled.xml"
          out="${dist.dir}/${shortname}.xml"
          style="${shared.style.dir}/identity.xsl" force="yes"
          classpathref="saxon9.classpath">
      <factory name="net.sf.saxon.TransformerFactoryImpl">
        <attribute name="http://saxon.sf.net/feature/generateByteCode" value="false"/>
      </factory>
    </xslt>
  </target>

<!-- ======================================================================== -->

  <!-- Overrides global template to check/build specific namespace documents  -->
  <target name="namespacedocs"
          depends="chk.namespacedocs, ns-xqueryx"/>

  <!-- Overrides global template to check/build specific namespace documents  -->
  <target name="chk.namespacedocs"
          depends="chk.ns-xqueryx"/>

<!-- ======================================================================== -->

  <target name="chk.ns-xqueryx" depends="specinit">
    <uptodate property="ns-xqueryx.exists"
              targetfile="${dist.dir}/ns-xqueryx.html">
      <srcfiles file="${base.dir}/build.xml"/>
      <srcfiles file="${etc.dir}/build-constants.xml"/>
      <srcfiles file="${etc.dir}/build-impl.xml"/>
      <srcfiles file="${etc.dir}/status-entities.dtd"/>
      <srcfiles file="${etc.dir}/status-general.xml"/>
      <srcfiles file="${etc.dir}/xsl-query-bibl.xml"/>
      <srcfiles file="${src.dir}/ns-queryx.xml"/>
      <srcfiles file="${shared.style.dir}/xsl-query-2016.xsl"/>
      <srcfiles file="${shared.style.dir}/xmlspec-2016.xsl"/>
      <srcfiles file="${shared.style.dir}/ns-blank.xsl"/>
      <srcfiles file="${shared.schema.dir}/xsl-query.dtd"/>
      <srcfiles file="${shared.schema.dir}/xmlspec.dtd"/>
      <srcfiles file="${shared.schema.dir}/elements.dtd"/>
      <srcfiles file="${shared.schema.dir}/tree-diagram.dtd"/>
      <srcfiles file="${shared.schema.dir}/qtnamespaces.dtd"/>
    </uptodate>
  </target>

<!-- ======================================================================== -->

  <target name="ns-xqueryx"
          depends="specinit, chk.ns-xqueryx"
          unless="ns-xqueryx.exists">
    <echo message="Building namespace document for xqueryx namespace..." />
    <!-- set some parameter and call common target to build doc -->
    <antcall target="build-namespace-document">
      <param name="nsdoc.file.name" value="ns-xqueryx"/>
      <param name="nsdoc.doc.URI" value="http://www.w3.org/2005/xqueryx"/>
      <param name="nsdoc.stylesheet" value="${shared.style.dir}/ns-blank.xsl"/>
    </antcall>
  </target>



<!-- **************************************************************************************
The following <target>s are all concerned with staging documents for publication. 
     ************************************************************************************** -->

<!-- **************************************************************************************
     MAIN DOCUMENT STAGING
     ************************************************************************************** -->

<!-- **************************************************************************************
THE FOLLOWING <target> MUST BE MANUALLY EDITED:
  There must be one <copy> task for each of the files (NON-binary and BINARY) to be placed
    into the staging directory. 
  The <property name="nonbinary-files"> task must contain the exact list of the names of
    the NON-binary files that have been placed into the staging directory.  The list is
    permitted to use wildcards such as *.html. 
  The <property name="binary-files"> task must contain the exact list of the names of
    the BINARY files that have been placed into the staging directory.  The list is
    permitted to use wildcards such as *.jpg. 
  Please note that the value of each <property> list MUST NOT BE EMPTY!  If there are
    NO NON-binary or NO BINARY files to include, there MUST be a filename for which
    there is no actual file (e.g., x.x)!
     ************************************************************************************** -->
  <target name="stage-copy">
    <copy file="${dist.dir}/Overview.html"
          tofile="${staging.directory}/Overview.html"/>
    <copy file="${dist.dir}/Overview-diff.html"
          tofile="${staging.directory}/${shortname}-diff.html"/>
    <copy file="${dist.dir}/${shortname}.xml"
          tofile="${staging.directory}/${shortname}.xml"/>
    <copy file="${dist.dir}/xqueryx.xsd"
          tofile="${staging.directory}/xqueryx.xsd"/>
    <copy file="${dist.dir}/xqueryx.xsl"
          tofile="${staging.directory}/xqueryx.xsl"/>

    <!-- checkin.staged.stuff is in .../qtspecs/etc/build-impl.xml -->
    <antcall target="checkin.staged.stuff">
      <param name="staging.directory"
             value="${staging.directory}/"/>
      <param name="staging.localdirname"
             value="${staging.localdirname}/"/>
      <param name="nonbinary-files" value="Overview.html
                     ${shortname}-diff.html
                     ${shortname}.xml
                     xqueryx.xsd
                     xqueryx.xsl"/>
      <param name="binary-files" value="x.x"/>
    </antcall>
  </target>

  <!-- ====================================================================== -->

<!-- **************************************************************************************
     NAMESPACE DOCUMENT STAGING
     ************************************************************************************** -->

<!-- **************************************************************************************
THE FOLLOWING <target> MUST BE MANUALLY EDITED:
  There must be one <antcall> task for each namespace document being published.
  There must also be one <target> for each namespace document being published.
     ************************************************************************************** -->
  <target name="stage-nsdocs"
          description="Stage XQueryX namespace documents for publication">
<!-- ************************************************************************************** -->
    <antcall target="stage-ns-xqueryx"/>
<!-- ************************************************************************************** -->
  </target>

  <!-- ====================================================================== -->

  <target name="stage-ns-xqueryx"
          description="Stage XQueryX xqueryx namespace document for publication">
    <antcall target="stage-a-nsdoc">
<!-- The "nsname" parameter specifies the common name of the namespace, which (when prefixed
     with "ns-" and suffixed with ".xml") identifies the filename of the namespace document -->
      <param name="nsname"
             value="xqueryx"/>
<!-- The "namespace.fullname" parameter specifies the actual namespace name ("URI") of the
     namespace.  However, in order to make staging the namespace documents easier, the leading
     "http://www.w3.org" must be replaced by "WWW" -->
      <param name="namespace.fullname"
              value="WWW/2005/xqueryx"/>
    </antcall>
  </target>

<!-- **************************************************************************************
The preceding <target>s are all concerned with staging documents for publication. 
     ************************************************************************************** -->

</project>
