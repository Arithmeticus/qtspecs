/* Generated By:JJTree&JavaCC: Do not edit this line. XParser.java */
        package org.w3c.xqparser;

        import org.w3c.xqparser.Node;
        import org.w3c.xqparser.SimpleNode;
        import java.util.Stack;

        public class XParser/*@bgen(jjtree)*/implements XParserTreeConstants, XParserConstants {/*@bgen(jjtree)*/
  protected JJTXParserState jjtree = new JJTXParserState();
            Stack _elementStack = new Stack();

            Stack binaryTokenStack = new Stack();

            void processToken(SimpleNode n, Token t)
            {


                n.processToken(t);
            }

  final public SimpleNode START() throws ParseException {
         /*@bgen(jjtree) START */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expr();
      jj_consume_token(0);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              if(this.token_source.curLexState == XParserConstants.EXPR_COMMENT)
                {if (true) throw new ParseException("Unterminated comment.");}
            {if (true) return jjtn000 ;}
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ModuleDecl() throws ParseException {
         /*@bgen(jjtree) ModuleDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTMODULEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(1);
      jj_consume_token(2);
      NCName();
      jj_consume_token(3);
      URILiteral();
      Separator();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void Separator() throws ParseException {
         /*@bgen(jjtree) Separator */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSEPARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(4);
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void DefaultCollationDecl() throws ParseException {
         /*@bgen(jjtree) DefaultCollationDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTDEFAULTCOLLATIONDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(5);
      jj_consume_token(6);
      jj_consume_token(7);
      URILiteral();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void BaseURIDecl() throws ParseException {
         /*@bgen(jjtree) BaseURIDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTBASEURIDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(5);
      jj_consume_token(8);
      URILiteral();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ConstructionDecl() throws ParseException {
         /*@bgen(jjtree) ConstructionDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCONSTRUCTIONDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(5);
      jj_consume_token(9);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 10:
        jj_consume_token(10);
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtc000 = false;
                                              jjtn000.processValue("strip");
        break;
      case 11:
        jj_consume_token(11);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             jjtn000.processValue("preserve");
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void OrderingModeDecl() throws ParseException {
         /*@bgen(jjtree) OrderingModeDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTORDERINGMODEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(5);
      jj_consume_token(12);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
        jj_consume_token(13);
                                             jjtree.closeNodeScope(jjtn000, true);
                                             jjtc000 = false;
                                            jjtn000.processValue("ordered");
        break;
      case 14:
        jj_consume_token(14);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              jjtn000.processValue("unordered");
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void EmptyOrderDecl() throws ParseException {
         /*@bgen(jjtree) EmptyOrderDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTEMPTYORDERDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(5);
      jj_consume_token(6);
      jj_consume_token(15);
      jj_consume_token(16);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Greatest:
        jj_consume_token(Greatest);
                                                             SimpleNode jjtn001 = new SimpleNode(this, JJTGREATEST);
                                                             boolean jjtc001 = true;
                                                             jjtree.openNodeScope(jjtn001);
        try {
                                                             jjtree.closeNodeScope(jjtn001,  true);
                                                             jjtc001 = false;
                                                            processToken(jjtn001, token);
        } finally {
                                                             if (jjtc001) {
                                                               jjtree.closeNodeScope(jjtn001,  true);
                                                             }
        }
        break;
      case Least:
        jj_consume_token(Least);
                           SimpleNode jjtn002 = new SimpleNode(this, JJTLEAST);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
        try {
                           jjtree.closeNodeScope(jjtn002,  true);
                           jjtc002 = false;
                          processToken(jjtn002, token);
        } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002,  true);
                           }
        }
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void CopyNamespacesDecl() throws ParseException {
         /*@bgen(jjtree) CopyNamespacesDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOPYNAMESPACESDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(5);
      jj_consume_token(17);
      PreserveMode();
      jj_consume_token(18);
      InheritMode();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void PreserveMode() throws ParseException {
         /*@bgen(jjtree) PreserveMode */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPRESERVEMODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 11:
        jj_consume_token(11);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.processValue("preserve");
        break;
      case 19:
        jj_consume_token(19);
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                jjtn000.processValue("no-preserve");
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void InheritMode() throws ParseException {
         /*@bgen(jjtree) InheritMode */
  SimpleNode jjtn000 = new SimpleNode(this, JJTINHERITMODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
        jj_consume_token(20);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.processValue("inherit");
        break;
      case 21:
        jj_consume_token(21);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                               jjtn000.processValue("no-inherit");
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void SchemaImport() throws ParseException {
         /*@bgen(jjtree) SchemaImport */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSCHEMAIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(22);
      jj_consume_token(23);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 6:
        SchemaPrefix();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      URILiteral();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
        jj_consume_token(24);
        URILiteral();
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 18:
            ;
            break;
          default:
            jj_la1[6] = jj_gen;
            break label_1;
          }
          jj_consume_token(18);
          URILiteral();
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void SchemaPrefix() throws ParseException {
         /*@bgen(jjtree) SchemaPrefix */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSCHEMAPREFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
        jj_consume_token(2);
        NCName();
        jj_consume_token(3);
        break;
      case 6:
        jj_consume_token(6);
        jj_consume_token(25);
        jj_consume_token(2);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ModuleImport() throws ParseException {
         /*@bgen(jjtree) ModuleImport */
  SimpleNode jjtn000 = new SimpleNode(this, JJTMODULEIMPORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(22);
      jj_consume_token(1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
        jj_consume_token(2);
        NCName();
        jj_consume_token(3);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      URILiteral();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
        jj_consume_token(24);
        URILiteral();
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 18:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_2;
          }
          jj_consume_token(18);
          URILiteral();
        }
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void NamespaceDecl() throws ParseException {
         /*@bgen(jjtree) NamespaceDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTNAMESPACEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(5);
      jj_consume_token(2);
      NCName();
      jj_consume_token(3);
      URILiteral();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void DefaultNamespaceDecl() throws ParseException {
         /*@bgen(jjtree) DefaultNamespaceDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTDEFAULTNAMESPACEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(5);
      jj_consume_token(6);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
        jj_consume_token(25);
                                           jjtn000.processValue("element");
        break;
      case 26:
        jj_consume_token(26);
                             jjtn000.processValue("function");
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(2);
      URILiteral();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void VarDecl() throws ParseException {
         /*@bgen(jjtree) VarDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTVARDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(5);
      jj_consume_token(27);
      jj_consume_token(28);
      QName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
        TypeDeclaration();
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 29:
        jj_consume_token(29);
        ExprSingle();
        break;
      case External:
        jj_consume_token(External);
                SimpleNode jjtn001 = new SimpleNode(this, JJTEXTERNAL);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
        try {
                jjtree.closeNodeScope(jjtn001,  true);
                jjtc001 = false;
               processToken(jjtn001, token);
        } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  true);
                }
        }
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void FunctionDecl() throws ParseException {
         /*@bgen(jjtree) FunctionDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFUNCTIONDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(5);
      jj_consume_token(26);
      FunctionQName();
      jj_consume_token(30);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 28:
        ParamList();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(31);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
        jj_consume_token(32);
        SequenceType();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Lbrace:
        EnclosedExpr();
        break;
      case External:
        jj_consume_token(External);
                              SimpleNode jjtn001 = new SimpleNode(this, JJTEXTERNAL);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
        try {
                              jjtree.closeNodeScope(jjtn001,  true);
                              jjtc001 = false;
                             processToken(jjtn001, token);
        } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  true);
                              }
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ParamList() throws ParseException {
         /*@bgen(jjtree) ParamList */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPARAMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Param();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 18:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_3;
        }
        jj_consume_token(18);
        Param();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void Param() throws ParseException {
         /*@bgen(jjtree) Param */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPARAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(28);
      QName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
        TypeDeclaration();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void EnclosedExpr() throws ParseException {
         /*@bgen(jjtree) EnclosedExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTENCLOSEDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(Lbrace);
                      SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
      try {
                      jjtree.closeNodeScope(jjtn001,  true);
                      jjtc001 = false;
                     processToken(jjtn001, token);
      } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  true);
                      }
      }
      Expr();
      jj_consume_token(Rbrace);
                                                                                   SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                                   boolean jjtc002 = true;
                                                                                   jjtree.openNodeScope(jjtn002);
      try {
                                                                                   jjtree.closeNodeScope(jjtn002,  true);
                                                                                   jjtc002 = false;
                                                                    processToken(jjtn002, token);
      } finally {
                                                                                   if (jjtc002) {
                                                                                     jjtree.closeNodeScope(jjtn002,  true);
                                                                                   }
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void OptionDecl() throws ParseException {
         /*@bgen(jjtree) OptionDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTOPTIONDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(5);
      jj_consume_token(33);
      QName();
      jj_consume_token(StringLiteral);
                                                        SimpleNode jjtn001 = new SimpleNode(this, JJTSTRINGLITERAL);
                                                        boolean jjtc001 = true;
                                                        jjtree.openNodeScope(jjtn001);
      try {
                                                        jjtree.closeNodeScope(jjtn001,  true);
                                                        jjtc001 = false;
                                                       processToken(jjtn001, token);
      } finally {
                                                        if (jjtc001) {
                                                          jjtree.closeNodeScope(jjtn001,  true);
                                                        }
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void Expr() throws ParseException {
         /*@bgen(jjtree) Expr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ExprSingle();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 18:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_4;
        }
        jj_consume_token(18);
        ExprSingle();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ExprSingle() throws ParseException {
    if (jj_2_1(2)) {
      FLWORExpr10();
    } else if (jj_2_2(2)) {
      QuantifiedExpr();
    } else if (jj_2_3(2)) {
      TypeswitchExpr();
    } else if (jj_2_4(2)) {
      IfExpr();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 30:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 44:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 65:
      case 66:
      case 67:
      case 68:
      case Greatest:
      case Least:
      case External:
      case Ascending:
      case Descending:
      case PragmaOpen:
      case IntegerLiteral:
      case DecimalLiteral:
      case DoubleLiteral:
      case StringLiteral:
      case QNameToken:
        OrExpr();
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void FLWORExpr10() throws ParseException {
         /*@bgen(jjtree) FLWORExpr10 */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFLWOREXPR10);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 35:
        ForClause();
        break;
      case 37:
        LetClause();
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(34);
      ExprSingle();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ForClause() throws ParseException {
         /*@bgen(jjtree) ForClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFORCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(35);
      jj_consume_token(28);
      VarName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
        TypeDeclaration();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
        PositionalVar();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      jj_consume_token(36);
      ExprSingle();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void PositionalVar() throws ParseException {
         /*@bgen(jjtree) PositionalVar */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPOSITIONALVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(24);
      jj_consume_token(28);
      VarName();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void LetClause() throws ParseException {
         /*@bgen(jjtree) LetClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTLETCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(37);
      jj_consume_token(28);
      VarName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
        TypeDeclaration();
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(29);
      ExprSingle();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void OrderByClause() throws ParseException {
         /*@bgen(jjtree) OrderByClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTORDERBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 15:
        jj_consume_token(15);
        jj_consume_token(38);
        break;
      case 39:
        jj_consume_token(39);
             jjtn000.processValue("stable");
        jj_consume_token(15);
        jj_consume_token(38);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      OrderSpecList();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void OrderSpecList() throws ParseException {
         /*@bgen(jjtree) OrderSpecList */
  SimpleNode jjtn000 = new SimpleNode(this, JJTORDERSPECLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OrderSpec();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 18:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_5;
        }
        jj_consume_token(18);
        OrderSpec();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void OrderSpec() throws ParseException {
         /*@bgen(jjtree) OrderSpec */
  SimpleNode jjtn000 = new SimpleNode(this, JJTORDERSPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ExprSingle();
      OrderModifier();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void OrderModifier() throws ParseException {
         /*@bgen(jjtree) OrderModifier */
  SimpleNode jjtn000 = new SimpleNode(this, JJTORDERMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Ascending:
      case Descending:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Ascending:
          jj_consume_token(Ascending);
                           SimpleNode jjtn001 = new SimpleNode(this, JJTASCENDING);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
          try {
                           jjtree.closeNodeScope(jjtn001,  true);
                           jjtc001 = false;
                          processToken(jjtn001, token);
          } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  true);
                           }
          }
          break;
        case Descending:
          jj_consume_token(Descending);
                                SimpleNode jjtn002 = new SimpleNode(this, JJTDESCENDING);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
          try {
                                jjtree.closeNodeScope(jjtn002,  true);
                                jjtc002 = false;
                               processToken(jjtn002, token);
          } finally {
                                if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002,  true);
                                }
          }
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        jj_consume_token(16);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Greatest:
          jj_consume_token(Greatest);
                                                                                                        SimpleNode jjtn003 = new SimpleNode(this, JJTGREATEST);
                                                                                                        boolean jjtc003 = true;
                                                                                                        jjtree.openNodeScope(jjtn003);
          try {
                                                                                                        jjtree.closeNodeScope(jjtn003,  true);
                                                                                                        jjtc003 = false;
                                                                                     processToken(jjtn003, token);
          } finally {
                                                                                                        if (jjtc003) {
                                                                                                          jjtree.closeNodeScope(jjtn003,  true);
                                                                                                        }
          }
          break;
        case Least:
          jj_consume_token(Least);
                           SimpleNode jjtn004 = new SimpleNode(this, JJTLEAST);
                           boolean jjtc004 = true;
                           jjtree.openNodeScope(jjtn004);
          try {
                           jjtree.closeNodeScope(jjtn004,  true);
                           jjtc004 = false;
                          processToken(jjtn004, token);
          } finally {
                           if (jjtc004) {
                             jjtree.closeNodeScope(jjtn004,  true);
                           }
          }
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 7:
        jj_consume_token(7);
        URILiteral();
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void QuantifiedExpr() throws ParseException {
         /*@bgen(jjtree) QuantifiedExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTQUANTIFIEDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
        jj_consume_token(40);
                    jjtn000.processValue("some");
        break;
      case 41:
        jj_consume_token(41);
                          jjtn000.processValue("every");
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(28);
      VarName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
        TypeDeclaration();
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      jj_consume_token(36);
      ExprSingle();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 18:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_6;
        }
        jj_consume_token(18);
        jj_consume_token(28);
        VarName();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 32:
          TypeDeclaration();
          break;
        default:
          jj_la1[36] = jj_gen;
          ;
        }
        jj_consume_token(36);
        ExprSingle();
      }
      jj_consume_token(42);
      ExprSingle();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void TypeswitchExpr() throws ParseException {
         /*@bgen(jjtree) TypeswitchExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTYPESWITCHEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(43);
      jj_consume_token(30);
      Expr();
      jj_consume_token(31);
      label_7:
      while (true) {
        CaseClause();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 44:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_7;
        }
      }
      jj_consume_token(6);
      jj_consume_token(28);
      VarName();
      jj_consume_token(34);
      ExprSingle();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void CaseClause() throws ParseException {
         /*@bgen(jjtree) CaseClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCASECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(44);
      jj_consume_token(28);
      VarName();
      jj_consume_token(32);
      SequenceType();
      jj_consume_token(34);
      ExprSingle();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void IfExpr() throws ParseException {
         /*@bgen(jjtree) IfExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTIFEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(45);
      jj_consume_token(30);
      Expr();
      jj_consume_token(31);
      jj_consume_token(46);
      ExprSingle();
      jj_consume_token(47);
      ExprSingle();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void OperatorExpr() throws ParseException {
    OrExpr();
  }

  final public void OrExpr() throws ParseException {
             /*@bgen(jjtree) #OrExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTOREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AndExpr();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 48:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_8;
        }
        jj_consume_token(48);
                        binaryTokenStack.push(token);
        AndExpr();
                  SimpleNode jjtn001 = new SimpleNode(this, JJTOREXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                    try
                    {
                        processToken(jjtn001, (Token)binaryTokenStack.pop());
                    }
                    catch(java.util.EmptyStackException e)
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        {if (true) throw e;}
                    }
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
    }
  }

  final public void AndExpr() throws ParseException {
             /*@bgen(jjtree) #AndExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTANDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      CastableExpr();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 49:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_9;
        }
        jj_consume_token(49);
                        binaryTokenStack.push(token);
        CastableExpr();
                  SimpleNode jjtn001 = new SimpleNode(this, JJTANDEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                    try
                    {
                        processToken(jjtn001, (Token)binaryTokenStack.pop());
                    }
                    catch(java.util.EmptyStackException e)
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        {if (true) throw e;}
                    }
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
    }
  }

  final public void CastableExpr() throws ParseException {
             /*@bgen(jjtree) #CastableExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCASTABLEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      CastExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        jj_consume_token(50);
        jj_consume_token(32);
        SingleType();
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
    }
  }

  final public void CastExpr() throws ParseException {
             /*@bgen(jjtree) #CastExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCASTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ValueExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 51:
        jj_consume_token(51);
        jj_consume_token(32);
        SingleType();
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
    }
  }

  final public void ValueExpr() throws ParseException {
    if (jj_2_5(2)) {
      ValidateExpr();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 30:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 44:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 65:
      case 66:
      case 67:
      case 68:
      case Greatest:
      case Least:
      case External:
      case Ascending:
      case Descending:
      case IntegerLiteral:
      case DecimalLiteral:
      case DoubleLiteral:
      case StringLiteral:
      case QNameToken:
        StepExpr();
        break;
      case PragmaOpen:
        ExtensionExpr();
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ValidateExpr() throws ParseException {
         /*@bgen(jjtree) ValidateExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTVALIDATEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(52);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
      case 54:
        ValidationMode();
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
      jj_consume_token(Lbrace);
                                                    SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
                                                    boolean jjtc001 = true;
                                                    jjtree.openNodeScope(jjtn001);
      try {
                                                    jjtree.closeNodeScope(jjtn001,  true);
                                                    jjtc001 = false;
                                                   processToken(jjtn001, token);
      } finally {
                                                    if (jjtc001) {
                                                      jjtree.closeNodeScope(jjtn001,  true);
                                                    }
      }
      Expr();
      jj_consume_token(Rbrace);
                                                                                                                 SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                                                                 boolean jjtc002 = true;
                                                                                                                 jjtree.openNodeScope(jjtn002);
      try {
                                                                                                                 jjtree.closeNodeScope(jjtn002,  true);
                                                                                                                 jjtc002 = false;
                                                                                                  processToken(jjtn002, token);
      } finally {
                                                                                                                 if (jjtc002) {
                                                                                                                   jjtree.closeNodeScope(jjtn002,  true);
                                                                                                                 }
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ValidationMode() throws ParseException {
         /*@bgen(jjtree) ValidationMode */
  SimpleNode jjtn000 = new SimpleNode(this, JJTVALIDATIONMODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        jj_consume_token(53);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.processValue("lax");
        break;
      case 54:
        jj_consume_token(54);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           jjtn000.processValue("strict");
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ExtensionExpr() throws ParseException {
         /*@bgen(jjtree) ExtensionExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTEXTENSIONEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_10:
      while (true) {
        Pragma();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PragmaOpen:
          ;
          break;
        default:
          jj_la1[45] = jj_gen;
          break label_10;
        }
      }
      jj_consume_token(Lbrace);
                                   SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
      try {
                                   jjtree.closeNodeScope(jjtn001,  true);
                                   jjtc001 = false;
                                  processToken(jjtn001, token);
      } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  true);
                                   }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 30:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 65:
      case 66:
      case 67:
      case 68:
      case Greatest:
      case Least:
      case External:
      case Ascending:
      case Descending:
      case PragmaOpen:
      case IntegerLiteral:
      case DecimalLiteral:
      case DoubleLiteral:
      case StringLiteral:
      case QNameToken:
        Expr();
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
      jj_consume_token(Rbrace);
                                                                                                  SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                                                  boolean jjtc002 = true;
                                                                                                  jjtree.openNodeScope(jjtn002);
      try {
                                                                                                  jjtree.closeNodeScope(jjtn002,  true);
                                                                                                  jjtc002 = false;
                                                                                   processToken(jjtn002, token);
      } finally {
                                                                                                  if (jjtc002) {
                                                                                                    jjtree.closeNodeScope(jjtn002,  true);
                                                                                                  }
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void Pragma() throws ParseException {
         /*@bgen(jjtree) Pragma */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPRAGMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PragmaOpen);
                          SimpleNode jjtn001 = new SimpleNode(this, JJTPRAGMAOPEN);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
      try {
                          jjtree.closeNodeScope(jjtn001,  true);
                          jjtc001 = false;
                         processToken(jjtn001, token);
      } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001,  true);
                          }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        jj_consume_token(S);
                                                                                SimpleNode jjtn002 = new SimpleNode(this, JJTS);
                                                                                boolean jjtc002 = true;
                                                                                jjtree.openNodeScope(jjtn002);
        try {
                                                                                jjtree.closeNodeScope(jjtn002,  true);
                                                                                jjtc002 = false;
                                                             processToken(jjtn002, token);
        } finally {
                                                                                if (jjtc002) {
                                                                                  jjtree.closeNodeScope(jjtn002,  true);
                                                                                }
        }
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      QName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S:
        jj_consume_token(S);
                                                                                                                                      SimpleNode jjtn003 = new SimpleNode(this, JJTS);
                                                                                                                                      boolean jjtc003 = true;
                                                                                                                                      jjtree.openNodeScope(jjtn003);
        try {
                                                                                                                                      jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                      jjtc003 = false;
                                                                                                          processToken(jjtn003, token);
        } finally {
                                                                                                                                      if (jjtc003) {
                                                                                                                                        jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                      }
        }
        PragmaContents();
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      jj_consume_token(PragmaClose);
                                                                                                                                                                                                              SimpleNode jjtn004 = new SimpleNode(this, JJTPRAGMACLOSE);
                                                                                                                                                                                                              boolean jjtc004 = true;
                                                                                                                                                                                                              jjtree.openNodeScope(jjtn004);
      try {
                                                                                                                                                                                                              jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                              jjtc004 = false;
                                                                                                                                                                         processToken(jjtn004, token);
      } finally {
                                                                                                                                                                                                              if (jjtc004) {
                                                                                                                                                                                                                jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                              }
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void PragmaContents() throws ParseException {
         /*@bgen(jjtree) PragmaContents */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPRAGMACONTENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Char:
          ;
          break;
        default:
          jj_la1[49] = jj_gen;
          break label_11;
        }
        jj_consume_token(Char);
                     SimpleNode jjtn001 = new SimpleNode(this, JJTCHAR);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
        try {
                     jjtree.closeNodeScope(jjtn001,  true);
                     jjtc001 = false;
                    processToken(jjtn001, token);
        } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  true);
                     }
        }
      }
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void StepExpr() throws ParseException {
    if (jj_2_6(3)) {
      PrimaryExpr();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 55:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
        AxisStep();
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void AxisStep() throws ParseException {
         /*@bgen(jjtree) AxisStep */
  SimpleNode jjtn000 = new SimpleNode(this, JJTAXISSTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_7(2)) {
        ReverseStep();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 2:
        case 55:
        case 57:
        case 58:
        case 59:
        case 60:
          ForwardStep();
          break;
        default:
          jj_la1[51] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ForwardStep() throws ParseException {
    ForwardAxis();
    NodeTest();
  }

  final public void ForwardAxis() throws ParseException {
         /*@bgen(jjtree) ForwardAxis */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFORWARDAXIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 55:
        jj_consume_token(55);
            jjtn000.processValue("child");
        jj_consume_token(56);
        break;
      case 57:
        jj_consume_token(57);
                 jjtn000.processValue("descendant");
        jj_consume_token(56);
        break;
      case 58:
        jj_consume_token(58);
                jjtn000.processValue("attribute");
        jj_consume_token(56);
        break;
      case 59:
        jj_consume_token(59);
           jjtn000.processValue("self");
        jj_consume_token(56);
        break;
      case 60:
        jj_consume_token(60);
                         jjtn000.processValue("descendant-or-self");
        jj_consume_token(56);
        break;
      case 2:
        jj_consume_token(2);
                jjtn000.processValue("namespace");
        jj_consume_token(56);
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ReverseStep() throws ParseException {
    ReverseAxis();
    NodeTest();
  }

  final public void ReverseAxis() throws ParseException {
         /*@bgen(jjtree) ReverseAxis */
  SimpleNode jjtn000 = new SimpleNode(this, JJTREVERSEAXIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 61:
        jj_consume_token(61);
             jjtn000.processValue("parent");
        jj_consume_token(56);
        break;
      case 62:
        jj_consume_token(62);
               jjtn000.processValue("ancestor");
        jj_consume_token(56);
        break;
      case 63:
        jj_consume_token(63);
                       jjtn000.processValue("ancestor-or-self");
        jj_consume_token(56);
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void NodeTest() throws ParseException {
         /*@bgen(jjtree) NodeTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTNODETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_8(2)) {
        KindTest();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case Greatest:
        case Least:
        case External:
        case Ascending:
        case Descending:
        case NCNameColonStar:
        case StarColonNCName:
        case QNameToken:
          NameTest();
          break;
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void NameTest() throws ParseException {
         /*@bgen(jjtree) NameTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTNAMETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 65:
      case 66:
      case 67:
      case 68:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case Greatest:
      case Least:
      case External:
      case Ascending:
      case Descending:
      case QNameToken:
        QName();
        break;
      case 64:
      case NCNameColonStar:
      case StarColonNCName:
        Wildcard();
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void Wildcard() throws ParseException {
         /*@bgen(jjtree) Wildcard */
  SimpleNode jjtn000 = new SimpleNode(this, JJTWILDCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 64:
        jj_consume_token(64);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.processValue("*");
        break;
      case NCNameColonStar:
        jj_consume_token(NCNameColonStar);
                                     SimpleNode jjtn001 = new SimpleNode(this, JJTNCNAMECOLONSTAR);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
        try {
                                     jjtree.closeNodeScope(jjtn001,  true);
                                     jjtc001 = false;
                                    processToken(jjtn001, token);
        } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001,  true);
                                     }
        }
        break;
      case StarColonNCName:
        jj_consume_token(StarColonNCName);
                                     SimpleNode jjtn002 = new SimpleNode(this, JJTSTARCOLONNCNAME);
                                     boolean jjtc002 = true;
                                     jjtree.openNodeScope(jjtn002);
        try {
                                     jjtree.closeNodeScope(jjtn002,  true);
                                     jjtc002 = false;
                                    processToken(jjtn002, token);
        } finally {
                                     if (jjtc002) {
                                       jjtree.closeNodeScope(jjtn002,  true);
                                     }
        }
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void PrimaryExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IntegerLiteral:
    case DecimalLiteral:
    case DoubleLiteral:
    case StringLiteral:
      Literal();
      break;
    case 28:
      VarRef();
      break;
    case 30:
      ParenthesizedExpr();
      break;
    default:
      jj_la1[57] = jj_gen;
      if (jj_2_9(2)) {
        FunctionCall();
      } else if (jj_2_10(2)) {
        OrderedExpr();
      } else if (jj_2_11(2)) {
        UnorderedExpr();
      } else if (jj_2_12(2)) {
        Constructor();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IntegerLiteral:
    case DecimalLiteral:
    case DoubleLiteral:
      NumericLiteral();
      break;
    case StringLiteral:
      jj_consume_token(StringLiteral);
                                   SimpleNode jjtn001 = new SimpleNode(this, JJTSTRINGLITERAL);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
      try {
                                   jjtree.closeNodeScope(jjtn001,  true);
                                   jjtc001 = false;
                                  processToken(jjtn001, token);
      } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  true);
                                   }
      }
      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NumericLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IntegerLiteral:
      jj_consume_token(IntegerLiteral);
                               SimpleNode jjtn001 = new SimpleNode(this, JJTINTEGERLITERAL);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
      try {
                               jjtree.closeNodeScope(jjtn001,  true);
                               jjtc001 = false;
                              processToken(jjtn001, token);
      } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  true);
                               }
      }
      break;
    case DecimalLiteral:
      jj_consume_token(DecimalLiteral);
                                    SimpleNode jjtn002 = new SimpleNode(this, JJTDECIMALLITERAL);
                                    boolean jjtc002 = true;
                                    jjtree.openNodeScope(jjtn002);
      try {
                                    jjtree.closeNodeScope(jjtn002,  true);
                                    jjtc002 = false;
                                   processToken(jjtn002, token);
      } finally {
                                    if (jjtc002) {
                                      jjtree.closeNodeScope(jjtn002,  true);
                                    }
      }
      break;
    case DoubleLiteral:
      jj_consume_token(DoubleLiteral);
                                   SimpleNode jjtn003 = new SimpleNode(this, JJTDOUBLELITERAL);
                                   boolean jjtc003 = true;
                                   jjtree.openNodeScope(jjtn003);
      try {
                                   jjtree.closeNodeScope(jjtn003,  true);
                                   jjtc003 = false;
                                  processToken(jjtn003, token);
      } finally {
                                   if (jjtc003) {
                                     jjtree.closeNodeScope(jjtn003,  true);
                                   }
      }
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void VarRef() throws ParseException {
    jj_consume_token(28);
    VarName();
  }

  final public void VarName() throws ParseException {
         /*@bgen(jjtree) VarName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTVARNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      QName();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ParenthesizedExpr() throws ParseException {
         /*@bgen(jjtree) ParenthesizedExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPARENTHESIZEDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(30);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 30:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 65:
      case 66:
      case 67:
      case 68:
      case Greatest:
      case Least:
      case External:
      case Ascending:
      case Descending:
      case PragmaOpen:
      case IntegerLiteral:
      case DecimalLiteral:
      case DoubleLiteral:
      case StringLiteral:
      case QNameToken:
        Expr();
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      jj_consume_token(31);
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void OrderedExpr() throws ParseException {
         /*@bgen(jjtree) OrderedExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTORDEREDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(13);
      jj_consume_token(Lbrace);
                                SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
      try {
                                jjtree.closeNodeScope(jjtn001,  true);
                                jjtc001 = false;
                               processToken(jjtn001, token);
      } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  true);
                                }
      }
      Expr();
      jj_consume_token(Rbrace);
                                                                                             SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                                             boolean jjtc002 = true;
                                                                                             jjtree.openNodeScope(jjtn002);
      try {
                                                                                             jjtree.closeNodeScope(jjtn002,  true);
                                                                                             jjtc002 = false;
                                                                              processToken(jjtn002, token);
      } finally {
                                                                                             if (jjtc002) {
                                                                                               jjtree.closeNodeScope(jjtn002,  true);
                                                                                             }
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void UnorderedExpr() throws ParseException {
         /*@bgen(jjtree) UnorderedExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTUNORDEREDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(14);
      jj_consume_token(Lbrace);
                                  SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
      try {
                                  jjtree.closeNodeScope(jjtn001,  true);
                                  jjtc001 = false;
                                 processToken(jjtn001, token);
      } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  true);
                                  }
      }
      Expr();
      jj_consume_token(Rbrace);
                                                                                               SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                                               boolean jjtc002 = true;
                                                                                               jjtree.openNodeScope(jjtn002);
      try {
                                                                                               jjtree.closeNodeScope(jjtn002,  true);
                                                                                               jjtc002 = false;
                                                                                processToken(jjtn002, token);
      } finally {
                                                                                               if (jjtc002) {
                                                                                                 jjtree.closeNodeScope(jjtn002,  true);
                                                                                               }
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void FunctionCall() throws ParseException {
         /*@bgen(jjtree) FunctionCall */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      FunctionQName();
      jj_consume_token(30);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 30:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 65:
      case 66:
      case 67:
      case 68:
      case Greatest:
      case Least:
      case External:
      case Ascending:
      case Descending:
      case PragmaOpen:
      case IntegerLiteral:
      case DecimalLiteral:
      case DoubleLiteral:
      case StringLiteral:
      case QNameToken:
        ExprSingle();
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 18:
            ;
            break;
          default:
            jj_la1[61] = jj_gen;
            break label_12;
          }
          jj_consume_token(18);
          ExprSingle();
        }
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      jj_consume_token(31);
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void Constructor() throws ParseException {
         /*@bgen(jjtree) Constructor */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ComputedConstructor();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ComputedConstructor() throws ParseException {
         /*@bgen(jjtree) ComputedConstructor */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOMPUTEDCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 65:
        CompDocConstructor();
        break;
      case 25:
        CompElemConstructor();
        break;
      case 58:
        CompAttrConstructor();
        break;
      case 66:
        CompTextConstructor();
        break;
      case 67:
        CompCommentConstructor();
        break;
      case 68:
        CompPIConstructor();
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void CompDocConstructor() throws ParseException {
         /*@bgen(jjtree) CompDocConstructor */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOMPDOCCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(65);
      jj_consume_token(Lbrace);
                                 SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
      try {
                                 jjtree.closeNodeScope(jjtn001,  true);
                                 jjtc001 = false;
                                processToken(jjtn001, token);
      } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  true);
                                 }
      }
      Expr();
      jj_consume_token(Rbrace);
                                                                                              SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                                              boolean jjtc002 = true;
                                                                                              jjtree.openNodeScope(jjtn002);
      try {
                                                                                              jjtree.closeNodeScope(jjtn002,  true);
                                                                                              jjtc002 = false;
                                                                               processToken(jjtn002, token);
      } finally {
                                                                                              if (jjtc002) {
                                                                                                jjtree.closeNodeScope(jjtn002,  true);
                                                                                              }
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void CompElemConstructor() throws ParseException {
         /*@bgen(jjtree) CompElemConstructor */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOMPELEMCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(25);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 65:
      case 66:
      case 67:
      case 68:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case Greatest:
      case Least:
      case External:
      case Ascending:
      case Descending:
      case QNameToken:
        QName();
        break;
      case Lbrace:
        jj_consume_token(Lbrace);
              SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
        try {
              jjtree.closeNodeScope(jjtn001,  true);
              jjtc001 = false;
             processToken(jjtn001, token);
        } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  true);
              }
        }
        Expr();
        jj_consume_token(Rbrace);
                                                                           SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                           boolean jjtc002 = true;
                                                                           jjtree.openNodeScope(jjtn002);
        try {
                                                                           jjtree.closeNodeScope(jjtn002,  true);
                                                                           jjtc002 = false;
                                                            processToken(jjtn002, token);
        } finally {
                                                                           if (jjtc002) {
                                                                             jjtree.closeNodeScope(jjtn002,  true);
                                                                           }
        }
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(Lbrace);
                                                                                                                                   SimpleNode jjtn003 = new SimpleNode(this, JJTLBRACE);
                                                                                                                                   boolean jjtc003 = true;
                                                                                                                                   jjtree.openNodeScope(jjtn003);
      try {
                                                                                                                                   jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                   jjtc003 = false;
                                                                                                      processToken(jjtn003, token);
      } finally {
                                                                                                                                   if (jjtc003) {
                                                                                                                                     jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                   }
      }
      ContentExpr();
      jj_consume_token(Rbrace);
                                                                                                                                                                                                       SimpleNode jjtn004 = new SimpleNode(this, JJTRBRACE);
                                                                                                                                                                                                       boolean jjtc004 = true;
                                                                                                                                                                                                       jjtree.openNodeScope(jjtn004);
      try {
                                                                                                                                                                                                       jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                       jjtc004 = false;
                                                                                                                                                            processToken(jjtn004, token);
      } finally {
                                                                                                                                                                                                       if (jjtc004) {
                                                                                                                                                                                                         jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                       }
      }
      jj_consume_token(Lbrace);
                                                                                                                                                                                                                                                             SimpleNode jjtn005 = new SimpleNode(this, JJTLBRACE);
                                                                                                                                                                                                                                                             boolean jjtc005 = true;
                                                                                                                                                                                                                                                             jjtree.openNodeScope(jjtn005);
      try {
                                                                                                                                                                                                                                                             jjtree.closeNodeScope(jjtn005,  true);
                                                                                                                                                                                                                                                             jjtc005 = false;
                                                                                                                                                                                                    processToken(jjtn005, token);
      } finally {
                                                                                                                                                                                                                                                             if (jjtc005) {
                                                                                                                                                                                                                                                               jjtree.closeNodeScope(jjtn005,  true);
                                                                                                                                                                                                                                                             }
      }
      LocalNamespaceDecls();
      jj_consume_token(Rbrace);
                                                                                                                                                                                                                                                                                                                                         SimpleNode jjtn006 = new SimpleNode(this, JJTRBRACE);
                                                                                                                                                                                                                                                                                                                                         boolean jjtc006 = true;
                                                                                                                                                                                                                                                                                                                                         jjtree.openNodeScope(jjtn006);
      try {
                                                                                                                                                                                                                                                                                                                                         jjtree.closeNodeScope(jjtn006,  true);
                                                                                                                                                                                                                                                                                                                                         jjtc006 = false;
                                                                                                                                                                                                                                                                  processToken(jjtn006, token);
      } finally {
                                                                                                                                                                                                                                                                                                                                         if (jjtc006) {
                                                                                                                                                                                                                                                                                                                                           jjtree.closeNodeScope(jjtn006,  true);
                                                                                                                                                                                                                                                                                                                                         }
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void LocalNamespaceDecls() throws ParseException {
         /*@bgen(jjtree) LocalNamespaceDecls */
  SimpleNode jjtn000 = new SimpleNode(this, JJTLOCALNAMESPACEDECLS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 2:
          ;
          break;
        default:
          jj_la1[65] = jj_gen;
          break label_13;
        }
        LocalNamespaceDecl();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void LocalNamespaceDecl() throws ParseException {
         /*@bgen(jjtree) LocalNamespaceDecl */
  SimpleNode jjtn000 = new SimpleNode(this, JJTLOCALNAMESPACEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(2);
      NCName();
      jj_consume_token(Lbrace);
                                           SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
                                           boolean jjtc001 = true;
                                           jjtree.openNodeScope(jjtn001);
      try {
                                           jjtree.closeNodeScope(jjtn001,  true);
                                           jjtc001 = false;
                                          processToken(jjtn001, token);
      } finally {
                                           if (jjtc001) {
                                             jjtree.closeNodeScope(jjtn001,  true);
                                           }
      }
      URILiteral();
      jj_consume_token(Rbrace);
                                                                                                              SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                                                              boolean jjtc002 = true;
                                                                                                              jjtree.openNodeScope(jjtn002);
      try {
                                                                                                              jjtree.closeNodeScope(jjtn002,  true);
                                                                                                              jjtc002 = false;
                                                                                               processToken(jjtn002, token);
      } finally {
                                                                                                              if (jjtc002) {
                                                                                                                jjtree.closeNodeScope(jjtn002,  true);
                                                                                                              }
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ContentExpr() throws ParseException {
         /*@bgen(jjtree) ContentExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCONTENTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expr();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void CompAttrConstructor() throws ParseException {
         /*@bgen(jjtree) CompAttrConstructor */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOMPATTRCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(58);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 65:
      case 66:
      case 67:
      case 68:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case Greatest:
      case Least:
      case External:
      case Ascending:
      case Descending:
      case QNameToken:
        QName();
        break;
      case Lbrace:
        jj_consume_token(Lbrace);
              SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
        try {
              jjtree.closeNodeScope(jjtn001,  true);
              jjtc001 = false;
             processToken(jjtn001, token);
        } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  true);
              }
        }
        Expr();
        jj_consume_token(Rbrace);
                                                                           SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                           boolean jjtc002 = true;
                                                                           jjtree.openNodeScope(jjtn002);
        try {
                                                                           jjtree.closeNodeScope(jjtn002,  true);
                                                                           jjtc002 = false;
                                                            processToken(jjtn002, token);
        } finally {
                                                                           if (jjtc002) {
                                                                             jjtree.closeNodeScope(jjtn002,  true);
                                                                           }
        }
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(Lbrace);
                                                                                                                                   SimpleNode jjtn003 = new SimpleNode(this, JJTLBRACE);
                                                                                                                                   boolean jjtc003 = true;
                                                                                                                                   jjtree.openNodeScope(jjtn003);
      try {
                                                                                                                                   jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                   jjtc003 = false;
                                                                                                      processToken(jjtn003, token);
      } finally {
                                                                                                                                   if (jjtc003) {
                                                                                                                                     jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                   }
      }
      Expr();
      jj_consume_token(Rbrace);
                                                                                                                                                                                                SimpleNode jjtn004 = new SimpleNode(this, JJTRBRACE);
                                                                                                                                                                                                boolean jjtc004 = true;
                                                                                                                                                                                                jjtree.openNodeScope(jjtn004);
      try {
                                                                                                                                                                                                jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                jjtc004 = false;
                                                                                                                                                     processToken(jjtn004, token);
      } finally {
                                                                                                                                                                                                if (jjtc004) {
                                                                                                                                                                                                  jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                }
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void CompTextConstructor() throws ParseException {
         /*@bgen(jjtree) CompTextConstructor */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOMPTEXTCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(66);
      jj_consume_token(Lbrace);
                             SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
      try {
                             jjtree.closeNodeScope(jjtn001,  true);
                             jjtc001 = false;
                            processToken(jjtn001, token);
      } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  true);
                             }
      }
      Expr();
      jj_consume_token(Rbrace);
                                                                                          SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                                          boolean jjtc002 = true;
                                                                                          jjtree.openNodeScope(jjtn002);
      try {
                                                                                          jjtree.closeNodeScope(jjtn002,  true);
                                                                                          jjtc002 = false;
                                                                           processToken(jjtn002, token);
      } finally {
                                                                                          if (jjtc002) {
                                                                                            jjtree.closeNodeScope(jjtn002,  true);
                                                                                          }
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void CompCommentConstructor() throws ParseException {
         /*@bgen(jjtree) CompCommentConstructor */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOMPCOMMENTCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(67);
      jj_consume_token(Lbrace);
                                SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
      try {
                                jjtree.closeNodeScope(jjtn001,  true);
                                jjtc001 = false;
                               processToken(jjtn001, token);
      } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  true);
                                }
      }
      Expr();
      jj_consume_token(Rbrace);
                                                                                             SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                                             boolean jjtc002 = true;
                                                                                             jjtree.openNodeScope(jjtn002);
      try {
                                                                                             jjtree.closeNodeScope(jjtn002,  true);
                                                                                             jjtc002 = false;
                                                                              processToken(jjtn002, token);
      } finally {
                                                                                             if (jjtc002) {
                                                                                               jjtree.closeNodeScope(jjtn002,  true);
                                                                                             }
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void CompPIConstructor() throws ParseException {
         /*@bgen(jjtree) CompPIConstructor */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOMPPICONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(68);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 65:
      case 66:
      case 67:
      case 68:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case Greatest:
      case Least:
      case External:
      case Ascending:
      case Descending:
      case QNameToken:
        NCName();
        break;
      case Lbrace:
        jj_consume_token(Lbrace);
              SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
        try {
              jjtree.closeNodeScope(jjtn001,  true);
              jjtc001 = false;
             processToken(jjtn001, token);
        } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  true);
              }
        }
        Expr();
        jj_consume_token(Rbrace);
                                                                           SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                           boolean jjtc002 = true;
                                                                           jjtree.openNodeScope(jjtn002);
        try {
                                                                           jjtree.closeNodeScope(jjtn002,  true);
                                                                           jjtc002 = false;
                                                            processToken(jjtn002, token);
        } finally {
                                                                           if (jjtc002) {
                                                                             jjtree.closeNodeScope(jjtn002,  true);
                                                                           }
        }
        break;
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(Lbrace);
                                                                                                                                   SimpleNode jjtn003 = new SimpleNode(this, JJTLBRACE);
                                                                                                                                   boolean jjtc003 = true;
                                                                                                                                   jjtree.openNodeScope(jjtn003);
      try {
                                                                                                                                   jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                   jjtc003 = false;
                                                                                                      processToken(jjtn003, token);
      } finally {
                                                                                                                                   if (jjtc003) {
                                                                                                                                     jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                   }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 30:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 65:
      case 66:
      case 67:
      case 68:
      case Greatest:
      case Least:
      case External:
      case Ascending:
      case Descending:
      case PragmaOpen:
      case IntegerLiteral:
      case DecimalLiteral:
      case DoubleLiteral:
      case StringLiteral:
      case QNameToken:
        Expr();
        break;
      default:
        jj_la1[68] = jj_gen;
        ;
      }
      jj_consume_token(Rbrace);
                                                                                                                                                                                                  SimpleNode jjtn004 = new SimpleNode(this, JJTRBRACE);
                                                                                                                                                                                                  boolean jjtc004 = true;
                                                                                                                                                                                                  jjtree.openNodeScope(jjtn004);
      try {
                                                                                                                                                                                                  jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                  jjtc004 = false;
                                                                                                                                                       processToken(jjtn004, token);
      } finally {
                                                                                                                                                                                                  if (jjtc004) {
                                                                                                                                                                                                    jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                  }
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void SingleType() throws ParseException {
         /*@bgen(jjtree) SingleType */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSINGLETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AtomicType();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 69:
        jj_consume_token(69);
                              jjtn000.processValue("?");
        break;
      default:
        jj_la1[69] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void TypeDeclaration() throws ParseException {
         /*@bgen(jjtree) TypeDeclaration */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTYPEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(32);
      SequenceType();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void SequenceType() throws ParseException {
         /*@bgen(jjtree) SequenceType */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSEQUENCETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_13(2)) {
        jj_consume_token(70);
                     jjtn000.processValue("empty-sequence");
        jj_consume_token(30);
        jj_consume_token(31);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 65:
        case 66:
        case 67:
        case 68:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case Greatest:
        case Least:
        case External:
        case Ascending:
        case Descending:
        case QNameToken:
          ItemType();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 64:
          case 69:
          case Plus:
            OccurrenceIndicator();
            break;
          default:
            jj_la1[70] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[71] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void OccurrenceIndicator() throws ParseException {
         /*@bgen(jjtree) OccurrenceIndicator */
  SimpleNode jjtn000 = new SimpleNode(this, JJTOCCURRENCEINDICATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 69:
        jj_consume_token(69);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.processValue("?");
        break;
      case 64:
        jj_consume_token(64);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                      jjtn000.processValue("*");
        break;
      case Plus:
        jj_consume_token(Plus);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         processToken(((SimpleNode)jjtree.peekNode()), token);
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ItemType() throws ParseException {
         /*@bgen(jjtree) ItemType */
  SimpleNode jjtn000 = new SimpleNode(this, JJTITEMTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_14(2)) {
        KindTest();
      } else if (jj_2_15(2)) {
        jj_consume_token(71);
           jjtn000.processValue("item");
        jj_consume_token(30);
        jj_consume_token(31);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 65:
        case 66:
        case 67:
        case 68:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case Greatest:
        case Least:
        case External:
        case Ascending:
        case Descending:
        case QNameToken:
          AtomicType();
          break;
        default:
          jj_la1[73] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void AtomicType() throws ParseException {
         /*@bgen(jjtree) AtomicType */
  SimpleNode jjtn000 = new SimpleNode(this, JJTATOMICTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      QName();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void KindTest() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 73:
      DocumentTest();
      break;
    case 25:
      ElementTest();
      break;
    case 58:
      AttributeTest();
      break;
    case 75:
      SchemaElementTest();
      break;
    case 74:
      SchemaAttributeTest();
      break;
    case 68:
      PITest();
      break;
    case 67:
      CommentTest();
      break;
    case 66:
      TextTest();
      break;
    case 72:
      AnyKindTest();
      break;
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AnyKindTest() throws ParseException {
         /*@bgen(jjtree) AnyKindTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTANYKINDTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(72);
      jj_consume_token(30);
      jj_consume_token(31);
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void DocumentTest() throws ParseException {
         /*@bgen(jjtree) DocumentTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTDOCUMENTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(73);
      jj_consume_token(30);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
      case 75:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 25:
          ElementTest();
          break;
        case 75:
          SchemaElementTest();
          break;
        default:
          jj_la1[75] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[76] = jj_gen;
        ;
      }
      jj_consume_token(31);
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void TextTest() throws ParseException {
         /*@bgen(jjtree) TextTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTEXTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(66);
      jj_consume_token(30);
      jj_consume_token(31);
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void CommentTest() throws ParseException {
         /*@bgen(jjtree) CommentTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOMMENTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(67);
      jj_consume_token(30);
      jj_consume_token(31);
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void PITest() throws ParseException {
         /*@bgen(jjtree) PITest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPITEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(68);
      jj_consume_token(30);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 65:
      case 66:
      case 67:
      case 68:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case Greatest:
      case Least:
      case External:
      case Ascending:
      case Descending:
      case StringLiteral:
      case QNameToken:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 65:
        case 66:
        case 67:
        case 68:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case Greatest:
        case Least:
        case External:
        case Ascending:
        case Descending:
        case QNameToken:
          NCName();
          break;
        case StringLiteral:
          jj_consume_token(StringLiteral);
                                   SimpleNode jjtn001 = new SimpleNode(this, JJTSTRINGLITERAL);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
          try {
                                   jjtree.closeNodeScope(jjtn001,  true);
                                   jjtc001 = false;
                                  processToken(jjtn001, token);
          } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  true);
                                   }
          }
          break;
        default:
          jj_la1[77] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[78] = jj_gen;
        ;
      }
      jj_consume_token(31);
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void AttributeTest() throws ParseException {
         /*@bgen(jjtree) AttributeTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTATTRIBUTETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(58);
      jj_consume_token(30);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case Greatest:
      case Least:
      case External:
      case Ascending:
      case Descending:
      case QNameToken:
        AttribNameOrWildcard();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 18:
          jj_consume_token(18);
          TypeName();
          break;
        default:
          jj_la1[79] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[80] = jj_gen;
        ;
      }
      jj_consume_token(31);
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void AttribNameOrWildcard() throws ParseException {
         /*@bgen(jjtree) AttribNameOrWildcard */
  SimpleNode jjtn000 = new SimpleNode(this, JJTATTRIBNAMEORWILDCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 65:
      case 66:
      case 67:
      case 68:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case Greatest:
      case Least:
      case External:
      case Ascending:
      case Descending:
      case QNameToken:
        AttributeName();
        break;
      case 64:
        jj_consume_token(64);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                      jjtn000.processValue("*");
        break;
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void SchemaAttributeTest() throws ParseException {
         /*@bgen(jjtree) SchemaAttributeTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSCHEMAATTRIBUTETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(74);
      jj_consume_token(30);
      AttributeDeclaration();
      jj_consume_token(31);
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void AttributeDeclaration() throws ParseException {
         /*@bgen(jjtree) AttributeDeclaration */
  SimpleNode jjtn000 = new SimpleNode(this, JJTATTRIBUTEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AttributeName();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ElementTest() throws ParseException {
         /*@bgen(jjtree) ElementTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTELEMENTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(25);
      jj_consume_token(30);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case Greatest:
      case Least:
      case External:
      case Ascending:
      case Descending:
      case QNameToken:
        ElementNameOrWildcard();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 18:
          jj_consume_token(18);
          TypeName();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 69:
            jj_consume_token(69);
                                                                        jjtn000.processValue("?");
            break;
          default:
            jj_la1[82] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[83] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[84] = jj_gen;
        ;
      }
      jj_consume_token(31);
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ElementNameOrWildcard() throws ParseException {
         /*@bgen(jjtree) ElementNameOrWildcard */
  SimpleNode jjtn000 = new SimpleNode(this, JJTELEMENTNAMEORWILDCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 65:
      case 66:
      case 67:
      case 68:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case Greatest:
      case Least:
      case External:
      case Ascending:
      case Descending:
      case QNameToken:
        ElementName();
        break;
      case 64:
        jj_consume_token(64);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                      jjtn000.processValue("*");
        break;
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void SchemaElementTest() throws ParseException {
         /*@bgen(jjtree) SchemaElementTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSCHEMAELEMENTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(75);
      jj_consume_token(30);
      ElementDeclaration();
      jj_consume_token(31);
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ElementDeclaration() throws ParseException {
         /*@bgen(jjtree) ElementDeclaration */
  SimpleNode jjtn000 = new SimpleNode(this, JJTELEMENTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ElementName();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void AttributeName() throws ParseException {
         /*@bgen(jjtree) AttributeName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTATTRIBUTENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      QName();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ElementName() throws ParseException {
         /*@bgen(jjtree) ElementName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTELEMENTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      QName();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void TypeName() throws ParseException {
         /*@bgen(jjtree) TypeName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTYPENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      QName();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void URILiteral() throws ParseException {
         /*@bgen(jjtree) URILiteral */
  SimpleNode jjtn000 = new SimpleNode(this, JJTURILITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(StringLiteral);
                             SimpleNode jjtn001 = new SimpleNode(this, JJTSTRINGLITERAL);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
      try {
                             jjtree.closeNodeScope(jjtn001,  true);
                             jjtc001 = false;
                            processToken(jjtn001, token);
      } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001,  true);
                             }
      }
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void NCName() throws ParseException {
         /*@bgen(jjtree) NCName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTNCNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      QName();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void QName() throws ParseException {
         /*@bgen(jjtree) QName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTQNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 26:
      case 27:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 44:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 57:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 65:
      case Greatest:
      case Least:
      case External:
      case Ascending:
      case Descending:
      case QNameToken:
        FunctionQName();
        break;
      case 58:
        jj_consume_token(58);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              jjtn000.processValue("attribute");
        break;
      case 67:
        jj_consume_token(67);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            jjtn000.processValue("comment");
        break;
      case 73:
        jj_consume_token(73);
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                  jjtn000.processValue("document-node");
        break;
      case 25:
        jj_consume_token(25);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            jjtn000.processValue("element");
        break;
      case 70:
        jj_consume_token(70);
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                   jjtn000.processValue("empty-sequence");
        break;
      case 45:
        jj_consume_token(45);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.processValue("if");
        break;
      case 71:
        jj_consume_token(71);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.processValue("item");
        break;
      case 72:
        jj_consume_token(72);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.processValue("node");
        break;
      case 68:
        jj_consume_token(68);
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtc000 = false;
                                           jjtn000.processValue("processing-instruction");
        break;
      case 74:
        jj_consume_token(74);
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                     jjtn000.processValue("schema-attribute");
        break;
      case 75:
        jj_consume_token(75);
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                   jjtn000.processValue("schema-element");
        break;
      case 66:
        jj_consume_token(66);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.processValue("text");
        break;
      case 43:
        jj_consume_token(43);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                               jjtn000.processValue("typeswitch");
        break;
      default:
        jj_la1[86] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void FunctionQName() throws ParseException {
         /*@bgen(jjtree) FunctionQName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFUNCTIONQNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QNameToken:
        jj_consume_token(QNameToken);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          processToken(((SimpleNode)jjtree.peekNode()), token);
        break;
      case Ascending:
        jj_consume_token(Ascending);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              processToken(((SimpleNode)jjtree.peekNode()), token);
        break;
      case Descending:
        jj_consume_token(Descending);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                               processToken(((SimpleNode)jjtree.peekNode()), token);
        break;
      case External:
        jj_consume_token(External);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             processToken(((SimpleNode)jjtree.peekNode()), token);
        break;
      case Greatest:
        jj_consume_token(Greatest);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             processToken(((SimpleNode)jjtree.peekNode()), token);
        break;
      case Least:
        jj_consume_token(Least);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          processToken(((SimpleNode)jjtree.peekNode()), token);
        break;
      case 62:
        jj_consume_token(62);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             jjtn000.processValue("ancestor");
        break;
      case 63:
        jj_consume_token(63);
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                     jjtn000.processValue("ancestor-or-self");
        break;
      case 49:
        jj_consume_token(49);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.processValue("and");
        break;
      case 32:
        jj_consume_token(32);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.processValue("as");
        break;
      case 24:
        jj_consume_token(24);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.processValue("at");
        break;
      case 8:
        jj_consume_token(8);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             jjtn000.processValue("base-uri");
        break;
      case 38:
        jj_consume_token(38);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.processValue("by");
        break;
      case 44:
        jj_consume_token(44);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.processValue("case");
        break;
      case 51:
        jj_consume_token(51);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.processValue("cast");
        break;
      case 50:
        jj_consume_token(50);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             jjtn000.processValue("castable");
        break;
      case 55:
        jj_consume_token(55);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          jjtn000.processValue("child");
        break;
      case 7:
        jj_consume_token(7);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              jjtn000.processValue("collation");
        break;
      case 9:
        jj_consume_token(9);
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                 jjtn000.processValue("construction");
        break;
      case 17:
        jj_consume_token(17);
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                    jjtn000.processValue("copy-namespaces");
        break;
      case 5:
        jj_consume_token(5);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            jjtn000.processValue("declare");
        break;
      case 6:
        jj_consume_token(6);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            jjtn000.processValue("default");
        break;
      case 57:
        jj_consume_token(57);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                               jjtn000.processValue("descendant");
        break;
      case 60:
        jj_consume_token(60);
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                       jjtn000.processValue("descendant-or-self");
        break;
      case 65:
        jj_consume_token(65);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             jjtn000.processValue("document");
        break;
      case 47:
        jj_consume_token(47);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.processValue("else");
        break;
      case 16:
        jj_consume_token(16);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          jjtn000.processValue("empty");
        break;
      case 41:
        jj_consume_token(41);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          jjtn000.processValue("every");
        break;
      case 35:
        jj_consume_token(35);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.processValue("for");
        break;
      case 26:
        jj_consume_token(26);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             jjtn000.processValue("function");
        break;
      case 22:
        jj_consume_token(22);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           jjtn000.processValue("import");
        break;
      case 36:
        jj_consume_token(36);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.processValue("in");
        break;
      case 20:
        jj_consume_token(20);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            jjtn000.processValue("inherit");
        break;
      case 53:
        jj_consume_token(53);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.processValue("lax");
        break;
      case 37:
        jj_consume_token(37);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.processValue("let");
        break;
      case 1:
        jj_consume_token(1);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           jjtn000.processValue("module");
        break;
      case 2:
        jj_consume_token(2);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              jjtn000.processValue("namespace");
        break;
      case 21:
        jj_consume_token(21);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                               jjtn000.processValue("no-inherit");
        break;
      case 19:
        jj_consume_token(19);
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                jjtn000.processValue("no-preserve");
        break;
      case 33:
        jj_consume_token(33);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           jjtn000.processValue("option");
        break;
      case 48:
        jj_consume_token(48);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.processValue("or");
        break;
      case 15:
        jj_consume_token(15);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          jjtn000.processValue("order");
        break;
      case 13:
        jj_consume_token(13);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            jjtn000.processValue("ordered");
        break;
      case 12:
        jj_consume_token(12);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             jjtn000.processValue("ordering");
        break;
      case 61:
        jj_consume_token(61);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           jjtn000.processValue("parent");
        break;
      case 11:
        jj_consume_token(11);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             jjtn000.processValue("preserve");
        break;
      case 34:
        jj_consume_token(34);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           jjtn000.processValue("return");
        break;
      case 42:
        jj_consume_token(42);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              jjtn000.processValue("satisfies");
        break;
      case 23:
        jj_consume_token(23);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           jjtn000.processValue("schema");
        break;
      case 59:
        jj_consume_token(59);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.processValue("self");
        break;
      case 40:
        jj_consume_token(40);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.processValue("some");
        break;
      case 39:
        jj_consume_token(39);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           jjtn000.processValue("stable");
        break;
      case 54:
        jj_consume_token(54);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           jjtn000.processValue("strict");
        break;
      case 10:
        jj_consume_token(10);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          jjtn000.processValue("strip");
        break;
      case 46:
        jj_consume_token(46);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.processValue("then");
        break;
      case 14:
        jj_consume_token(14);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              jjtn000.processValue("unordered");
        break;
      case 52:
        jj_consume_token(52);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             jjtn000.processValue("validate");
        break;
      case 27:
        jj_consume_token(27);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             jjtn000.processValue("variable");
        break;
      default:
        jj_la1[87] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(58)) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_scan_token(48)) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(68)) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(67)) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_3R_172()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_173()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(66)) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(73)) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_scan_token(45)) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(72)) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_scan_token(43)) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(41)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    if (jj_scan_token(28)) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(71)) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_3R_170()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(70)) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(37)) return true;
    if (jj_scan_token(28)) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_scan_token(Lbrace)) return true;
    if (jj_3R_135()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(35)) return true;
    if (jj_scan_token(28)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_scan_token(68)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) return true;
    }
    if (jj_scan_token(Lbrace)) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_scan_token(67)) return true;
    if (jj_scan_token(Lbrace)) return true;
    if (jj_3R_135()) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_3R_171()) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_3R_143()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_scan_token(18)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_scan_token(Lbrace)) return true;
    if (jj_3R_135()) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_scan_token(66)) return true;
    if (jj_scan_token(Lbrace)) return true;
    if (jj_3R_135()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(58)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) return true;
    }
    if (jj_scan_token(Lbrace)) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_3R_144()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_168()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_3R_143()) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_scan_token(Lbrace)) return true;
    if (jj_3R_135()) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(25)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    }
    if (jj_scan_token(Lbrace)) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(65)) return true;
    if (jj_scan_token(Lbrace)) return true;
    if (jj_3R_135()) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_3R_140()) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_3R_139()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_3R_138()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_3R_137()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(30)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) jj_scanpos = xsp;
    if (jj_scan_token(31)) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_3R_144()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(14)) return true;
    if (jj_scan_token(Lbrace)) return true;
    if (jj_3R_135()) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_scan_token(13)) return true;
    if (jj_scan_token(Lbrace)) return true;
    if (jj_3R_135()) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_3R_135()) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(30)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) jj_scanpos = xsp;
    if (jj_scan_token(31)) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_3R_143()) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_scan_token(DoubleLiteral)) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(28)) return true;
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_scan_token(DecimalLiteral)) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_scan_token(IntegerLiteral)) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(StringLiteral)) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_3R_142()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_scan_token(27)) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_scan_token(52)) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_scan_token(46)) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(54)) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(39)) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(59)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(23)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(42)) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(34)) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_scan_token(11)) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(12)) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(13)) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(15)) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(48)) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(33)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(19)) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(21)) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_scan_token(2)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(1)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(37)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(53)) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(20)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(36)) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(22)) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(26)) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(35)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(41)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(16)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(63)) return true;
    if (jj_scan_token(56)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(47)) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(65)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(62)) return true;
    if (jj_scan_token(56)) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(60)) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(57)) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(6)) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(17)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(9)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(7)) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(61)) return true;
    if (jj_scan_token(56)) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(55)) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(50)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(51)) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(44)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(8)) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(24)) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(49)) return true;
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_scan_token(2)) return true;
    if (jj_scan_token(56)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(63)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(62)) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_scan_token(60)) return true;
    if (jj_scan_token(56)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(Least)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(Greatest)) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_scan_token(59)) return true;
    if (jj_scan_token(56)) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(External)) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_scan_token(S)) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(Descending)) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_scan_token(58)) return true;
    if (jj_scan_token(56)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(Ascending)) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_scan_token(57)) return true;
    if (jj_scan_token(56)) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(QNameToken)) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_scan_token(43)) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_scan_token(55)) return true;
    if (jj_scan_token(56)) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_scan_token(75)) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_scan_token(74)) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_scan_token(68)) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_scan_token(72)) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_scan_token(71)) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_scan_token(45)) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_scan_token(70)) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_scan_token(25)) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_3R_191()) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_scan_token(73)) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_3R_190()) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_scan_token(67)) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_scan_token(58)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) return true;
    }
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_3R_186()) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) return true;
    }
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_3R_143()) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_scan_token(PragmaOpen)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) jj_scanpos = xsp;
    if (jj_3R_143()) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_3R_187()) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    Token xsp;
    if (jj_3R_185()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_185()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(54)) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(53)) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_scan_token(51)) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_3R_183()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(52)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    if (jj_scan_token(Lbrace)) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_3R_182()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_scan_token(50)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(75)) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_3R_178()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_3R_176()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(25)) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_scan_token(49)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(74)) return true;
    if (jj_scan_token(30)) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_3R_174()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_175()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  public XParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[88];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xc00,0x6000,0x0,0x80800,0x300000,0x44,0x40000,0x1000000,0x44,0x4,0x40000,0x1000000,0x6000000,0x0,0x20000000,0x10000000,0x0,0x0,0x40000,0x0,0x40000,0x5ffbffe6,0x0,0x0,0x1000000,0x0,0x8000,0x40000,0x0,0x0,0x0,0x10000,0x80,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x5ffbffe6,0x0,0x0,0x0,0x5ffbffe6,0x0,0x0,0x0,0x4,0x4,0x4,0x0,0xffbffe6,0xffbffe6,0x0,0x50000000,0x0,0x0,0x5ffbffe6,0x40000,0x5ffbffe6,0x2000000,0xffbffe6,0x4,0xffbffe6,0xffbffe6,0x5ffbffe6,0x0,0x0,0xffbffe6,0x0,0xffbffe6,0x2000000,0x2000000,0x2000000,0xffbffe6,0xffbffe6,0x40000,0xffbffe6,0xffbffe6,0x0,0x40000,0xffbffe6,0xffbffe6,0xffbffe6,0xdfbffe6,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0xfeffd7ff,0x28,0x1,0x0,0x1,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x300,0x1,0x0,0x1,0x1000,0x10000,0x20000,0x40000,0x80000,0xfeffd7ff,0x600000,0x600000,0x0,0xfeffffff,0x0,0x0,0x0,0xfe800000,0x1e800000,0x1e800000,0xe0000000,0xfeffffff,0xfeffffff,0x0,0x0,0x0,0x0,0xfeffffff,0x0,0xfeffffff,0x4000000,0xfeffffff,0x0,0xfeffffff,0xfeffffff,0xfeffffff,0x0,0x0,0xfeffffff,0x0,0xfeffffff,0x4000000,0x0,0x0,0xfeffffff,0xfeffffff,0x0,0xfeffffff,0xfeffffff,0x0,0x0,0xfeffffff,0xfeffffff,0xfeffffff,0xfaffd7ff,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x180000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x600000,0x0,0x0,0x0,0x2338001e,0x0,0x0,0x0,0x0,0x0,0x0,0x3000000,0x3000000,0x180000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2338001e,0x0,0x0,0x20000000,0x2338001e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x83380fdf,0x83380fdf,0x80000001,0x0,0x0,0x0,0x2338001e,0x0,0x2338001e,0x1e,0x3780fde,0x0,0x3780fde,0x3780fde,0x2338001e,0x20,0x8000021,0x3380fde,0x8000021,0x3380fde,0xf1c,0x800,0x800,0x3380fde,0x3380fde,0x0,0x3380fdf,0x3380fdf,0x20,0x0,0x3380fdf,0x3380fdf,0x3380fde,0x3380002,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x81e00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x81e00,0x0,0x0,0x0,0x81e00,0x200000,0x200000,0x400000,0x0,0x0,0x0,0x0,0x80001,0x80001,0x1,0x1e00,0x1e00,0xe00,0x81e00,0x0,0x81e00,0x0,0x80000,0x0,0x80000,0x80000,0x81e00,0x0,0x0,0x80000,0x0,0x80000,0x0,0x0,0x0,0x81000,0x81000,0x0,0x80000,0x80000,0x0,0x0,0x80000,0x80000,0x80000,0x80000,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[15];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public XParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public XParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new XParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public XParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new XParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public XParser(XParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(XParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 88; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[134];
    for (int i = 0; i < 134; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 88; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 134; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 15; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

        }
