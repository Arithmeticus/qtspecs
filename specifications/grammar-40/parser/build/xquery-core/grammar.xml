<?xml version="1.0" encoding="UTF-8"?><g:grammar xmlns:g="http://www.w3.org/2001/03/XPath/grammar">
  
  
  
  
  
  
  
  
  
  
  
  <g:language id="xcore" display-name="XML Processing Formal Semantics Core Language 1.0" if="xcore"/>
  
  
  
  
  
  
  
  

  
  
  
  <g:start name="Expr" state="DEFAULT" if="xcore"/>
  
  
  
  

  

  

  

  

  

  

  

  

  

  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

  
  
  
     
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

  

  
  

  

  
  


  

  

  

  <g:production name="ModuleDecl" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>module</g:string>
    <g:string>namespace</g:string>
    <g:ref name="NCName"/>
    <g:string>=</g:string>
    <g:ref name="URILiteral"/>
    <g:ref name="Separator"/>
  </g:production>

  

  

  <g:production name="Separator" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>;</g:string>
  </g:production>

  

  

  

  <g:production name="DefaultCollationDecl" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>declare</g:string>
    <g:string>default</g:string>
    <g:string>collation</g:string>
    <g:ref name="URILiteral"/>
  </g:production>

  <g:production name="BaseURIDecl" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>declare</g:string>
    <g:string>base-uri</g:string>
    <g:ref name="URILiteral"/>
  </g:production>

  <g:production name="ConstructionDecl" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>declare</g:string>
    <g:string>construction</g:string>
    <g:choice name="StripOrPreserve">
      <g:string process-value="yes">strip</g:string>
      <g:string process-value="yes">preserve</g:string>
    </g:choice>
  </g:production>

  <g:production name="OrderingModeDecl" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>declare</g:string>
    <g:string>ordering</g:string>
    <g:choice name="DeclareOrderingArgument">
      <g:string process-value="yes">ordered</g:string>
      <g:string process-value="yes">unordered</g:string>
    </g:choice>
  </g:production>

  <g:production name="EmptyOrderDecl" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>declare</g:string>
    <g:string>default</g:string>
    <g:string>order</g:string>
    <g:string>empty</g:string>
    <g:choice name="DeclareEmptyOrderArgument">
      <g:ref name="Greatest"/>
      <g:ref name="Least"/>
    </g:choice>
  </g:production>

  <g:production name="CopyNamespacesDecl" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>declare</g:string>
    <g:string>copy-namespaces</g:string>
    <g:ref name="PreserveMode"/>
    <g:string>,</g:string>
    <g:ref name="InheritMode"/>
  </g:production>

  <g:production name="PreserveMode" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:choice name="ChoiceForPreserveMode">
      <g:string process-value="yes">preserve</g:string>
      <g:string process-value="yes">no-preserve</g:string>
    </g:choice>
  </g:production>

  <g:production name="InheritMode" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:choice name="ChoiceForInheritMode">
      <g:string process-value="yes">inherit</g:string>
      <g:string process-value="yes">no-inherit</g:string>
    </g:choice>
  </g:production>

  

  

  

  

  

  <g:production name="SchemaImport" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>import</g:string>
    <g:string>schema</g:string>
    <g:optional name="OptionalSchemaImportPrefixDecl">
      <g:ref name="SchemaPrefix"/>
    </g:optional>
    <g:ref name="URILiteral"/>
    <g:optional name="OptionalLocationHint">
      <g:string>at</g:string>
      <g:ref name="URILiteral"/>
      <g:zeroOrMore name="AdditionalSchemaLocationHints">
        <g:string>,</g:string>
        <g:ref name="URILiteral"/>
      </g:zeroOrMore>
    </g:optional>
  </g:production>

  <g:production name="SchemaPrefix" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:choice name="SchemaPrefixNamespaceBinding">
      <g:sequence>
        <g:string>namespace</g:string>
        <g:ref name="NCName"/>
        <g:string>=</g:string>
      </g:sequence>
      <g:sequence>
        <g:string>default</g:string>
        <g:string>element</g:string>
        <g:string>namespace</g:string>
      </g:sequence>
    </g:choice>
  </g:production>

  <g:production name="ModuleImport" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>import</g:string>
    <g:string>module</g:string>
    <g:optional name="ImportPrefixDecl">
      <g:string>namespace</g:string>
      <g:ref name="NCName"/>
      <g:string>=</g:string>
    </g:optional>
    <g:ref name="URILiteral"/>
    <g:optional name="LocationHint">
      <g:string>at</g:string>
      <g:ref name="URILiteral"/>
      <g:zeroOrMore name="AdditionalModuleLocationHints">
        <g:string>,</g:string>
        <g:ref name="URILiteral"/>
      </g:zeroOrMore>
    </g:optional>
  </g:production>

  

  <g:production name="NamespaceDecl" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>declare</g:string>
    <g:string>namespace</g:string>
    <g:ref name="NCName"/>
    <g:string>=</g:string>
    <g:ref name="URILiteral"/>
  </g:production>

  <g:production name="DefaultNamespaceDecl" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>declare</g:string>
    <g:string>default</g:string>
    <g:choice name="DeclareDefaultElementOrFunction">
      <g:string process-value="yes">element</g:string>
      <g:string process-value="yes">function</g:string>
    </g:choice>
    <g:string>namespace</g:string>
    <g:ref name="URILiteral"/>
  </g:production>

  

  

  

  

  <g:production name="VarDecl" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string if="xcore xquery10">declare</g:string>
    <g:string>variable</g:string>
    <g:string>$</g:string>
    <g:ref name="QName" if="xcore xpath1 xpath20 xquery10 xslt2-patterns"/>
    
    <g:optional name="VarDeclOptionalTypeDecl">
      <g:ref name="TypeDeclaration"/>
    </g:optional>
    <g:choice name="VarDeclAssignmentOrExtern">
      <g:sequence>
        <g:string>:=</g:string>
        <g:ref name="ExprSingle" if="xcore xquery10"/>
        
      </g:sequence>
      <g:sequence>
        <g:ref name="External"/>
        
      </g:sequence>
    </g:choice>
  </g:production>

  

  

  

  <g:production name="FunctionDecl" if="xcore xquery10 xquery30 xquery31 xquery40" xgc-id="reserved-function-names">
    <g:string if="xcore xquery10">declare</g:string>
    
    <g:string>function</g:string>
    <g:ref name="FunctionQName" if="xcore xpath1 xpath20 xquery10 xslt2-patterns"/>
    <g:string>(</g:string>
    <g:optional name="OptionalParamList">
      <g:ref name="ParamList"/>
    </g:optional>
    <g:string>)</g:string>
    <g:optional name="optionFuncType">
      <g:string>as</g:string>
      <g:ref name="SequenceType"/>
    </g:optional>
    <g:choice name="FunctionDeclBody">
      <g:ref name="EnclosedExpr" if="xcore xquery10"/>
      
      <g:ref name="External"/>
    </g:choice>
  </g:production>

  <g:production name="ParamList" if="xcore xpath30 xpath31 xpath40 xpath40 xquery10 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:ref name="Param"/>
    <g:zeroOrMore name="ParamListTail">
      <g:string>,</g:string>
      <g:ref name="Param"/>
    </g:zeroOrMore>
  </g:production>

  <g:production name="Param" if="xcore xpath30 xpath31 xpath40 xpath40 xquery10 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:string>$</g:string>
    <g:ref name="QName" if="xcore xpath1 xpath20 xquery10 xslt2-patterns"/>
    <g:optional name="OptionalTypeDeclarationForParam">
      <g:ref name="TypeDeclaration"/>
    </g:optional>
  </g:production>

  

  <g:production name="EnclosedExpr" if="xcore xpath30 xpath31 xpath40 xpath40 xquery10 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:ref name="Lbrace"/>
    <g:ref name="Expr" not-if="xpath31 xpath40 xpath40 xquery31 xquery40"/>
    
    <g:ref name="Rbrace"/>
  </g:production>

  <g:production name="OptionDecl" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>declare</g:string>
    <g:string>option</g:string>
    <g:ref name="QName" if="xcore xpath1 xpath20 xquery10 xslt2-patterns"/>
    <g:ref name="StringLiteral"/>
  </g:production>

  

  

  <g:production name="Expr" not-if="xpath1">
    <g:ref name="ExprSingle" not-if="scripting"/>
    <g:zeroOrMore not-if="scripting">
      <g:string>,</g:string>
      <g:ref name="ExprSingle"/>
    </g:zeroOrMore>
    
  </g:production>

  

  

  <g:production name="ExprSingle" node-type="void">
    <g:choice break="true" name="ExprSingleChoice">
      
      
      <g:ref name="FLWORExpr10" if="xcore xquery10" lookahead="2"/>
      
      <g:ref name="QuantifiedExpr" not-if="xpath1" lookahead="2"/>
      
      <g:ref name="TypeswitchExpr" if="xcore xquery10 xquery30 xquery31 xquery40" lookahead="2"/>
      <g:ref name="IfExpr" not-if="xpath1" lookahead="2"/>
      
      
      
      
      
      
      
      
      
      
      
      
      <g:ref name="OrExpr"/>
    </g:choice>
  </g:production>

  

  

  

  

  

  

  

  

  

  <g:production name="FLWORExpr10" exposition-name="FLWORExpr" if="xcore xquery10">
    
    <g:choice if="xcore" name="ForOrLetCore">
      <g:ref name="ForClause"/>
      <g:ref name="LetClause"/>
    </g:choice>
    
    
    <g:string>return</g:string>
    <g:ref name="ExprSingle"/>
  </g:production>

  

  

  

  <g:production name="ForClause" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>for</g:string>
    <g:string>$</g:string><g:ref name="VarName"/><g:optional>
      <g:ref name="TypeDeclaration"/>
    </g:optional><g:optional>
      <g:ref name="PositionalVar"/>
    </g:optional><g:string>in</g:string><g:ref name="ExprSingle"/>
    
    
  </g:production>

  

  

  <g:production name="PositionalVar" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>at</g:string>
    <g:string>$</g:string>
    <g:ref name="VarName"/>
  </g:production>

  

  <g:production name="LetClause" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>let</g:string>
    <g:choice>
      <g:sequence>
        <g:string>$</g:string>
        <g:ref name="VarName"/>
        <g:optional>
          <g:ref name="TypeDeclaration"/>
        </g:optional>
      </g:sequence>
      
    </g:choice><g:string>:=</g:string><g:ref name="ExprSingle"/>
    
    
  </g:production>

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  


  <g:production name="OrderByClause" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:choice break="false" name="OrderByOrOrderByStable">
      <g:sequence>
        <g:string>order</g:string>
        <g:string>by</g:string>
      </g:sequence>
      <g:sequence>
        <g:string process-value="yes">stable</g:string>
        <g:string>order</g:string>
        <g:string>by</g:string>
      </g:sequence>
    </g:choice>
    <g:ref name="OrderSpecList"/>
  </g:production>

  <g:production name="OrderSpecList" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:ref name="OrderSpec"/>
    <g:zeroOrMore name="OrderSpecListTail">
      <g:string>,</g:string>
      <g:ref name="OrderSpec"/>
    </g:zeroOrMore>
  </g:production>

  <g:production name="OrderSpec" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:ref name="ExprSingle"/>
    <g:ref name="OrderModifier"/>
  </g:production>

  <g:production name="OrderModifier" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:optional name="SortDirectionOption">
      <g:choice name="AscendingOrDescending">
        <g:ref name="Ascending"/>
        <g:ref name="Descending"/>
      </g:choice>
    </g:optional>
    <g:optional name="EmptyPosOption">
      <g:string>empty</g:string>
      <g:choice name="EmptyGreatestOrLeast">
        <g:ref name="Greatest"/>
        <g:ref name="Least"/>
      </g:choice>
    </g:optional>
    <g:optional name="CollationSpecOption">
      <g:string>collation</g:string>
      <g:ref name="URILiteral"/>
    </g:optional>
  </g:production>

  

  

  <g:production name="QuantifiedExpr" not-if="xpath1">
    <g:choice name="SomeOrEvery">
      <g:string process-value="yes">some</g:string>
      <g:string process-value="yes">every</g:string>
    </g:choice>
    <g:string>$</g:string>
    <g:ref name="VarName"/>
    <g:optional if="xcore xquery10 xquery30 xquery31 xquery40" name="QuantifiedTypeDeclarationOption">
      <g:ref name="TypeDeclaration"/>
    </g:optional>
    <g:string>in</g:string>
    <g:ref name="ExprSingle"/>
    <g:zeroOrMore name="QuantifiedVarDeclListTail">
      <g:string>,</g:string>
      <g:string>$</g:string>
      <g:ref name="VarName"/>
      <g:optional if="xcore xquery10 xquery30 xquery31 xquery40" name="QuantifiedTailTypeDeclarationOption">
        <g:ref name="TypeDeclaration"/>
      </g:optional>
      <g:string>in</g:string>
      <g:ref name="ExprSingle"/>
    </g:zeroOrMore>
    <g:string>satisfies</g:string>
    <g:ref name="ExprSingle"/>
  </g:production>

  

  

  

  <g:production name="TypeswitchExpr" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>typeswitch</g:string>
    <g:string>(</g:string>
    <g:ref name="Expr"/>
    <g:string>)</g:string>
    <g:oneOrMore name="CaseClauseList">
      <g:ref name="CaseClause"/>
    </g:oneOrMore>
    <g:string>default</g:string>
    
    <g:string if="xcore">$</g:string>
    <g:ref name="VarName" if="xcore"/>
    <g:string>return</g:string>
    <g:ref name="ExprSingle"/>
  </g:production>

  <g:production name="CaseClause" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>case</g:string>
    
    <g:string if="xcore">$</g:string>
    <g:ref name="VarName" if="xcore"/>
    <g:string if="xcore">as</g:string>
    <g:ref name="SequenceType" if="xcore xquery10"/>
    
    <g:string>return</g:string>
    <g:ref name="ExprSingle"/>
  </g:production>

  

  <g:production name="IfExpr" not-if="xpath1">
    <g:string>if</g:string>
    <g:string>(</g:string>
    <g:ref name="Expr"/>
    <g:string>)</g:string>
    <g:string>then</g:string>
    <g:ref name="ExprSingle"/>
    <g:string>else</g:string>
    <g:ref name="ExprSingle"/>
  </g:production>

  



  

  

  

  

  

  

  

  

  <g:exprProduction name="OperatorExpr" node-type="void">
    <g:level>
      <g:binary name="OrExpr" condition="&gt; 1">
        <g:string>or</g:string>
      </g:binary>
    </g:level>
    <g:level>
      <g:binary name="AndExpr" condition="&gt; 1">
        <g:string>and</g:string>
      </g:binary>
    </g:level>
    
    
    <g:level>
      
    </g:level>
    <g:level>
      
    </g:level>
    
    <g:level>
      
    </g:level>
    <g:level>
      
    </g:level>
    <g:level>
      
    </g:level>
    <g:level>
      
    </g:level>
    <g:level>
      
    </g:level>
    <g:level>
      
    </g:level>
    <g:level>
      
    </g:level>
    <g:level>
      
    </g:level>
    <g:level>
      <g:postfix name="CastableExpr" not-if="xpath1" prefix-seq-type="?" condition="&gt; 1">
        <g:sequence name="CastableExprOps">
          <g:string>castable</g:string>
          <g:string>as</g:string>
          <g:ref name="SingleType"/>
        </g:sequence>
      </g:postfix>
    </g:level>
    <g:level>
      <g:postfix name="CastExpr" not-if="xpath1" prefix-seq-type="?" condition="&gt; 1">
        <g:sequence name="CastExprOps">
          <g:string>cast</g:string>
          <g:string>as</g:string>
          <g:ref name="SingleType"/>
        </g:sequence>
      </g:postfix>
    </g:level>
    <g:level>
      
    </g:level>
    <g:level>
      
    </g:level>
    <g:level node-type="UnaryExpr" level-user-action="boolean keepUnary=false;">
      
    </g:level>
    
    <g:level>
      <g:primary name="ValueExpr">
        <g:choice name="ValueExprChoices">
          
          <g:ref name="ValidateExpr" if="xcore xquery10 xquery30 xquery31 xquery40" lookahead="2"/>
          
          <g:ref name="StepExpr" if="xcore"/>
          <g:ref name="ExtensionExpr" if="xcore xquery10 xquery30 xquery31 xquery40"/>
          
        </g:choice>
      </g:primary>
    </g:level>
  </g:exprProduction>

  

  

  

  <g:production name="ValidateExpr" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>validate</g:string>
    <g:optional>
      <g:choice>
        <g:ref name="ValidationMode"/>
        
      </g:choice>
    </g:optional>
    <g:ref name="Lbrace"/>
    <g:ref name="Expr"/>
    <g:ref name="Rbrace"/>
  </g:production>

  <g:production name="ValidationMode" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:choice name="VModeChoice">
      <g:string process-value="yes">lax</g:string>
      <g:string process-value="yes">strict</g:string>
    </g:choice>
  </g:production>

  <g:production name="ExtensionExpr" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:oneOrMore name="Pragmas">
      <g:ref name="Pragma"/>
    </g:oneOrMore>
    <g:ref name="Lbrace"/>
    <g:optional name="OptionalExtensionExpr">
      <g:ref name="Expr"/>
    </g:optional>
    <g:ref name="Rbrace"/>
  </g:production>

  <g:production name="Pragma" if="fulltext xcore xquery10 xquery30 xquery31 xquery40" whitespace-spec="explicit">
    <g:ref name="PragmaOpen"/>
    <g:optional name="OptionalWhitespaceBeforeQNameForPragma">
      <g:ref name="S"/>
    </g:optional>
    <g:ref name="QName" if="xcore xpath1 xpath20 xquery10 xslt2-patterns"/>
    <g:optional>
      <g:ref name="S"/>
      <g:ref name="PragmaContents"/>
    </g:optional>
    <g:ref name="PragmaClose"/>
  </g:production>

  <g:production name="PragmaContents" if="fulltext xcore xquery10 xquery30 xquery31 xquery40">
    <g:zeroOrMore name="PragmaContent" subtract-reg-expr="(Char* '#)' Char*)">
      <g:ref name="Char"/>
    </g:zeroOrMore>
  </g:production>

  

  

  

  

  

  <g:production name="StepExpr" node-type="void">
    <g:choice name="AxisOrFilterStep">
      
      
      
      <g:ref name="PrimaryExpr" if="xcore" lookahead="3"/>
      <g:ref name="AxisStep"/>
      
      
    </g:choice>
  </g:production>

  <g:production name="AxisStep">
    <g:choice name="ForwardOrReverseStep">
      <g:ref name="ReverseStep" lookahead="2"/>
      <g:ref name="ForwardStep"/>
    </g:choice>
    
  </g:production>

  <g:production name="ForwardStep" node-type="void">
    <g:choice name="ForwardAxisOrAbbrev">
      <g:sequence lookahead="2">
        <g:ref name="ForwardAxis"/>
        <g:ref name="NodeTest"/>
      </g:sequence>
      
    </g:choice>
  </g:production>

  <g:production name="ForwardAxis">
    <g:choice break="true" name="ForwardAxisNames">
      <g:sequence>
        <g:string process-value="yes">child</g:string>
        <g:string>::</g:string>
      </g:sequence>
      <g:sequence>
        <g:string process-value="yes">descendant</g:string>
        <g:string>::</g:string>
      </g:sequence>
      <g:sequence>
        <g:string process-value="yes">attribute</g:string>
        <g:string>::</g:string>
      </g:sequence>
      <g:sequence>
        <g:string process-value="yes">self</g:string>
        <g:string>::</g:string>
      </g:sequence>
      <g:sequence>
        <g:string process-value="yes">descendant-or-self</g:string>
        <g:string>::</g:string>
      </g:sequence>
      
      
      <g:sequence if="xcore xpath1 xpath20 xpath30 xpath31 xpath40 xpath40 xslt2-patterns xslt30-patterns xslt40-patterns">
        <g:string process-value="yes">namespace</g:string>
        <g:string>::</g:string>
      </g:sequence>
    </g:choice>
  </g:production>

  

  <g:production name="ReverseStep" node-type="void">
    <g:choice name="ReverseAxisOrAbbrev">
      <g:sequence>
        <g:ref name="ReverseAxis"/>
        <g:ref name="NodeTest"/>
      </g:sequence>
      
    </g:choice>
  </g:production>

  <g:production name="ReverseAxis">
    <g:choice break="true" name="ReverseAxisNames">
      <g:sequence>
        <g:string process-value="yes">parent</g:string>
        <g:string>::</g:string>
      </g:sequence>
      <g:sequence>
        <g:string process-value="yes">ancestor</g:string>
        <g:string>::</g:string>
      </g:sequence>
      
      
      <g:sequence>
        <g:string process-value="yes">ancestor-or-self</g:string>
        <g:string>::</g:string>
      </g:sequence>
    </g:choice>
  </g:production>

  

  <g:production name="NodeTest">
    <g:choice name="KindOrNameTest">
      <g:ref name="KindTest" lookahead="2"/>
      <g:ref name="NameTest"/>
    </g:choice>
  </g:production>

  <g:production name="NameTest">
    <g:choice name="QNameOrWildcard">
      <g:ref name="QName" if="xcore xpath1 xpath20 xquery10 xslt2-patterns"/>
      <g:ref name="Wildcard"/>
    </g:choice>
  </g:production>

  <g:production name="Wildcard" whitespace-spec="explicit">
    <g:choice break="true" name="WildcardChoice">
      <g:string process-value="yes">*</g:string>
      <g:ref name="NCNameColonStar" needs-exposition-parens="yes"/>
      <g:ref name="StarColonNCName" not-if="xpath1" needs-exposition-parens="yes"/>
      
    </g:choice>
  </g:production>

  

  

  

  

  

  

  

  

  

  

  <g:production name="PrimaryExpr" node-type="void">
    <g:choice name="PrimaryExprChoices" break="true">
      <g:ref name="Literal"/>
      <g:ref name="VarRef"/>
      <g:ref name="ParenthesizedExpr"/>
      
      <g:ref name="FunctionCall" lookahead="2"/>
      <g:ref name="OrderedExpr" if="xcore xquery10 xquery30 xquery31 xquery40" lookahead="2"/>
      <g:ref name="UnorderedExpr" if="xcore xquery10 xquery30 xquery31 xquery40" lookahead="2"/>
      <g:ref name="Constructor" if="xcore xquery10 xquery30" lookahead="2"/>
      
      
      
      
      
      
    </g:choice>
  </g:production>

  <g:production name="Literal" node-type="void">
    <g:choice name="NumericOrStringLit">
      <g:ref name="NumericLiteral"/>
      <g:ref name="StringLiteral"/>
    </g:choice>
  </g:production>

  <g:production name="NumericLiteral" node-type="void">
    <g:choice name="NumericLitChoice">
      <g:ref name="IntegerLiteral"/>
      <g:ref name="DecimalLiteral"/>
      <g:ref name="DoubleLiteral" not-if="xpath1"/>
    </g:choice>
  </g:production>

  <g:production name="VarRef" node-type="void">
    <g:string>$</g:string>
    <g:ref name="VarName" not-if="xpath40 xquery40"/>
    
  </g:production>

  <g:production name="VarName">
    <g:ref name="QName" if="xcore xpath1 xpath20 xquery10 xslt2-patterns"/>
  </g:production>

  <g:production name="ParenthesizedExpr">
    <g:string>(</g:string>
    <g:optional name="OptionalExpr" not-if="xpath1">
      <g:ref name="Expr"/>
    </g:optional>
    
    <g:string>)</g:string>
  </g:production>

  

  <g:production name="OrderedExpr" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>ordered</g:string>
    <g:ref name="Lbrace" not-if="xquery31 xquery40"/>
    <g:ref name="Expr" not-if="xquery31 xquery40"/>
    <g:ref name="Rbrace" not-if="xquery31 xquery40"/>
    
  </g:production>

  <g:production name="UnorderedExpr" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>unordered</g:string>
    <g:ref name="Lbrace" not-if="xquery31 xquery40"/>
    <g:ref name="Expr" not-if="xquery31 xquery40"/>
    <g:ref name="Rbrace" not-if="xquery31 xquery40"/>
    
  </g:production>

  <g:production name="FunctionCall" comment-id="parens" xgc-id="reserved-function-names">
    <g:ref name="FunctionQName" if="xcore xpath1 xpath20 xquery10 xslt2-patterns"/>
    <g:choice>
      <g:sequence if="xcore xpath1 xpath20 xquery10 xslt2-patterns">
        <g:string>(</g:string>
        <g:optional name="ArgList">
          <g:ref name="ExprSingle"/>
          <g:zeroOrMore name="ArgListTail">
            <g:string>,</g:string>
            <g:ref name="ExprSingle"/>
          </g:zeroOrMore>
        </g:optional>
        <g:string>)</g:string>
      </g:sequence>
      
    </g:choice>
  </g:production>

  

  

  

  <g:production name="Constructor" if="xcore xquery10 xquery30">
    <g:choice break="true" name="ConstructorChoice">
      
      <g:ref name="ComputedConstructor"/>
    </g:choice>
  </g:production>

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  <g:production name="ComputedConstructor" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:choice break="true" name="ComputedConstructorChoice">
      <g:ref name="CompDocConstructor"/>
      <g:ref name="CompElemConstructor"/>
      <g:ref name="CompAttrConstructor"/>
      
      <g:ref name="CompTextConstructor"/>
      <g:ref name="CompCommentConstructor"/>
      <g:ref name="CompPIConstructor"/>
    </g:choice>
  </g:production>

  <g:production name="CompDocConstructor" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>document</g:string>
    <g:ref name="Lbrace" not-if="xquery31 xquery40"/>
    <g:ref name="Expr" not-if="xquery31 xquery40"/>
    <g:ref name="Rbrace" not-if="xquery31 xquery40"/>
    
  </g:production>

  <g:production name="CompElemConstructor" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>element</g:string>
    <g:choice name="CompElemConstructorSpec">
      <g:ref name="QName" if="xcore xpath1 xpath20 xquery10 xslt2-patterns"/>
      <g:sequence>
        <g:ref name="Lbrace"/>
        <g:ref name="Expr"/>
        <g:ref name="Rbrace"/>
      </g:sequence>
    </g:choice>
    <g:ref name="Lbrace" if="xcore xquery10 xquery30"/>
    
    <g:ref if="xcore" name="ContentExpr"/>
    <g:ref name="Rbrace" if="xcore xquery10 xquery30"/>
    
    <g:ref if="xcore" name="Lbrace"/>
    <g:ref if="xcore" name="LocalNamespaceDecls"/>
    <g:ref if="xcore" name="Rbrace"/>
  </g:production>

  <g:production if="xcore" name="LocalNamespaceDecls">
    <g:zeroOrMore>
      <g:ref name="LocalNamespaceDecl"/>
    </g:zeroOrMore>
  </g:production>

  <g:production if="xcore" name="LocalNamespaceDecl">
    <g:string>namespace</g:string>
    <g:ref name="NCName"/>
    <g:ref name="Lbrace"/>
    <g:ref name="URILiteral"/>
    <g:ref name="Rbrace"/>
  </g:production>

  <g:production name="ContentExpr" if="xcore xquery10 xquery30">
    <g:ref name="Expr"/>
  </g:production>

  

  <g:production name="CompAttrConstructor" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>attribute</g:string>
    <g:choice name="CompAttrConstructorOpening">
      <g:ref name="QName" if="xcore xpath1 xpath20 xquery10 xslt2-patterns"/>
      <g:sequence>
        <g:ref name="Lbrace"/>
        <g:ref name="Expr"/>
        <g:ref name="Rbrace"/>
      </g:sequence>
    </g:choice>
    <g:ref name="Lbrace" if="xcore xquery10 xquery30"/>
    
    <g:ref if="xcore" name="Expr"/>
    <g:ref name="Rbrace" if="xcore xquery10 xquery30"/>
    
  </g:production>

  

  

  

  

  

  

  <g:production name="CompTextConstructor" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>text</g:string>
    <g:ref name="Lbrace" not-if="xquery31 xquery40"/>
    <g:ref name="Expr" not-if="xquery31 xquery40"/>
    <g:ref name="Rbrace" not-if="xquery31 xquery40"/>
    
  </g:production>

  <g:production name="CompCommentConstructor" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>comment</g:string>
    <g:ref name="Lbrace" not-if="xquery31 xquery40"/>
    <g:ref name="Expr" not-if="xquery31 xquery40"/>
    <g:ref name="Rbrace" not-if="xquery31 xquery40"/>
    
  </g:production>

  <g:production name="CompPIConstructor" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>processing-instruction</g:string>
    <g:choice name="CompXmlPIOpening">
      <g:ref name="NCName"/>
      <g:sequence>
        <g:ref name="Lbrace"/>
        <g:ref name="Expr"/>
        <g:ref name="Rbrace"/>
      </g:sequence>
    </g:choice>
    <g:ref name="Lbrace" not-if="xquery31 xquery40"/>
    <g:optional name="OptionalCompXmlPIExpr" not-if="xquery31 xquery40">
      <g:ref name="Expr"/>
    </g:optional>
    <g:ref name="Rbrace" not-if="xquery31 xquery40"/>
    
  </g:production>

  

  

  

  

  
  
  
  
  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  <g:production name="SingleType" not-if="xpath1">
    <g:ref name="AtomicType" not-if="xpath30 xpath31 xpath40 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns"/>
    
    <g:optional name="OptionalOccurrenceIndicator">
      <g:string process-value="yes">?</g:string>
    </g:optional>
  </g:production>

  <g:production name="TypeDeclaration" if="xcore xpath30 xpath31 xpath40 xpath40 xquery10 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:string>as</g:string>
    <g:ref name="SequenceType"/>
  </g:production>

  <g:production name="SequenceType" not-if="xpath1">
    <g:choice break="true" name="ItemTypeOrEmpty">
      <g:sequence lookahead="2">
        <g:string process-value="yes">empty-sequence</g:string>
        <g:string>(</g:string>
        <g:string>)</g:string>
      </g:sequence>
      <g:sequence>
        <g:ref name="ItemType"/>
        <g:optional name="OptionalOccurrenceIndicatorForSequenceType" lookahead="1">
          <g:ref name="OccurrenceIndicator"/>
        </g:optional>
      </g:sequence>
    </g:choice>
  </g:production>

  <g:production name="OccurrenceIndicator" xgc-id="occurrence-indicators" not-if="xpath1">
    <g:choice name="OccurrenceIndicatorOps">
      <g:string process-value="yes">?</g:string>
      <g:string process-value="yes">*</g:string>
      <g:ref node-type="void" name="Plus"/>
    </g:choice>
  </g:production>

  <g:production name="ItemType" not-if="xpath1">
    <g:choice break="false" name="ItemTypeChoice">
      <g:ref name="KindTest" lookahead="2"/>
      <g:sequence lookahead="2">
        <g:string process-value="yes">item</g:string>
        <g:string>(</g:string>
        <g:string>)</g:string>
      </g:sequence>
      
      
      
      <g:ref name="AtomicType" not-if="xpath30 xpath31 xpath40 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns"/>
      
      
      
    </g:choice>
  </g:production>

  <g:production name="AtomicType" not-if="xpath1 xpath30 xpath31 xpath40 xpath40 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:ref name="QName" if="xcore xpath1 xpath20 xquery10 xslt2-patterns"/>
  </g:production>

  

  <g:production name="KindTest" node-type="void">
    <g:choice break="true" name="KindTestChoice">
      <g:ref name="DocumentTest" not-if="xpath1"/>
      <g:ref name="ElementTest" not-if="xpath1"/>
      <g:ref name="AttributeTest" not-if="xpath1"/>
      <g:ref name="SchemaElementTest" not-if="xpath1"/>
      <g:ref name="SchemaAttributeTest" not-if="xpath1"/>
      <g:ref name="PITest"/>
      <g:ref name="CommentTest"/>
      <g:ref name="TextTest"/>
      
      <g:ref name="AnyKindTest"/>
    </g:choice>
  </g:production>

  <g:production name="AnyKindTest">
    <g:string>node</g:string>
    <g:string>(</g:string>
    <g:string>)</g:string>
  </g:production>

  <g:production name="DocumentTest" not-if="xpath1">
    <g:string>document-node</g:string>
    <g:string>(</g:string>
    <g:optional name="OptionalDocumentTestBody">
      <g:choice name="DocumentTestBodyChoice">
        <g:ref name="ElementTest"/>
        <g:ref name="SchemaElementTest"/>
      </g:choice>
    </g:optional>
    <g:string>)</g:string>
  </g:production>

  <g:production name="TextTest">
    <g:string>text</g:string>
    <g:string>(</g:string>
    <g:string>)</g:string>
  </g:production>

  <g:production name="CommentTest">
    <g:string>comment</g:string>
    <g:string>(</g:string>
    <g:string>)</g:string>
  </g:production>

  

  <g:production name="PITest">
    <g:string>processing-instruction</g:string>
    <g:string>(</g:string>
    <g:optional name="OptionalPITestBody">
      <g:choice name="NCNameForPIOrStringLit">
        <g:ref name="NCName" not-if="xpath1"/>
        <g:ref name="StringLiteral"/>
      </g:choice>
    </g:optional>
    <g:string>)</g:string>
  </g:production>

  <g:production name="AttributeTest" not-if="xpath1">
    <g:string>attribute</g:string>
    <g:string>(</g:string>
    <g:optional name="OptionalAttributeTestBody">
      <g:ref name="AttribNameOrWildcard" not-if="xpath40 xquery40"/>
      
      <g:optional name="AttributeTestBodyOptionalParam">
        <g:string>,</g:string>
        <g:ref name="TypeName"/>
      </g:optional>
    </g:optional>
    <g:string>)</g:string>
  </g:production>

  <g:production name="AttribNameOrWildcard" not-if="xpath1 xpath40 xquery40">
    <g:choice name="AttrNameOrWildcardChoice">
      <g:ref name="AttributeName"/>
      <g:string process-value="yes">*</g:string>
    </g:choice>
  </g:production>

  <g:production name="SchemaAttributeTest" not-if="xpath1">
    <g:string>schema-attribute</g:string>
    <g:string>(</g:string>
    <g:ref name="AttributeDeclaration"/>
    <g:string>)</g:string>
  </g:production>

  <g:production name="AttributeDeclaration" not-if="xpath1">
    <g:ref name="AttributeName"/>
  </g:production>

  <g:production name="ElementTest" not-if="xpath1">
    <g:string>element</g:string>
    <g:string>(</g:string>
    <g:optional name="OptionalElementTestBody">
      <g:ref name="ElementNameOrWildcard" not-if="xpath40 xquery40"/>
      
      <g:optional name="ElementTestBodyOptionalParam">
        <g:string>,</g:string>
        <g:ref name="TypeName"/>
        <g:optional name="Nillable">
          <g:string process-value="yes">?</g:string>
        </g:optional>
      </g:optional>
    </g:optional>
    <g:string>)</g:string>
  </g:production>

  <g:production name="ElementNameOrWildcard" not-if="xpath1 xpath40 xquery40">
    <g:choice name="ElemNameOrWildcardChoice">
      <g:ref name="ElementName"/>
      <g:string process-value="yes">*</g:string>
    </g:choice>
  </g:production>

  <g:production name="SchemaElementTest" not-if="xpath1">
    <g:string>schema-element</g:string>
    <g:string>(</g:string>
    <g:ref name="ElementDeclaration"/>
    <g:string>)</g:string>
  </g:production>

  <g:production name="ElementDeclaration" not-if="xpath1">
    <g:ref name="ElementName"/>
  </g:production>

  <g:production name="AttributeName" not-if="xpath1">
    <g:ref name="QName" if="xcore xpath1 xpath20 xquery10 xslt2-patterns"/>
  </g:production>

  <g:production name="ElementName" not-if="xpath1">
    <g:ref name="QName" if="xcore xpath1 xpath20 xquery10 xslt2-patterns"/>
  </g:production>

  

  <g:production name="TypeName" not-if="xpath1">
    <g:ref name="QName" if="xcore xpath1 xpath20 xquery10 xslt2-patterns"/>
  </g:production>

  

  

  

  

  

  
  
  
  
  
  
  
  
  

  

  

  

  

  

  <g:production name="URILiteral" if="fulltext xcore xquery10 xquery30 xquery31 xquery40" inline="false">
    <g:ref name="StringLiteral"/>
  </g:production>

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  

  
  

  

  

  

  <g:production name="NCName" show="no">
    
    
    <g:ref name="QName"/>
  </g:production>

  <g:production name="QName" show="no">
    <g:choice name="QNameChoiceList">
      <g:ref name="FunctionQName"/>
      
      
      <g:string process-value="yes" not-if="xpath1">attribute</g:string>
      <g:string process-value="yes">comment</g:string>
      <g:string process-value="yes" not-if="xpath1">document-node</g:string>
      <g:string process-value="yes" not-if="xpath1">element</g:string>
      <g:string process-value="yes" not-if="xpath1">empty-sequence</g:string>
      
      <g:string process-value="yes" not-if="xpath1">if</g:string>
      <g:string process-value="yes" not-if="xpath1">item</g:string>
      
      
      <g:string process-value="yes">node</g:string>
      <g:string process-value="yes">processing-instruction</g:string>
      <g:string process-value="yes" not-if="xpath1">schema-attribute</g:string>
      <g:string process-value="yes" not-if="xpath1">schema-element</g:string>
      
      <g:string process-value="yes">text</g:string>
      <g:string process-value="yes" if="xcore xpath20 xpath30 xpath31 xpath40 xpath40 xquery10 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">typeswitch</g:string>
      
    </g:choice>
  </g:production>

  <g:production name="FunctionQName" exposition-name="QName" show="no">
    <g:choice name="FunctionQNameChoiceList">
      <g:ref name="QNameToken" show="no"/>
      
      <g:ref name="Ascending" node-type="void" if="xcore xquery10 xquery30 xquery31 xquery40"/>
      <g:ref name="Descending" node-type="void" if="xcore xquery10 xquery30 xquery31 xquery40"/>
      <g:ref name="External" node-type="void" if="xcore xquery10 xquery30 xquery31 xquery40"/>
      <g:ref name="Greatest" node-type="void" if="xcore xquery10 xquery30 xquery31 xquery40"/>
      <g:ref name="Least" node-type="void" if="fulltext xcore xquery10 xquery30 xquery31 xquery40"/>
      
      
      
      
      <g:string process-value="yes">ancestor</g:string>
      <g:string process-value="yes">ancestor-or-self</g:string>
      <g:string process-value="yes">and</g:string>
      
      <g:string process-value="yes" if="update10 update30 xcore xpath20 xpath30 xpath31 xpath40 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns">as</g:string>
      <g:string process-value="yes" if="fulltext xcore xquery10 xquery30 xquery31 xquery40">at</g:string>
      
      <g:string process-value="yes" if="xcore xquery10 xquery30 xquery31 xquery40">base-uri</g:string>
      
      
      
      <g:string process-value="yes" if="xcore xquery10 xquery30 xquery31 xquery40">by</g:string>
      <g:string process-value="yes" if="fulltext xcore xquery10 xquery30 xquery31 xquery40">case</g:string>
      <g:string process-value="yes" not-if="xpath1">cast</g:string>
      <g:string process-value="yes" not-if="xpath1">castable</g:string>
      
      <g:string process-value="yes">child</g:string>
      <g:string process-value="yes" if="xcore xquery10 xquery30 xquery31 xquery40">collation</g:string>
      <g:string process-value="yes" if="xcore xquery10 xquery30 xquery31 xquery40">construction</g:string>
      
      
      
      
      <g:string process-value="yes" if="xcore xquery10 xquery30 xquery31 xquery40">copy-namespaces</g:string>
      
      
      
      <g:string process-value="yes" if="scripting xcore xquery10 xquery30 xquery31 xquery40">declare</g:string>
      <g:string process-value="yes" if="fulltext xcore xquery10 xquery30 xquery31 xquery40">default</g:string>
      
      <g:string process-value="yes">descendant</g:string>
      <g:string process-value="yes">descendant-or-self</g:string>
      
      
      
      
      
      
      <g:string process-value="yes" if="xcore xquery10 xquery30 xquery31 xquery40">document</g:string>
      
      <g:string process-value="yes" not-if="xpath1">else</g:string>
      <g:string process-value="yes" if="xcore xquery10 xquery30 xquery31 xquery40">empty</g:string>
      
      
      
      
      <g:string process-value="yes" not-if="xpath1">every</g:string>
      
      
      
      
      
      
      
      <g:string process-value="yes" not-if="xpath1">for</g:string>
      
      
      
      
      
      <g:string process-value="yes" if="xcore xquery10">function</g:string>
      
      
      
      
      
      
      <g:string process-value="yes" if="xcore xquery10 xquery30 xquery31 xquery40">import</g:string>
      <g:string process-value="yes" if="fulltext xcore xpath20 xpath30 xpath31 xpath40 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns">in</g:string>
      
      <g:string process-value="yes" if="xcore xquery10 xquery30 xquery31 xquery40">inherit</g:string>
      
      
      
      
      
      
      
      
      
      
      <g:string process-value="yes" if="xcore xquery10 xquery30 xquery31 xquery40">lax</g:string>
      
      <g:string process-value="yes" if="xcore xpath30 xpath31 xpath40 xpath40 xquery10 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">let</g:string>
      
      
      
      
      
      
      <g:string process-value="yes" if="xcore xquery10 xquery30 xquery31 xquery40">module</g:string>
      
      <g:string process-value="yes">namespace</g:string>
      
      
      
      <g:string process-value="yes" if="xcore xquery10 xquery30 xquery31 xquery40">no-inherit</g:string>
      <g:string process-value="yes" if="xcore xquery10 xquery30 xquery31 xquery40">no-preserve</g:string>
      
      
      
      
      
      <g:string process-value="yes" if="fulltext xcore xquery10 xquery30 xquery31 xquery40">option</g:string>
      <g:string process-value="yes">or</g:string>
      <g:string process-value="yes" if="xcore xquery10 xquery30 xquery31 xquery40">order</g:string>
      <g:string process-value="yes" if="fulltext xcore xquery10 xquery30 xquery31 xquery40">ordered</g:string>
      <g:string process-value="yes" if="xcore xquery10 xquery30 xquery31 xquery40">ordering</g:string>
      
      
      <g:string process-value="yes">parent</g:string>
      
      
      
      
      
      
      <g:string process-value="yes" if="xcore xquery10 xquery30 xquery31 xquery40">preserve</g:string>
      
      
      
      
      <g:string process-value="yes" if="update10 update30 xcore xpath20 xpath30 xpath31 xpath40 xpath40 xquery10 xquery30 xquery31 xquery40 xslt2-patterns xslt30-patterns xslt40-patterns">return</g:string>
      
      
      
      <g:string process-value="yes" not-if="xpath1">satisfies</g:string>
      <g:string process-value="yes" if="xcore xquery10 xquery30 xquery31 xquery40">schema</g:string>
      
      <g:string process-value="yes">self</g:string>
      
      
      
      
      
      <g:string process-value="yes" not-if="xpath1">some</g:string>
      <g:string process-value="yes" if="xcore xquery10 xquery30 xquery31 xquery40">stable</g:string>
      
      
      
      <g:string process-value="yes" if="xcore xquery10 xquery30 xquery31 xquery40">strict</g:string>
      <g:string process-value="yes" if="xcore xquery10 xquery30 xquery31 xquery40">strip</g:string>
      <g:string process-value="yes" not-if="xpath1">then</g:string>
      
      
      
      
      
      
      
      
      
      <g:string process-value="yes" if="xcore xquery10 xquery30 xquery31 xquery40">unordered</g:string>
      
      
      
      <g:string process-value="yes" if="xcore xquery10 xquery30 xquery31 xquery40">validate</g:string>
      
      <g:string process-value="yes" if="xcore xquery10 xquery30 xquery31 xquery40">variable</g:string>
      
      
      
      
      
      
      
      
      
      
      
      
    </g:choice>
  </g:production>

  


  

  

  <g:token name="DirCommentContentDoubleDashError" delimiter-type="hide" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:char force-quote="single">-</g:char>
    <g:char force-quote="single">-</g:char>
  </g:token>

  <g:token name="RbraceError" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>}</g:string>
  </g:token>

  

  <g:token name="AmpersandError" if="xcore xquery10 xquery30 xquery31 xquery40" show="no">
    <g:string>&amp;</g:string>
  </g:token>

  
  <g:token name="PITargetError" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:choice name="PITargetErrorVariations">
      <g:string>XML</g:string>
      <g:string>XMl</g:string>
      <g:string>XmL</g:string>
      <g:string>Xml</g:string>
      <g:string>xML</g:string>
      <g:string>xMl</g:string>
      <g:string>xmL</g:string>
      <g:string>xml</g:string>
    </g:choice>
  </g:token>

  
  <g:token name="NumericLiteralError" show="no">
    <g:choice name="DoubleStringNumericLiteralError">
      <g:sequence>
        <g:string>.</g:string>
        <g:ref name="Digits"/>
      </g:sequence>
      <g:sequence>
        <g:ref name="Digits"/>
        <g:optional name="DoubleOptionFractionPartNumericLiteralError">
          <g:string>.</g:string>
          <g:zeroOrMore name="DoubleFractionPartNumericLiteralError">
            <g:charClass>
              <g:charRange minChar="0" maxChar="9"/>
            </g:charClass>
          </g:zeroOrMore>
        </g:optional>
      </g:sequence>
    </g:choice>
    <g:optional name="NumericLiteralErrorOptionalFractionPart">
      <g:charClass>
        <g:char>e</g:char>
        <g:char>E</g:char>
      </g:charClass>
      <g:optional name="DoubleNegOrPosNumericLiteralError">
        <g:charClass>
          <g:char>+</g:char>
          <g:char>-</g:char>
        </g:charClass>
      </g:optional>
      <g:ref name="Digits"/>
    </g:optional>
    <g:charClass>
      <g:charRange minChar="a" maxChar="z"/>
      <g:charRange minChar="A" maxChar="Z"/>
    </g:charClass>
  </g:token>

  

  <g:token name="Slash">
    <g:string>/</g:string>
  </g:token>

  <g:token name="SlashSlash">
    <g:string>//</g:string>
  </g:token>

  <g:token name="Greatest" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>greatest</g:string>
  </g:token>

  <g:token name="Least" if="fulltext xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>least</g:string>
  </g:token>

  <g:token name="External" value-type="id" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>external</g:string>
  </g:token>

  <g:token name="Lbrace" if="fulltext update10 update30 xcore xpath30 xpath31 xpath40 xpath40 xquery10 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:string>{</g:string>
  </g:token>

  <g:token name="Rbrace" if="fulltext xcore xpath30 xpath31 xpath40 xpath40 xquery10 xquery30 xquery31 xquery40 xslt30-patterns xslt40-patterns">
    <g:string>}</g:string>
  </g:token>

  <g:token name="Ascending" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>ascending</g:string>
  </g:token>

  <g:token name="Descending" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>descending</g:string>
  </g:token>

  <g:token name="LeftAngleBracket">
    <g:string>&lt;</g:string>
  </g:token>

  <g:token name="Plus" value-type="id">
    <g:string>+</g:string>
  </g:token>

  <g:token name="Minus" value-type="id">
    <g:string>-</g:string>
  </g:token>

  <g:token name="PragmaOpen" if="fulltext xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>(#</g:string>
  </g:token>

  <g:token name="PragmaClose" if="fulltext xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>#)</g:string>
  </g:token>

  

  <g:token name="NCNameColonStar" value-type="string" inline="true">
    <g:ref name="NCNameTok"/>
    <g:string not-if="xpath31 xpath40 xpath40 xquery31 xquery40">:</g:string>
    <g:string not-if="xpath31 xpath40 xpath40 xquery31 xquery40">*</g:string>
    
  </g:token>

  <g:token name="StarColonNCName" value-type="string" not-if="xpath1" inline="true">
    <g:string not-if="xpath31 xpath40 xpath40 xquery31 xquery40">*</g:string>
    <g:string not-if="xpath31 xpath40 xpath40 xquery31 xquery40">:</g:string>
    
    <g:ref name="NCNameTok"/>
  </g:token>

  

  

  

  

  

  

  

  <g:token name="OpenQuot" delimiter-type="hide" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>"</g:string>
  </g:token>

  <g:token name="CloseQuot" delimiter-type="hide" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>"</g:string>
  </g:token>

  

  

  

  

  

  

  <g:token name="DirCommentContentChar" delimiter-type="hide" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:ref name="Char" subtract-reg-expr="'-'"/>
  </g:token>

  <g:token name="DirCommentContentDashChar" delimiter-type="hide" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:char force-quote="single">-</g:char>
    <g:ref name="Char" subtract-reg-expr="'-'"/>
  </g:token>

  <g:token name="ProcessingInstructionStart" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>&lt;?</g:string>
  </g:token>

  <g:token name="ProcessingInstructionEnd" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>?&gt;</g:string>
  </g:token>

  <g:token name="CdataSectionStart" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>&lt;![CDATA[</g:string>
  </g:token>

  
  <g:token name="CdataSectionEnd" if="xcore xquery10 xquery30 xquery31 xquery40">
    <g:string>]]&gt;</g:string>
  </g:token>

  

  

  

  

  
  

  <g:token name="IntegerLiteral" inline="false" value-type="number" delimiter-type="nondelimiting">
    <g:ref name="Digits"/>
  </g:token>

  <g:token name="DecimalLiteral" inline="false" value-type="number" whitespace-spec="explicit" delimiter-type="nondelimiting">
    <g:choice name="DecimalString">
      <g:sequence>
        <g:string>.</g:string>
        <g:ref name="Digits"/>
      </g:sequence>
      <g:sequence>
        <g:ref name="Digits"/>
        <g:string>.</g:string>
        <g:zeroOrMore name="DecimalFractionPart">
          <g:charClass>
            <g:charRange minChar="0" maxChar="9"/>
          </g:charClass>
        </g:zeroOrMore>
      </g:sequence>
    </g:choice>
  </g:token>

  <g:token name="DoubleLiteral" inline="false" delimiter-type="nondelimiting" value-type="number" whitespace-spec="explicit" not-if="xpath1">
    <g:choice name="DoubleString">
      <g:sequence>
        <g:string>.</g:string>
        <g:ref name="Digits"/>
      </g:sequence>
      <g:sequence>
        <g:ref name="Digits"/>
        <g:optional name="DoubleOptionFractionPart">
          <g:string>.</g:string>
          <g:zeroOrMore name="DoubleFractionPart">
            <g:charClass>
              <g:charRange minChar="0" maxChar="9"/>
            </g:charClass>
          </g:zeroOrMore>
        </g:optional>
      </g:sequence>
    </g:choice>
    <g:charClass>
      <g:char>e</g:char>
      <g:char>E</g:char>
    </g:charClass>
    <g:optional name="DoubleNegOrPos">
      <g:charClass>
        <g:char>+</g:char>
        <g:char>-</g:char>
      </g:charClass>
    </g:optional>
    <g:ref name="Digits"/>
  </g:token>

  <g:token name="StringLiteral" inline="false" value-type="string" whitespace-spec="explicit" delimiter-type="delimiting">
    <g:choice name="StringDilimitType">
      <g:sequence>
        <g:string>"</g:string>
        <g:zeroOrMore name="CharsInQuote">
          <g:choice name="QuoteTypeChar">
            
            
            <g:ref name="EscapeQuot" not-if="xpath1"/>
            <g:complement>
              <g:charClass>
                <g:char>"</g:char>
                
              </g:charClass>
            </g:complement>
          </g:choice>
        </g:zeroOrMore>
        <g:string>"</g:string>
      </g:sequence>
      <g:sequence>
        <g:string>'</g:string>
        <g:zeroOrMore name="CharsInApos">
          <g:choice name="AposTypeChar">
            
            
            <g:ref name="EscapeApos" not-if="xpath1"/>
            <g:complement>
              <g:charClass>
                <g:char>'</g:char>
                
              </g:charClass>
            </g:complement>
          </g:choice>
        </g:zeroOrMore>
        <g:string>'</g:string>
      </g:sequence>
    </g:choice>
  </g:token>

  

  

  

  <g:token name="EscapeQuot" inline="false" delimiter-type="hide" not-if="xpath1">
    <g:string>""</g:string>
  </g:token>

  <g:token name="EscapeApos" inline="false" delimiter-type="hide" not-if="xpath1">
    <g:string>''</g:string>
  </g:token>

  <g:token name="ElementContentChar" delimiter-type="hide" if="xcore xquery10 xquery30 xquery31 xquery40" inline="false" value-type="string">
    <g:ref name="Char" subtract-reg-expr="[{}&lt;&amp;]"/>
  </g:token>

  <g:token name="QuotAttrContentChar" delimiter-type="hide" if="xcore xquery10 xquery30 xquery31 xquery40" inline="false" value-type="string">
    <g:ref name="Char" subtract-reg-expr="[&quot;{}&lt;&amp;]"/>
  </g:token>

  <g:token name="AposAttrContentChar" delimiter-type="hide" if="xcore xquery10 xquery30 xquery31 xquery40" inline="false" value-type="string">
    <g:ref name="Char" subtract-reg-expr="['{}&lt;&amp;]"/>
  </g:token>

  

  

  <g:token name="PITarget" delimiter-type="hide" inline="false" if="xcore xquery10 xquery30 xquery31 xquery40" value-type="string" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml#NT-PITarget" xgc-id="xml-version">
    <g:ref name="NCNameTok"/>
  </g:token>

  

  <g:token name="QNameToken" exposition-name="QName" delimiter-type="nondelimiting" inline="false" node-type="void" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml-names/#NT-QName" xgc-id="xml-version">
    <g:optional name="QNamePrefixAndDelimiter">
      <g:ref name="NCNameTok"/>
      <g:string>:</g:string>
    </g:optional>
    <g:ref name="LocalPart"/>
  </g:token>

  <g:token name="NCNameTok" exposition-name="NCName" delimiter-type="nondelimiting" inline="false" value-type="string" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml-names/#NT-NCName" xgc-id="xml-version">
    <g:ref name="Nmstart"/>
    <g:zeroOrMore name="NCNameTail">
      <g:ref name="Nmchar"/>
    </g:zeroOrMore>
  </g:token>

  <g:token name="S" inline="false" if="fulltext xcore xquery10 xquery30 xquery31 xquery40" is-xml="yes" xgc-id="xml-version" xhref="http://www.w3.org/TR/REC-xml#NT-S" delimiter-type="delimiting">
    <g:oneOrMore name="SignificantWhitespace">
      <g:ref name="WhitespaceChar"/>
    </g:oneOrMore>
  </g:token>

  <g:token name="Char" inline="false" delimiter-type="hide" value-type="string" is-xml="yes" xgc-id="xml-version" xhref="http://www.w3.org/TR/REC-xml#NT-Char">
    <g:charClass>
      <g:charCode value="0009"/>
      <g:charCode value="000D"/>
      <g:charCode value="000A"/>
      
      <g:charCodeRange minValue="0020" maxValue="FFFD"/>
    </g:charClass>
  </g:token>

  

  <g:token name="Digits" delimiter-type="hide" inline="false" is-local-to-terminal-symbol="yes">
    <g:oneOrMore name="DigitsString">
      <g:charClass>
        <g:charRange minChar="0" maxChar="9"/>
      </g:charClass>
    </g:oneOrMore>
  </g:token>

  

  
   

  

  
  <g:token name="WhitespaceChar" inline="false" show="no">
    <g:charClass>
      
      
      
      
      
      
      
      
      
      <g:charCode value="0009"/>
      <g:charCode value="000D"/>
      <g:charCode value="000A"/>
      
      
      <g:charCode value="0020"/>
    </g:charClass>
  </g:token>

  <g:token name="LocalPart" value-type="string" show="no" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml-names/#NT-LocalPart" xgc-id="xml-version">
    <g:ref name="NCNameTok"/>
  </g:token>

  <g:token name="Nmstart" inline="false" show="no">
    <g:choice name="NmstartChar">
      <g:ref name="Letter"/>
      <g:string>_</g:string>
    </g:choice>
  </g:token>

  <g:token name="Nmchar" inline="false" show="no">
    <g:choice name="NmcharChoice">
      <g:ref name="Letter"/>
      <g:ref name="CombiningChar"/>
      <g:ref name="Extender"/>
      <g:ref name="Digit"/>
      <g:string>.</g:string>
      <g:string>-</g:string>
      <g:string>_</g:string>
    </g:choice>
  </g:token>

  <g:token name="Letter" inline="false" is-macro="yes" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml#NT-Letter" xgc-id="xml-version" show="no">
    <g:choice name="LetterChars">
      <g:ref name="BaseChar"/>
      <g:ref name="Ideographic"/>
    </g:choice>
  </g:token>

  <g:token name="BaseChar" inline="false" is-macro="yes" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml#NT-BaseChar" xgc-id="xml-version" show="no">
    <g:charClass>
      <g:charCodeRange minValue="0041" maxValue="005a"/>
      <g:charCodeRange minValue="0061" maxValue="007a"/>
      <g:charCodeRange minValue="00c0" maxValue="00d6"/>
      <g:charCodeRange minValue="00d8" maxValue="00f6"/>
      <g:charCodeRange minValue="00f8" maxValue="00ff"/>
      <g:charCodeRange minValue="0100" maxValue="0131"/>
      <g:charCodeRange minValue="0134" maxValue="013e"/>
      <g:charCodeRange minValue="0141" maxValue="0148"/>
      <g:charCodeRange minValue="014a" maxValue="017e"/>
      <g:charCodeRange minValue="0180" maxValue="01c3"/>
      <g:charCodeRange minValue="01cd" maxValue="01f0"/>
      <g:charCodeRange minValue="01f4" maxValue="01f5"/>
      <g:charCodeRange minValue="01fa" maxValue="0217"/>
      <g:charCodeRange minValue="0250" maxValue="02a8"/>
      <g:charCodeRange minValue="02bb" maxValue="02c1"/>
      <g:charCode value="0386"/>
      <g:charCodeRange minValue="0388" maxValue="038a"/>
      <g:charCode value="038c"/>
      <g:charCodeRange minValue="038e" maxValue="03a1"/>
      <g:charCodeRange minValue="03a3" maxValue="03ce"/>
      <g:charCodeRange minValue="03d0" maxValue="03d6"/>
      <g:charCode value="03da"/>
      <g:charCode value="03dc"/>
      <g:charCode value="03de"/>
      <g:charCode value="03e0"/>
      <g:charCodeRange minValue="03e2" maxValue="03f3"/>
      <g:charCodeRange minValue="0401" maxValue="040c"/>
      <g:charCodeRange minValue="040e" maxValue="044f"/>
      <g:charCodeRange minValue="0451" maxValue="045c"/>
      <g:charCodeRange minValue="045e" maxValue="0481"/>
      <g:charCodeRange minValue="0490" maxValue="04c4"/>
      <g:charCodeRange minValue="04c7" maxValue="04c8"/>
      <g:charCodeRange minValue="04cb" maxValue="04cc"/>
      <g:charCodeRange minValue="04d0" maxValue="04eb"/>
      <g:charCodeRange minValue="04ee" maxValue="04f5"/>
      <g:charCodeRange minValue="04f8" maxValue="04f9"/>
      <g:charCodeRange minValue="0531" maxValue="0556"/>
      <g:charCode value="0559"/>
      <g:charCodeRange minValue="0561" maxValue="0586"/>
      <g:charCodeRange minValue="05d0" maxValue="05ea"/>
      <g:charCodeRange minValue="05f0" maxValue="05f2"/>
      <g:charCodeRange minValue="0621" maxValue="063a"/>
      <g:charCodeRange minValue="0641" maxValue="064a"/>
      <g:charCodeRange minValue="0671" maxValue="06b7"/>
      <g:charCodeRange minValue="06ba" maxValue="06be"/>
      <g:charCodeRange minValue="06c0" maxValue="06ce"/>
      <g:charCodeRange minValue="06d0" maxValue="06d3"/>
      <g:charCode value="06d5"/>
      <g:charCodeRange minValue="06e5" maxValue="06e6"/>
      <g:charCodeRange minValue="0905" maxValue="0939"/>
      <g:charCode value="093d"/>
      <g:charCodeRange minValue="0958" maxValue="0961"/>
      <g:charCodeRange minValue="0985" maxValue="098c"/>
      <g:charCodeRange minValue="098f" maxValue="0990"/>
      <g:charCodeRange minValue="0993" maxValue="09a8"/>
      <g:charCodeRange minValue="09aa" maxValue="09b0"/>
      <g:charCode value="09b2"/>
      <g:charCodeRange minValue="09b6" maxValue="09b9"/>
      <g:charCodeRange minValue="09dc" maxValue="09dd"/>
      <g:charCodeRange minValue="09df" maxValue="09e1"/>
      <g:charCodeRange minValue="09f0" maxValue="09f1"/>
      <g:charCodeRange minValue="0a05" maxValue="0a0a"/>
      <g:charCodeRange minValue="0a0f" maxValue="0a10"/>
      <g:charCodeRange minValue="0a13" maxValue="0a28"/>
      <g:charCodeRange minValue="0a2a" maxValue="0a30"/>
      <g:charCodeRange minValue="0a32" maxValue="0a33"/>
      <g:charCodeRange minValue="0a35" maxValue="0a36"/>
      <g:charCodeRange minValue="0a38" maxValue="0a39"/>
      <g:charCodeRange minValue="0a59" maxValue="0a5c"/>
      <g:charCode value="0a5e"/>
      <g:charCodeRange minValue="0a72" maxValue="0a74"/>
      <g:charCodeRange minValue="0a85" maxValue="0a8b"/>
      <g:charCode value="0a8d"/>
      <g:charCodeRange minValue="0a8f" maxValue="0a91"/>
      <g:charCodeRange minValue="0a93" maxValue="0aa8"/>
      <g:charCodeRange minValue="0aaa" maxValue="0ab0"/>
      <g:charCodeRange minValue="0ab2" maxValue="0ab3"/>
      <g:charCodeRange minValue="0ab5" maxValue="0ab9"/>
      <g:charCode value="0abd"/>
      <g:charCode value="0ae0"/>
      <g:charCodeRange minValue="0b05" maxValue="0b0c"/>
      <g:charCodeRange minValue="0b0f" maxValue="0b10"/>
      <g:charCodeRange minValue="0b13" maxValue="0b28"/>
      <g:charCodeRange minValue="0b2a" maxValue="0b30"/>
      <g:charCodeRange minValue="0b32" maxValue="0b33"/>
      <g:charCodeRange minValue="0b36" maxValue="0b39"/>
      <g:charCode value="0b3d"/>
      <g:charCodeRange minValue="0b5c" maxValue="0b5d"/>
      <g:charCodeRange minValue="0b5f" maxValue="0b61"/>
      <g:charCodeRange minValue="0b85" maxValue="0b8a"/>
      <g:charCodeRange minValue="0b8e" maxValue="0b90"/>
      <g:charCodeRange minValue="0b92" maxValue="0b95"/>
      <g:charCodeRange minValue="0b99" maxValue="0b9a"/>
      <g:charCode value="0b9c"/>
      <g:charCodeRange minValue="0b9e" maxValue="0b9f"/>
      <g:charCodeRange minValue="0ba3" maxValue="0ba4"/>
      <g:charCodeRange minValue="0ba8" maxValue="0baa"/>
      <g:charCodeRange minValue="0bae" maxValue="0bb5"/>
      <g:charCodeRange minValue="0bb7" maxValue="0bb9"/>
      <g:charCodeRange minValue="0c05" maxValue="0c0c"/>
      <g:charCodeRange minValue="0c0e" maxValue="0c10"/>
      <g:charCodeRange minValue="0c12" maxValue="0c28"/>
      <g:charCodeRange minValue="0c2a" maxValue="0c33"/>
      <g:charCodeRange minValue="0c35" maxValue="0c39"/>
      <g:charCodeRange minValue="0c60" maxValue="0c61"/>
      <g:charCodeRange minValue="0c85" maxValue="0c8c"/>
      <g:charCodeRange minValue="0c8e" maxValue="0c90"/>
      <g:charCodeRange minValue="0c92" maxValue="0ca8"/>
      <g:charCodeRange minValue="0caa" maxValue="0cb3"/>
      <g:charCodeRange minValue="0cb5" maxValue="0cb9"/>
      <g:charCode value="0cde"/>
      <g:charCodeRange minValue="0ce0" maxValue="0ce1"/>
      <g:charCodeRange minValue="0d05" maxValue="0d0c"/>
      <g:charCodeRange minValue="0d0e" maxValue="0d10"/>
      <g:charCodeRange minValue="0d12" maxValue="0d28"/>
      <g:charCodeRange minValue="0d2a" maxValue="0d39"/>
      <g:charCodeRange minValue="0d60" maxValue="0d61"/>
      <g:charCodeRange minValue="0e01" maxValue="0e2e"/>
      <g:charCode value="0e30"/>
      <g:charCodeRange minValue="0e32" maxValue="0e33"/>
      <g:charCodeRange minValue="0e40" maxValue="0e45"/>
      <g:charCodeRange minValue="0e81" maxValue="0e82"/>
      <g:charCode value="0e84"/>
      <g:charCodeRange minValue="0e87" maxValue="0e88"/>
      <g:charCode value="0e8a"/>
      <g:charCode value="0e8d"/>
      <g:charCodeRange minValue="0e94" maxValue="0e97"/>
      <g:charCodeRange minValue="0e99" maxValue="0e9f"/>
      <g:charCodeRange minValue="0ea1" maxValue="0ea3"/>
      <g:charCode value="0ea5"/>
      <g:charCode value="0ea7"/>
      <g:charCodeRange minValue="0eaa" maxValue="0eab"/>
      <g:charCodeRange minValue="0ead" maxValue="0eae"/>
      <g:charCode value="0eb0"/>
      <g:charCodeRange minValue="0eb2" maxValue="0eb3"/>
      <g:charCode value="0ebd"/>
      <g:charCodeRange minValue="0ec0" maxValue="0ec4"/>
      <g:charCodeRange minValue="0f40" maxValue="0f47"/>
      <g:charCodeRange minValue="0f49" maxValue="0f69"/>
      <g:charCodeRange minValue="10a0" maxValue="10c5"/>
      <g:charCodeRange minValue="10d0" maxValue="10f6"/>
      <g:charCode value="1100"/>
      <g:charCodeRange minValue="1102" maxValue="1103"/>
      <g:charCodeRange minValue="1105" maxValue="1107"/>
      <g:charCode value="1109"/>
      <g:charCodeRange minValue="110b" maxValue="110c"/>
      <g:charCodeRange minValue="110e" maxValue="1112"/>
      <g:charCode value="113c"/>
      <g:charCode value="113e"/>
      <g:charCode value="1140"/>
      <g:charCode value="114c"/>
      <g:charCode value="114e"/>
      <g:charCode value="1150"/>
      <g:charCodeRange minValue="1154" maxValue="1155"/>
      <g:charCode value="1159"/>
      <g:charCodeRange minValue="115f" maxValue="1161"/>
      <g:charCode value="1163"/>
      <g:charCode value="1165"/>
      <g:charCode value="1167"/>
      <g:charCode value="1169"/>
      <g:charCodeRange minValue="116d" maxValue="116e"/>
      <g:charCodeRange minValue="1172" maxValue="1173"/>
      <g:charCode value="1175"/>
      <g:charCode value="119e"/>
      <g:charCode value="11a8"/>
      <g:charCode value="11ab"/>
      <g:charCodeRange minValue="11ae" maxValue="11af"/>
      <g:charCodeRange minValue="11b7" maxValue="11b8"/>
      <g:charCode value="11ba"/>
      <g:charCodeRange minValue="11bc" maxValue="11c2"/>
      <g:charCode value="11eb"/>
      <g:charCode value="11f0"/>
      <g:charCode value="11f9"/>
      <g:charCodeRange minValue="1e00" maxValue="1e9b"/>
      <g:charCodeRange minValue="1ea0" maxValue="1ef9"/>
      <g:charCodeRange minValue="1f00" maxValue="1f15"/>
      <g:charCodeRange minValue="1f18" maxValue="1f1d"/>
      <g:charCodeRange minValue="1f20" maxValue="1f45"/>
      <g:charCodeRange minValue="1f48" maxValue="1f4d"/>
      <g:charCodeRange minValue="1f50" maxValue="1f57"/>
      <g:charCode value="1f59"/>
      <g:charCode value="1f5b"/>
      <g:charCode value="1f5d"/>
      <g:charCodeRange minValue="1f5f" maxValue="1f7d"/>
      <g:charCodeRange minValue="1f80" maxValue="1fb4"/>
      <g:charCodeRange minValue="1fb6" maxValue="1fbc"/>
      <g:charCode value="1fbe"/>
      <g:charCodeRange minValue="1fc2" maxValue="1fc4"/>
      <g:charCodeRange minValue="1fc6" maxValue="1fcc"/>
      <g:charCodeRange minValue="1fd0" maxValue="1fd3"/>
      <g:charCodeRange minValue="1fd6" maxValue="1fdb"/>
      <g:charCodeRange minValue="1fe0" maxValue="1fec"/>
      <g:charCodeRange minValue="1ff2" maxValue="1ff4"/>
      <g:charCodeRange minValue="1ff6" maxValue="1ffc"/>
      <g:charCode value="2126"/>
      <g:charCodeRange minValue="212a" maxValue="212b"/>
      <g:charCode value="212e"/>
      <g:charCodeRange minValue="2180" maxValue="2182"/>
      <g:charCodeRange minValue="3041" maxValue="3094"/>
      <g:charCodeRange minValue="30a1" maxValue="30fa"/>
      <g:charCodeRange minValue="3105" maxValue="312c"/>
      <g:charCodeRange minValue="ac00" maxValue="d7a3"/>
    </g:charClass>
  </g:token>

  <g:token name="Ideographic" inline="false" is-macro="yes" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml#NT-Ideographic" xgc-id="xml-version" show="no">
    <g:charClass>
      <g:charCodeRange minValue="4e00" maxValue="9fa5"/>
      <g:charCode value="3007"/>
      <g:charCodeRange minValue="3021" maxValue="3029"/>
    </g:charClass>
  </g:token>

  <g:token name="CombiningChar" inline="false" is-macro="yes" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml#NT-CombiningChar" xgc-id="xml-version" show="no">
    <g:charClass>
      <g:charCodeRange minValue="0300" maxValue="0345"/>
      <g:charCodeRange minValue="0360" maxValue="0361"/>
      <g:charCodeRange minValue="0483" maxValue="0486"/>
      <g:charCodeRange minValue="0591" maxValue="05a1"/>
      <g:charCodeRange minValue="05a3" maxValue="05b9"/>
      <g:charCodeRange minValue="05bb" maxValue="05bd"/>
      <g:charCode value="05bf"/>
      <g:charCodeRange minValue="05c1" maxValue="05c2"/>
      <g:charCode value="05c4"/>
      <g:charCodeRange minValue="064b" maxValue="0652"/>
      <g:charCode value="0670"/>
      <g:charCodeRange minValue="06d6" maxValue="06dc"/>
      <g:charCodeRange minValue="06dd" maxValue="06df"/>
      <g:charCodeRange minValue="06e0" maxValue="06e4"/>
      <g:charCodeRange minValue="06e7" maxValue="06e8"/>
      <g:charCodeRange minValue="06ea" maxValue="06ed"/>
      <g:charCodeRange minValue="0901" maxValue="0903"/>
      <g:charCode value="093c"/>
      <g:charCodeRange minValue="093e" maxValue="094c"/>
      <g:charCode value="094d"/>
      <g:charCodeRange minValue="0951" maxValue="0954"/>
      <g:charCodeRange minValue="0962" maxValue="0963"/>
      <g:charCodeRange minValue="0981" maxValue="0983"/>
      <g:charCode value="09bc"/>
      <g:charCode value="09be"/>
      <g:charCode value="09bf"/>
      <g:charCodeRange minValue="09c0" maxValue="09c4"/>
      <g:charCodeRange minValue="09c7" maxValue="09c8"/>
      <g:charCodeRange minValue="09cb" maxValue="09cd"/>
      <g:charCode value="09d7"/>
      <g:charCodeRange minValue="09e2" maxValue="09e3"/>
      <g:charCode value="0a02"/>
      <g:charCode value="0a3c"/>
      <g:charCode value="0a3e"/>
      <g:charCode value="0a3f"/>
      <g:charCodeRange minValue="0a40" maxValue="0a42"/>
      <g:charCodeRange minValue="0a47" maxValue="0a48"/>
      <g:charCodeRange minValue="0a4b" maxValue="0a4d"/>
      <g:charCodeRange minValue="0a70" maxValue="0a71"/>
      <g:charCodeRange minValue="0a81" maxValue="0a83"/>
      <g:charCode value="0abc"/>
      <g:charCodeRange minValue="0abe" maxValue="0ac5"/>
      <g:charCodeRange minValue="0ac7" maxValue="0ac9"/>
      <g:charCodeRange minValue="0acb" maxValue="0acd"/>
      <g:charCodeRange minValue="0b01" maxValue="0b03"/>
      <g:charCode value="0b3c"/>
      <g:charCodeRange minValue="0b3e" maxValue="0b43"/>
      <g:charCodeRange minValue="0b47" maxValue="0b48"/>
      <g:charCodeRange minValue="0b4b" maxValue="0b4d"/>
      <g:charCodeRange minValue="0b56" maxValue="0b57"/>
      <g:charCodeRange minValue="0b82" maxValue="0b83"/>
      <g:charCodeRange minValue="0bbe" maxValue="0bc2"/>
      <g:charCodeRange minValue="0bc6" maxValue="0bc8"/>
      <g:charCodeRange minValue="0bca" maxValue="0bcd"/>
      <g:charCode value="0bd7"/>
      <g:charCodeRange minValue="0c01" maxValue="0c03"/>
      <g:charCodeRange minValue="0c3e" maxValue="0c44"/>
      <g:charCodeRange minValue="0c46" maxValue="0c48"/>
      <g:charCodeRange minValue="0c4a" maxValue="0c4d"/>
      <g:charCodeRange minValue="0c55" maxValue="0c56"/>
      <g:charCodeRange minValue="0c82" maxValue="0c83"/>
      <g:charCodeRange minValue="0cbe" maxValue="0cc4"/>
      <g:charCodeRange minValue="0cc6" maxValue="0cc8"/>
      <g:charCodeRange minValue="0cca" maxValue="0ccd"/>
      <g:charCodeRange minValue="0cd5" maxValue="0cd6"/>
      <g:charCodeRange minValue="0d02" maxValue="0d03"/>
      <g:charCodeRange minValue="0d3e" maxValue="0d43"/>
      <g:charCodeRange minValue="0d46" maxValue="0d48"/>
      <g:charCodeRange minValue="0d4a" maxValue="0d4d"/>
      <g:charCode value="0d57"/>
      <g:charCode value="0e31"/>
      <g:charCodeRange minValue="0e34" maxValue="0e3a"/>
      <g:charCodeRange minValue="0e47" maxValue="0e4e"/>
      <g:charCode value="0eb1"/>
      <g:charCodeRange minValue="0eb4" maxValue="0eb9"/>
      <g:charCodeRange minValue="0ebb" maxValue="0ebc"/>
      <g:charCodeRange minValue="0ec8" maxValue="0ecd"/>
      <g:charCodeRange minValue="0f18" maxValue="0f19"/>
      <g:charCode value="0f35"/>
      <g:charCode value="0f37"/>
      <g:charCode value="0f39"/>
      <g:charCode value="0f3e"/>
      <g:charCode value="0f3f"/>
      <g:charCodeRange minValue="0f71" maxValue="0f84"/>
      <g:charCodeRange minValue="0f86" maxValue="0f8b"/>
      <g:charCodeRange minValue="0f90" maxValue="0f95"/>
      <g:charCode value="0f97"/>
      <g:charCodeRange minValue="0f99" maxValue="0fad"/>
      <g:charCodeRange minValue="0fb1" maxValue="0fb7"/>
      <g:charCode value="0fb9"/>
      <g:charCodeRange minValue="20d0" maxValue="20dc"/>
      <g:charCode value="20e1"/>
      <g:charCodeRange minValue="302a" maxValue="302f"/>
      <g:charCode value="3099"/>
      <g:charCode value="309a"/>
    </g:charClass>
  </g:token>

  <g:token name="Digit" inline="false" is-macro="yes" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml#NT-Digit" show="no">
    <g:charClass>
      <g:charCodeRange minValue="0030" maxValue="0039"/>
      <g:charCodeRange minValue="0660" maxValue="0669"/>
      <g:charCodeRange minValue="06f0" maxValue="06f9"/>
      <g:charCodeRange minValue="0966" maxValue="096f"/>
      <g:charCodeRange minValue="09e6" maxValue="09ef"/>
      <g:charCodeRange minValue="0a66" maxValue="0a6f"/>
      <g:charCodeRange minValue="0ae6" maxValue="0aef"/>
      <g:charCodeRange minValue="0b66" maxValue="0b6f"/>
      <g:charCodeRange minValue="0be7" maxValue="0bef"/>
      <g:charCodeRange minValue="0c66" maxValue="0c6f"/>
      <g:charCodeRange minValue="0ce6" maxValue="0cef"/>
      <g:charCodeRange minValue="0d66" maxValue="0d6f"/>
      <g:charCodeRange minValue="0e50" maxValue="0e59"/>
      <g:charCodeRange minValue="0ed0" maxValue="0ed9"/>
      <g:charCodeRange minValue="0f20" maxValue="0f29"/>
    </g:charClass>
  </g:token>

  <g:token name="Extender" inline="false" is-macro="yes" is-xml="yes" xhref="http://www.w3.org/TR/REC-xml#NT-Extender" xgc-id="xml-version" show="no">
    <g:charClass>
      <g:charCode value="00b7"/>
      <g:charCode value="02d0"/>
      <g:charCode value="02d1"/>
      <g:charCode value="0387"/>
      <g:charCode value="0640"/>
      <g:charCode value="0e46"/>
      <g:charCode value="0ec6"/>
      <g:charCode value="3005"/>
      <g:charCodeRange minValue="3031" maxValue="3035"/>
      <g:charCodeRange minValue="309d" maxValue="309e"/>
      <g:charCodeRange minValue="30fc" maxValue="30fe"/>
    </g:charClass>
  </g:token>

  <g:token name="CommentStart" token-kind="skip" inline="true" comment-id="comments">
    <g:string>(:</g:string>
  </g:token>

  <g:token name="CommentEnd" token-kind="skip" inline="true">
    <g:string>:)</g:string>
  </g:token>

  <g:token name="CommentContent" token-kind="skip" inline="true">
    <g:ref name="Char"/>
  </g:token>

  <g:token name="ImplicitlyAllowedWhitespace" token-kind="skip" show="no">
    <g:oneOrMore>
      <g:ref name="WhitespaceChar"/>
    </g:oneOrMore>
  </g:token>

  
  <g:state-list>

    <g:state name="ANY" show="no">
      <g:description>
        This is not an actual state, but rather a collection of
        sub-terminals that are referenced by g:token rules.
        In the file that is generated for input to JavaCC,
        each becomes a "private regular expression".
        (It would be better to make this distinction
        in the g:token element.)
      </g:description>
      <g:transition>
        <g:description>No state change.</g:description>
        
        <g:tref name="WhitespaceChar"/>
        <g:tref name="Nmstart"/>
        <g:tref name="NCNameTok"/>
        <g:tref name="Nmchar"/>
        <g:tref name="LocalPart"/>
        <g:tref name="Digits"/>
        <g:tref name="Letter"/>
        <g:tref name="BaseChar"/>
        <g:tref name="Ideographic"/>
        <g:tref name="CombiningChar"/>
        <g:tref name="Digit"/>
        <g:tref name="Extender"/>
        <g:tref name="HexDigits"/>
        <g:tref name="Comment"/>
        
        
        
        
      </g:transition>
    </g:state>

    <g:state name="DEFAULT">
      <g:description>XXX</g:description>
      <g:transition next-state="XML_COMMENT" action="pushState" if="xcore xquery10 xquery30 xquery31 xquery40">
        <g:tref name="DirCommentStart"/>
      </g:transition>
      <g:transition next-state="EXPR_COMMENT" action="pushState">
        <g:tref name="CommentStart"/>
      </g:transition>
      <g:transition next-state="PROCESSING_INSTRUCTION" action="pushState" if="xcore xquery10 xquery30 xquery31 xquery40">
        <g:tref name="ProcessingInstructionStart"/>
      </g:transition>
      <g:transition next-state="CDATA_SECTION" action="pushState" if="xcore xquery10 xquery30 xquery31 xquery40">
        <g:tref name="CdataSectionStart"/>
      </g:transition>
      <g:transition next-state="START_TAG" action="pushState" if="xcore xquery10 xquery30 xquery31 xquery40">
        <g:tref name="LeftAngleBracket"/>
      </g:transition>
      
      <g:transition next-state="PRAGMA_1" if="fulltext xcore xquery10 xquery30 xquery31 xquery40">
        <g:tref name="PragmaOpen"/>
      </g:transition>
      
      
      <g:transition action="popState">
        <g:tref name="Rbrace"/>
      </g:transition>
      <g:transition next-state="DEFAULT" action="pushState">
        <g:tref name="Lbrace"/>
      </g:transition>
      <g:transition>
        <g:tref name="ImplicitlyAllowedWhitespace"/>
        <g:tref name="Slash"/>
        <g:tref name="SlashSlash"/>
        
        <g:tref name="IntegerLiteral"/>
        <g:tref name="DecimalLiteral"/>
        <g:tref name="DoubleLiteral" not-if="xpath1"/>
        <g:tref name="StringLiteral"/>
        <g:tref name="QNameToken"/>
        <g:tref name="NCNameColonStar"/>
        <g:tref name="StarColonNCName"/>
        
        <g:tref name="NumericLiteralError"/>
        <g:tref name="Minus"/>
        <g:tref name="Plus"/>
        <g:tref name="External" if="xcore xquery10 xquery30 xquery31 xquery40"/>
        <g:tref name="Ascending" if="xcore xquery10 xquery30 xquery31 xquery40"/>
        <g:tref name="Descending" if="xcore xquery10 xquery30 xquery31 xquery40"/>
        <g:tref name="Greatest" if="xcore xquery10 xquery30 xquery31 xquery40"/>
        <g:tref name="Least" if="fulltext xcore xquery10 xquery30 xquery31 xquery40"/>
      </g:transition>
    </g:state>

    <g:state name="EXPR_COMMENT">
      <g:description>The "(:" token marks the beginning of an expression
                Comment, and the ":)" token marks the end. This allows no special
                interpretation of other characters in this state.</g:description>
      <g:transition action="popState">
        <g:tref name="CommentEnd"/>
      </g:transition>
      <g:transition next-state="EXPR_COMMENT" action="pushState">
        <g:tref name="CommentStart"/>
      </g:transition>
      <g:transition>
        <g:description>No state change.</g:description>
        <g:tref name="CommentContent"/>
      </g:transition>
    </g:state>

    

    <g:state name="START_TAG" if="xcore xquery10 xquery30 xquery31 xquery40">
      <g:description>This state allows attributes in the native XML syntax,
                and marks the beginning of an element construction. Element
                constructors also push the current state, popping it at the
                conclusion of an end tag. In the START_TAG state, the string "&gt;" is
                recognized as a token which is associated with the transition to
                the original state. </g:description>
      <g:transition action="popState">
        <g:tref name="EmptyTagClose"/>
      </g:transition>
      <g:transition next-state="ELEMENT_CONTENT">
        <g:tref name="StartTagClose"/>
      </g:transition>
      <g:transition next-state="QUOT_ATTRIBUTE_CONTENT">
        <g:tref name="OpenQuot"/>
      </g:transition>
      <g:transition next-state="APOS_ATTRIBUTE_CONTENT">
        <g:tref name="OpenApos"/>
      </g:transition>
      <g:transition>
        <g:description>No state change.</g:description>
        <g:tref name="S"/>
        <g:tref name="TagQName"/>
        <g:tref name="ValueIndicator"/>
      </g:transition>
    </g:state>

    <g:state name="QUOT_ATTRIBUTE_CONTENT" if="xcore xquery10 xquery30 xquery31 xquery40">
      <g:description>This state allows content valid for attributes. The
                character "{" marks a transition to the OPERAND state, i.e. the
                start of an embedded expression, and the "}" character pops back to
                the original state. To allow curly braces to be used as character
                content, a double left or right curly brace is interpreted as a
                single curly brace character. This state is the same as
                APOS_ATTRIBUTE_CONTENT, except that apostrophes are allowed without
                escaping, and an unescaped quote marks the end of the
                state.</g:description>
      <g:transition next-state="START_TAG">
        <g:tref name="CloseQuot"/>
      </g:transition>
      <g:transition next-state="DEFAULT" action="pushState">
        <g:description>Transition to an Attribute Value
                    Template.</g:description>
        <g:tref name="Lbrace"/>
        <g:tref name="RbraceError"/>
        <g:tref name="LeftAngleBracketError"/>
      </g:transition>
      <g:transition>
        <g:description>No state change.</g:description>
        <g:tref name="EscapeQuot"/>
        <g:tref name="QuotAttrContentChar"/>
        <g:tref name="AmpersandError"/>
        
        <g:tref name="CharRef"/>
        
        
      </g:transition>
    </g:state>

    <g:state name="APOS_ATTRIBUTE_CONTENT" if="xcore xquery10 xquery30 xquery31 xquery40">
      <g:description>This state is the same as QUOT_ATTRIBUTE_CONTENT, except
                that quotes are allowed, and an unescaped apostrophe marks the end
                of the state.</g:description>
      <g:transition next-state="START_TAG">
        <g:tref name="CloseApos"/>
      </g:transition>
      <g:transition next-state="DEFAULT" action="pushState">
        <g:description>Transition to an Attribute Value
                    Template.</g:description>
        <g:tref name="Lbrace"/>
        <g:tref name="RbraceError"/>
        <g:tref name="LeftAngleBracketError"/>
      </g:transition>
      <g:transition>
        <g:description>No state change.</g:description>
        <g:tref name="EscapeApos"/>
        <g:tref name="AposAttrContentChar"/>
        <g:tref name="AmpersandError"/>
        
        <g:tref name="CharRef"/>
        
        
      </g:transition>
    </g:state>

    <g:state name="ELEMENT_CONTENT" if="xcore xquery10 xquery30 xquery31 xquery40">
      <g:description>This state allows XML-like content, without these
                characters being misinterpreted as expressions. The character "{"
                marks a transition to the OPERAND state, i.e. the start of an
                embedded expression, and the "}" character pops back to the
                ELEMENT_CONTENT state. To allow curly braces to be used as
                character content, a double left or right curly brace is
                interpreted as a single curly brace character. The string "&lt;/"
                is interpreted as the beginning of an end tag, which is associated
                with a transition to the END_TAG state.</g:description>
      <g:transition next-state="END_TAG">
        <g:tref name="EndTagOpen"/>
      </g:transition>
      <g:transition next-state="DEFAULT" action="pushState">
        <g:description>Transition to an Element Value
                    Template.</g:description>
        <g:tref name="Lbrace"/>
        <g:tref name="RbraceError"/>
      </g:transition>
      <g:transition next-state="XML_COMMENT" action="pushState">
        <g:tref name="DirCommentStart"/>
      </g:transition>
      <g:transition next-state="PROCESSING_INSTRUCTION" action="pushState">
        <g:tref name="ProcessingInstructionStart"/>
      </g:transition>
      <g:transition next-state="CDATA_SECTION" action="pushState">
        <g:tref name="CdataSectionStart"/>
      </g:transition>
      <g:transition next-state="START_TAG" action="pushState">
        <g:tref name="LeftAngleBracket"/>
      </g:transition>
      <g:transition>
        <g:description>No state change.</g:description>
        <g:tref name="ElementContentChar"/>
        
        <g:tref name="CharRef"/>
        
        
        <g:tref name="AmpersandError"/>
      </g:transition>
    </g:state>

    <g:state name="END_TAG" if="xcore xquery10 xquery30 xquery31 xquery40">
      <g:description>When the end tag is terminated, the state is popped to
                the state that was pushed at the start of the corresponding start
                tag.</g:description>
      <g:transition action="popState">
        <g:tref name="EndTagClose"/>
      </g:transition>
      <g:transition>
        <g:description>No state change.</g:description>
        <g:tref name="S"/>
        <g:tref name="EndTagQName"/>
      </g:transition>
    </g:state>

    

    <g:state name="XML_COMMENT" if="xcore xquery10 xquery30 xquery31 xquery40">
      <g:description>The "&lt;--" token marks the beginning of an XML
                Comment, and the "--&gt;" token marks the end. This allows no special
                interpretation of other characters in this state.</g:description>
      <g:transition action="popState">
        <g:tref name="DirCommentEnd"/>
      </g:transition>
      <g:transition>
        <g:description>No state change.</g:description>
        <g:tref name="DirCommentContentChar"/>
        <g:tref name="DirCommentContentDashChar"/>
        <g:tref name="DirCommentContentDoubleDashError"/>
      </g:transition>
    </g:state>

    

    <g:state name="PROCESSING_INSTRUCTION" if="xcore xquery10 xquery30 xquery31 xquery40">
      <g:description>In this state, only patterns that are valid in a
                processing instruction name are recognized.</g:description>
      <g:transition next-state="PROCESSING_INSTRUCTION_CONTENT">
        <g:tref name="S"/>
      </g:transition>
      <g:transition action="popState">
        <g:tref name="ProcessingInstructionEnd"/>
      </g:transition>
      <g:transition>
        <g:description>No state change.</g:description>
        <g:tref name="PITargetError"/>
        <g:tref name="PITarget"/>
      </g:transition>
    </g:state>

    <g:state name="PROCESSING_INSTRUCTION_CONTENT" if="xcore xquery10 xquery30 xquery31 xquery40">
      <g:description>In this state, only characters are that are valid in
                processing instruction content are recognized.</g:description>
      <g:transition action="popState">
        <g:tref name="ProcessingInstructionEnd"/>
      </g:transition>
      <g:transition>
        <g:description>No state change.</g:description>
        <g:tref name="Char"/>
      </g:transition>
    </g:state>

    

    <g:state name="CDATA_SECTION" if="xcore xquery10 xquery30 xquery31 xquery40">
      <g:description>In this state, only lexemes that are valid in a CDATA
                section are recognized.</g:description>
      <g:transition action="popState">
        <g:tref name="CdataSectionEnd"/>
      </g:transition>
      <g:transition>
        <g:description>No state change.</g:description>
        <g:tref name="Char"/>
      </g:transition>
    </g:state>

    

    <g:state name="PRAGMA_1" if="fulltext xcore xquery10 xquery30 xquery31 xquery40">
      <g:description>This state is entered in a a pragma expression, and recognizes a
                     QName that transits to a PRAGMA_3 state rather than a OPERATOR state.</g:description>
      <g:transition next-state="PRAGMA_2">
        <g:tref name="QNameToken"/>
        
      </g:transition>
      <g:transition>
        <g:description>No state change.</g:description>
        <g:tref name="S"/>
      </g:transition>
    </g:state>

    <g:state name="PRAGMA_2" if="fulltext xcore xquery10 xquery30 xquery31 xquery40">
      <g:description>This state recognizes the space(s) required to preceed pragma contents.  If you don't have
        this, and try to recognize S in PRAGMA_3, then Char will be recognized first,
        and the pragma production won't work properly.</g:description>
      <g:transition next-state="DEFAULT">
        <g:tref name="PragmaClose"/>
      </g:transition>
      <g:transition next-state="PRAGMA_3">
        <g:tref name="S"/>
      </g:transition>
    </g:state>

    <g:state name="PRAGMA_3" if="fulltext xcore xquery10 xquery30 xquery31 xquery40">
      <g:description>This state recognizes characters in pragma content, and transits out of this
                     state when a '#)' pattern is recognized.</g:description>
      <g:transition next-state="DEFAULT">
        <g:tref name="PragmaClose"/>
      </g:transition>
      <g:transition>
        <g:tref name="Char"/>
      </g:transition>
    </g:state>

    

    

  </g:state-list>

</g:grammar>