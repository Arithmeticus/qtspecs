/* Generated By:JJTree&JavaCC: Do not edit this line. XParser.java */
        package org.w3c.xqparser;

        import org.w3c.xqparser.Node;
        import org.w3c.xqparser.SimpleNode;
        import java.util.Stack;

        public class XParser/*@bgen(jjtree)*/implements XParserTreeConstants, XParserConstants {/*@bgen(jjtree)*/
  protected JJTXParserState jjtree = new JJTXParserState();
            Stack _elementStack = new Stack();

            Stack binaryTokenStack = new Stack();

            void processToken(SimpleNode n, Token t)
            {


                    if(t.kind == XParserConstants.Slash && n.id != XParserTreeConstants.JJTSLASH)
                        return;

                n.processToken(t);
            }

  final public SimpleNode START() throws ParseException {
         /*@bgen(jjtree) START */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Pattern30();
      jj_consume_token(0);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              if(this.token_source.curLexState == XParserConstants.EXPR_COMMENT)
                {if (true) throw new ParseException("Unterminated comment.");}
            {if (true) return jjtn000 ;}
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Pattern30() throws ParseException {
         /*@bgen(jjtree) Pattern30 */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPATTERN30);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
        PredicatePattern();
        break;
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case Slash:
      case SlashSlash:
      case URIQualifiedStar:
      case NCNameColonStar:
      case StarColonNCName:
      case URIQualifiedName:
      case QNameToken:
        UnionExprP();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void PredicatePattern() throws ParseException {
         /*@bgen(jjtree) PredicatePattern */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPREDICATEPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(1);
      PredicateList();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void UnionExprP() throws ParseException {
         /*@bgen(jjtree) UnionExprP */
  SimpleNode jjtn000 = new SimpleNode(this, JJTUNIONEXPRP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      IntersectExceptExprP();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 2:
        case 3:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 2:
          jj_consume_token(2);
          break;
        case 3:
          jj_consume_token(3);
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        IntersectExceptExprP();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void IntersectExceptExprP() throws ParseException {
         /*@bgen(jjtree) IntersectExceptExprP */
  SimpleNode jjtn000 = new SimpleNode(this, JJTINTERSECTEXCEPTEXPRP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PathExprP();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 4:
        case 5:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 4:
          jj_consume_token(4);
          break;
        case 5:
          jj_consume_token(5);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        PathExprP();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void PathExprP() throws ParseException {
         /*@bgen(jjtree) PathExprP */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPATHEXPRP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(2)) {
        RootedPath();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Slash:
          jj_consume_token(Slash);
             SimpleNode jjtn001 = new SimpleNode(this, JJTSLASH);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
          try {
             jjtree.closeNodeScope(jjtn001,  true);
             jjtc001 = false;
            processToken(jjtn001, token);
          } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  true);
             }
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 2:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 13:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 21:
          case 22:
          case 23:
          case 24:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
          case 32:
          case 33:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
          case 42:
          case 43:
          case 44:
          case 45:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 61:
          case 62:
          case 63:
          case 64:
          case 65:
          case 66:
          case 67:
          case 68:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case URIQualifiedStar:
          case NCNameColonStar:
          case StarColonNCName:
          case URIQualifiedName:
          case QNameToken:
            RelativePathExprP();
            break;
          default:
            jj_la1[5] = jj_gen;
            ;
          }
          break;
        case SlashSlash:
          jj_consume_token(SlashSlash);
                  SimpleNode jjtn002 = new SimpleNode(this, JJTSLASHSLASH);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
          try {
                  jjtree.closeNodeScope(jjtn002,  true);
                  jjtc002 = false;
                 processToken(jjtn002, token);
          } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  true);
                  }
          }
          RelativePathExprP();
          break;
        case 2:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 13:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 21:
        case 22:
        case 23:
        case 24:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case URIQualifiedStar:
        case NCNameColonStar:
        case StarColonNCName:
        case URIQualifiedName:
        case QNameToken:
          RelativePathExprP();
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void RootedPath() throws ParseException {
         /*@bgen(jjtree) RootedPath */
  SimpleNode jjtn000 = new SimpleNode(this, JJTROOTEDPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
        VarRef();
        break;
      case 6:
      case 7:
      case 8:
      case 9:
      case URIQualifiedName:
        FunctionCallP();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      PredicateList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Slash:
      case SlashSlash:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Slash:
          jj_consume_token(Slash);
                                                              SimpleNode jjtn001 = new SimpleNode(this, JJTSLASH);
                                                              boolean jjtc001 = true;
                                                              jjtree.openNodeScope(jjtn001);
          try {
                                                              jjtree.closeNodeScope(jjtn001,  true);
                                                              jjtc001 = false;
                                                             processToken(jjtn001, token);
          } finally {
                                                              if (jjtc001) {
                                                                jjtree.closeNodeScope(jjtn001,  true);
                                                              }
          }
          break;
        case SlashSlash:
          jj_consume_token(SlashSlash);
                                SimpleNode jjtn002 = new SimpleNode(this, JJTSLASHSLASH);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
          try {
                                jjtree.closeNodeScope(jjtn002,  true);
                                jjtc002 = false;
                               processToken(jjtn002, token);
          } finally {
                                if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002,  true);
                                }
          }
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        RelativePathExprP();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void FunctionCallP() throws ParseException {
         /*@bgen(jjtree) FunctionCallP */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFUNCTIONCALLP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OuterFunctionName();
      ArgumentListP();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void OuterFunctionName() throws ParseException {
         /*@bgen(jjtree) OuterFunctionName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTOUTERFUNCTIONNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 6:
        jj_consume_token(6);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.processValue("doc");
        break;
      case 7:
        jj_consume_token(7);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.processValue("id");
        break;
      case 8:
        jj_consume_token(8);
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                    jjtn000.processValue("element-with-id");
        break;
      case 9:
        jj_consume_token(9);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.processValue("key");
        break;
      case URIQualifiedName:
        jj_consume_token(URIQualifiedName);
                                      SimpleNode jjtn001 = new SimpleNode(this, JJTURIQUALIFIEDNAME);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
        try {
                                      jjtree.closeNodeScope(jjtn001,  true);
                                      jjtc001 = false;
                                     processToken(jjtn001, token);
        } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  true);
                                      }
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ArgumentListP() throws ParseException {
         /*@bgen(jjtree) ArgumentListP */
  SimpleNode jjtn000 = new SimpleNode(this, JJTARGUMENTLISTP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(10);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
      case IntegerLiteral:
      case DecimalLiteral:
      case DoubleLiteral:
      case StringLiteral:
        ArgumentP();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 11:
            ;
            break;
          default:
            jj_la1[11] = jj_gen;
            break label_3;
          }
          jj_consume_token(11);
          ArgumentP();
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      jj_consume_token(12);
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ArgumentP() throws ParseException {
         /*@bgen(jjtree) ArgumentP */
  SimpleNode jjtn000 = new SimpleNode(this, JJTARGUMENTP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
        VarRef();
        break;
      case IntegerLiteral:
      case DecimalLiteral:
      case DoubleLiteral:
      case StringLiteral:
        Literal();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void RelativePathExprP() throws ParseException {
    StepExprP();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Slash:
      case SlashSlash:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Slash:
        jj_consume_token(Slash);
                                  processToken(((SimpleNode)jjtree.peekNode()), token);
        break;
      case SlashSlash:
        jj_consume_token(SlashSlash);
                                SimpleNode jjtn001 = new SimpleNode(this, JJTSLASHSLASH);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
        try {
                                jjtree.closeNodeScope(jjtn001,  true);
                                jjtc001 = false;
                               processToken(jjtn001, token);
        } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001,  true);
                                }
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      StepExprP();
    }
  }

  final public void StepExprP() throws ParseException {
         /*@bgen(jjtree) StepExprP */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSTEPEXPRP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 10:
        PostfixExprP();
        break;
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 21:
      case 22:
      case 23:
      case 24:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case URIQualifiedStar:
      case NCNameColonStar:
      case StarColonNCName:
      case URIQualifiedName:
      case QNameToken:
        AxisStepP();
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void PostfixExprP() throws ParseException {
         /*@bgen(jjtree) PostfixExprP */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPOSTFIXEXPRP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ParenthesizedExprP();
      PredicateList();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ParenthesizedExprP() throws ParseException {
         /*@bgen(jjtree) ParenthesizedExprP */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPARENTHESIZEDEXPRP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(10);
      UnionExprP();
      jj_consume_token(12);
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void AxisStepP() throws ParseException {
         /*@bgen(jjtree) AxisStepP */
  SimpleNode jjtn000 = new SimpleNode(this, JJTAXISSTEPP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ForwardStepP();
      PredicateList();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ForwardStepP() throws ParseException {
    if (jj_2_2(2)) {
      ForwardAxisP();
      NodeTest();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 21:
      case 22:
      case 23:
      case 24:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case URIQualifiedStar:
      case NCNameColonStar:
      case StarColonNCName:
      case URIQualifiedName:
      case QNameToken:
        AbbrevForwardStep();
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ForwardAxisP() throws ParseException {
         /*@bgen(jjtree) ForwardAxisP */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFORWARDAXISP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
        jj_consume_token(13);
            jjtn000.processValue("child");
        jj_consume_token(14);
        break;
      case 15:
        jj_consume_token(15);
                 jjtn000.processValue("descendant");
        jj_consume_token(14);
        break;
      case 16:
        jj_consume_token(16);
                jjtn000.processValue("attribute");
        jj_consume_token(14);
        break;
      case 17:
        jj_consume_token(17);
           jjtn000.processValue("self");
        jj_consume_token(14);
        break;
      case 18:
        jj_consume_token(18);
                         jjtn000.processValue("descendant-or-self");
        jj_consume_token(14);
        break;
      case 19:
        jj_consume_token(19);
                jjtn000.processValue("namespace");
        jj_consume_token(14);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ParamList() throws ParseException {
         /*@bgen(jjtree) ParamList */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPARAMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Param();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 11:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_5;
        }
        jj_consume_token(11);
        Param();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void Param() throws ParseException {
         /*@bgen(jjtree) Param */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPARAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(20);
      EQName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 43:
        TypeDeclaration();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void FunctionBody() throws ParseException {
         /*@bgen(jjtree) FunctionBody */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFUNCTIONBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      EnclosedExpr();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void EnclosedExpr() throws ParseException {
         /*@bgen(jjtree) EnclosedExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTENCLOSEDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(Lbrace);
                      SimpleNode jjtn001 = new SimpleNode(this, JJTLBRACE);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
      try {
                      jjtree.closeNodeScope(jjtn001,  true);
                      jjtc001 = false;
                     processToken(jjtn001, token);
      } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  true);
                      }
      }
      Expr();
      jj_consume_token(Rbrace);
                                                                                   SimpleNode jjtn002 = new SimpleNode(this, JJTRBRACE);
                                                                                   boolean jjtc002 = true;
                                                                                   jjtree.openNodeScope(jjtn002);
      try {
                                                                                   jjtree.closeNodeScope(jjtn002,  true);
                                                                                   jjtc002 = false;
                                                                    processToken(jjtn002, token);
      } finally {
                                                                                   if (jjtc002) {
                                                                                     jjtree.closeNodeScope(jjtn002,  true);
                                                                                   }
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void Expr() throws ParseException {
         /*@bgen(jjtree) Expr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ExprSingle();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 11:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_6;
        }
        jj_consume_token(11);
        ExprSingle();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ExprSingle() throws ParseException {
    if (jj_2_3(2)) {
      ForExpr();
    } else if (jj_2_4(2)) {
      LetExpr();
    } else if (jj_2_5(2)) {
      QuantifiedExpr();
    } else if (jj_2_6(2)) {
      IfExpr();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case Slash:
      case SlashSlash:
      case Plus:
      case Minus:
      case URIQualifiedStar:
      case NCNameColonStar:
      case StarColonNCName:
      case IntegerLiteral:
      case DecimalLiteral:
      case DoubleLiteral:
      case StringLiteral:
      case URIQualifiedName:
      case QNameToken:
        OrExpr();
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ForExpr() throws ParseException {
         /*@bgen(jjtree) ForExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFOREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SimpleForClause();
      jj_consume_token(21);
      ExprSingle();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void SimpleForClause() throws ParseException {
    jj_consume_token(22);
    SimpleForBinding();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 11:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_7;
      }
      jj_consume_token(11);
      SimpleForBinding();
    }
  }

  final public void SimpleForBinding() throws ParseException {
         /*@bgen(jjtree) SimpleForBinding */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSIMPLEFORBINDING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(20);
      VarName();
      jj_consume_token(23);
      ExprSingle();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void LetExpr() throws ParseException {
         /*@bgen(jjtree) LetExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTLETEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SimpleLetClause();
      jj_consume_token(21);
      ExprSingle();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void SimpleLetClause() throws ParseException {
         /*@bgen(jjtree) SimpleLetClause */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSIMPLELETCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(24);
      SimpleLetBinding();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 11:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_8;
        }
        jj_consume_token(11);
        SimpleLetBinding();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void SimpleLetBinding() throws ParseException {
         /*@bgen(jjtree) SimpleLetBinding */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSIMPLELETBINDING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(20);
      VarName();
      jj_consume_token(25);
      ExprSingle();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void QuantifiedExpr() throws ParseException {
         /*@bgen(jjtree) QuantifiedExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTQUANTIFIEDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 26:
        jj_consume_token(26);
                    jjtn000.processValue("some");
        break;
      case 27:
        jj_consume_token(27);
                          jjtn000.processValue("every");
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(20);
      VarName();
      jj_consume_token(23);
      ExprSingle();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 11:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_9;
        }
        jj_consume_token(11);
        jj_consume_token(20);
        VarName();
        jj_consume_token(23);
        ExprSingle();
      }
      jj_consume_token(28);
      ExprSingle();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void IfExpr() throws ParseException {
         /*@bgen(jjtree) IfExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTIFEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(29);
      jj_consume_token(10);
      Expr();
      jj_consume_token(12);
      jj_consume_token(30);
      ExprSingle();
      jj_consume_token(31);
      ExprSingle();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void OperatorExpr() throws ParseException {
    OrExpr();
  }

  final public void OrExpr() throws ParseException {
             /*@bgen(jjtree) #OrExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTOREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AndExpr();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 32:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_10;
        }
        jj_consume_token(32);
                        binaryTokenStack.push(token);
        AndExpr();
                  SimpleNode jjtn001 = new SimpleNode(this, JJTOREXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                    try
                    {
                        processToken(jjtn001, (Token)binaryTokenStack.pop());
                    }
                    catch(java.util.EmptyStackException e)
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        {if (true) throw e;}
                    }
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
    }
  }

  final public void AndExpr() throws ParseException {
             /*@bgen(jjtree) #AndExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTANDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ComparisonExpr();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 33:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_11;
        }
        jj_consume_token(33);
                        binaryTokenStack.push(token);
        ComparisonExpr();
                  SimpleNode jjtn001 = new SimpleNode(this, JJTANDEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                    try
                    {
                        processToken(jjtn001, (Token)binaryTokenStack.pop());
                    }
                    catch(java.util.EmptyStackException e)
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        {if (true) throw e;}
                    }
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
    }
  }

  final public void ComparisonExpr() throws ParseException {
             /*@bgen(jjtree) #ComparisonExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOMPARISONEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      StringConcatExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case LeftAngleBracket:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
          ValueComp();
          break;
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case LeftAngleBracket:
          GeneralComp();
          break;
        case 57:
        case 58:
        case 59:
          NodeComp();
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        StringConcatExpr();
                  SimpleNode jjtn001 = new SimpleNode(this, JJTCOMPARISONEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                    try
                    {
                        processToken(jjtn001, (Token)binaryTokenStack.pop());
                    }
                    catch(java.util.EmptyStackException e)
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        {if (true) throw e;}
                    }
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
    }
  }

  final public void StringConcatExpr() throws ParseException {
             /*@bgen(jjtree) #StringConcatExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSTRINGCONCATEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      RangeExpr();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 34:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_12;
        }
        jj_consume_token(34);
                        binaryTokenStack.push(token);
        RangeExpr();
                  SimpleNode jjtn001 = new SimpleNode(this, JJTSTRINGCONCATEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                    try
                    {
                        processToken(jjtn001, (Token)binaryTokenStack.pop());
                    }
                    catch(java.util.EmptyStackException e)
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        {if (true) throw e;}
                    }
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
    }
  }

  final public void RangeExpr() throws ParseException {
             /*@bgen(jjtree) #RangeExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTRANGEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AdditiveExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 35:
        jj_consume_token(35);
                        binaryTokenStack.push(token);
        AdditiveExpr();
                  SimpleNode jjtn001 = new SimpleNode(this, JJTRANGEEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                    try
                    {
                        processToken(jjtn001, (Token)binaryTokenStack.pop());
                    }
                    catch(java.util.EmptyStackException e)
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        {if (true) throw e;}
                    }
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
    }
  }

  final public void AdditiveExpr() throws ParseException {
             /*@bgen(jjtree) #AdditiveExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTADDITIVEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultiplicativeExpr();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Plus:
        case Minus:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_13;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Plus:
          jj_consume_token(Plus);
                 binaryTokenStack.push(token);
          break;
        case Minus:
          jj_consume_token(Minus);
                 binaryTokenStack.push(token);
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        MultiplicativeExpr();
                  SimpleNode jjtn001 = new SimpleNode(this, JJTADDITIVEEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                    try
                    {
                        processToken(jjtn001, (Token)binaryTokenStack.pop());
                    }
                    catch(java.util.EmptyStackException e)
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        {if (true) throw e;}
                    }
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
    }
  }

  final public void MultiplicativeExpr() throws ParseException {
             /*@bgen(jjtree) #MultiplicativeExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTMULTIPLICATIVEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      UnionExpr();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 36:
        case 37:
        case 38:
        case 39:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_14;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 36:
          jj_consume_token(36);
                        binaryTokenStack.push(token);
          break;
        case 37:
          jj_consume_token(37);
                        binaryTokenStack.push(token);
          break;
        case 38:
          jj_consume_token(38);
                        binaryTokenStack.push(token);
          break;
        case 39:
          jj_consume_token(39);
                        binaryTokenStack.push(token);
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        UnionExpr();
                  SimpleNode jjtn001 = new SimpleNode(this, JJTMULTIPLICATIVEEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                    try
                    {
                        processToken(jjtn001, (Token)binaryTokenStack.pop());
                    }
                    catch(java.util.EmptyStackException e)
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        {if (true) throw e;}
                    }
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
    }
  }

  final public void UnionExpr() throws ParseException {
             /*@bgen(jjtree) #UnionExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTUNIONEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      IntersectExceptExpr();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 3:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_15;
        }
        jj_consume_token(3);
                        binaryTokenStack.push(token);
        IntersectExceptExpr();
                  SimpleNode jjtn001 = new SimpleNode(this, JJTUNIONEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                    try
                    {
                        processToken(jjtn001, (Token)binaryTokenStack.pop());
                    }
                    catch(java.util.EmptyStackException e)
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        {if (true) throw e;}
                    }
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
    }
  }

  final public void IntersectExceptExpr() throws ParseException {
             /*@bgen(jjtree) #IntersectExceptExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTINTERSECTEXCEPTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      InstanceofExpr();
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 4:
        case 5:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_16;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 4:
          jj_consume_token(4);
                        binaryTokenStack.push(token);
          break;
        case 5:
          jj_consume_token(5);
                        binaryTokenStack.push(token);
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        InstanceofExpr();
                  SimpleNode jjtn001 = new SimpleNode(this, JJTINTERSECTEXCEPTEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
        try {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                    try
                    {
                        processToken(jjtn001, (Token)binaryTokenStack.pop());
                    }
                    catch(java.util.EmptyStackException e)
                    {
                        token_source.printLinePos();
                        e.printStackTrace();
                        {if (true) throw e;}
                    }
        } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
        }
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
    }
  }

  final public void InstanceofExpr() throws ParseException {
             /*@bgen(jjtree) #InstanceofExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTINSTANCEOFEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TreatExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
        jj_consume_token(40);
        jj_consume_token(41);
        SequenceType();
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
    }
  }

  final public void TreatExpr() throws ParseException {
             /*@bgen(jjtree) #TreatExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTREATEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      CastableExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        jj_consume_token(43);
        SequenceType();
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
    }
  }

  final public void CastableExpr() throws ParseException {
             /*@bgen(jjtree) #CastableExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCASTABLEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      CastExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
        jj_consume_token(44);
        jj_consume_token(43);
        SingleType();
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
    }
  }

  final public void CastExpr() throws ParseException {
             /*@bgen(jjtree) #CastExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCASTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      UnaryExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
        jj_consume_token(45);
        jj_consume_token(43);
        SingleType();
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                  }
    }
  }

  final public void UnaryExpr() throws ParseException {
             /*@bgen(jjtree) #UnaryExpr( keepUnary) */
             SimpleNode jjtn000 = new SimpleNode(this, JJTUNARYEXPR);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);boolean keepUnary=false;
    try {
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Plus:
        case Minus:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_17;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Minus:
          jj_consume_token(Minus);
                           SimpleNode jjtn001 = new SimpleNode(this, JJTMINUS);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
          try {
                           jjtree.closeNodeScope(jjtn001,  true);
                           jjtc001 = false;
                          keepUnary=true;processToken(jjtn001, token);
          } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  true);
                           }
          }
          break;
        case Plus:
          jj_consume_token(Plus);
                          SimpleNode jjtn002 = new SimpleNode(this, JJTPLUS);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
          try {
                          jjtree.closeNodeScope(jjtn002,  true);
                          jjtc002 = false;
                         keepUnary=true;processToken(jjtn002, token);
          } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002,  true);
                          }
          }
          break;
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      ValueExpr();
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000,  keepUnary);
                  }
    }
  }

  final public void ValueExpr() throws ParseException {
    SimpleMapExpr();
  }

  final public void GeneralComp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 46:
      jj_consume_token(46);
                        binaryTokenStack.push(token);
      break;
    case 47:
      jj_consume_token(47);
                        binaryTokenStack.push(token);
      break;
    case LeftAngleBracket:
      jj_consume_token(LeftAngleBracket);
                         /* Careful! */ token_source.SwitchTo(DEFAULT); token_source.stateStack.pop();
                 binaryTokenStack.push(token);
      break;
    case 48:
      jj_consume_token(48);
                        binaryTokenStack.push(token);
      break;
    case 49:
      jj_consume_token(49);
                        binaryTokenStack.push(token);
      break;
    case 50:
      jj_consume_token(50);
                        binaryTokenStack.push(token);
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ValueComp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 51:
      jj_consume_token(51);
                        binaryTokenStack.push(token);
      break;
    case 52:
      jj_consume_token(52);
                        binaryTokenStack.push(token);
      break;
    case 53:
      jj_consume_token(53);
                        binaryTokenStack.push(token);
      break;
    case 54:
      jj_consume_token(54);
                        binaryTokenStack.push(token);
      break;
    case 55:
      jj_consume_token(55);
                        binaryTokenStack.push(token);
      break;
    case 56:
      jj_consume_token(56);
                        binaryTokenStack.push(token);
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NodeComp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 57:
      jj_consume_token(57);
                        binaryTokenStack.push(token);
      break;
    case 58:
      jj_consume_token(58);
                        binaryTokenStack.push(token);
      break;
    case 59:
      jj_consume_token(59);
                        binaryTokenStack.push(token);
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SimpleMapExpr() throws ParseException {
         /*@bgen(jjtree) #SimpleMapExpr(> 1) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSIMPLEMAPEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PathExpr();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 60:
          ;
          break;
        default:
          jj_la1[49] = jj_gen;
          break label_18;
        }
        jj_consume_token(60);
        PathExpr();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
              }
    }
  }

  final public void PathExpr() throws ParseException {
         /*@bgen(jjtree) PathExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPATHEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Slash:
        jj_consume_token(Slash);
             SimpleNode jjtn001 = new SimpleNode(this, JJTSLASH);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
        try {
             jjtree.closeNodeScope(jjtn001,  true);
             jjtc001 = false;
            processToken(jjtn001, token);
        } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  true);
             }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 13:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case URIQualifiedStar:
        case NCNameColonStar:
        case StarColonNCName:
        case IntegerLiteral:
        case DecimalLiteral:
        case DoubleLiteral:
        case StringLiteral:
        case URIQualifiedName:
        case QNameToken:
          RelativePathExpr();
          break;
        default:
          jj_la1[50] = jj_gen;
          ;
        }
        break;
      case SlashSlash:
        jj_consume_token(SlashSlash);
                  SimpleNode jjtn002 = new SimpleNode(this, JJTSLASHSLASH);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
        try {
                  jjtree.closeNodeScope(jjtn002,  true);
                  jjtc002 = false;
                 processToken(jjtn002, token);
        } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  true);
                  }
        }
        RelativePathExpr();
        break;
      case 1:
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case URIQualifiedStar:
      case NCNameColonStar:
      case StarColonNCName:
      case IntegerLiteral:
      case DecimalLiteral:
      case DoubleLiteral:
      case StringLiteral:
      case URIQualifiedName:
      case QNameToken:
        RelativePathExpr();
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void RelativePathExpr() throws ParseException {
    StepExpr();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Slash:
      case SlashSlash:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_19;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Slash:
        jj_consume_token(Slash);
                                  SimpleNode jjtn001 = new SimpleNode(this, JJTSLASH);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
        try {
                                  jjtree.closeNodeScope(jjtn001,  true);
                                  jjtc001 = false;
                                 processToken(jjtn001, token);
        } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  true);
                                  }
        }
        break;
      case SlashSlash:
        jj_consume_token(SlashSlash);
                                SimpleNode jjtn002 = new SimpleNode(this, JJTSLASHSLASH);
                                boolean jjtc002 = true;
                                jjtree.openNodeScope(jjtn002);
        try {
                                jjtree.closeNodeScope(jjtn002,  true);
                                jjtc002 = false;
                               processToken(jjtn002, token);
        } finally {
                                if (jjtc002) {
                                  jjtree.closeNodeScope(jjtn002,  true);
                                }
        }
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      StepExpr();
    }
  }

  final public void StepExpr() throws ParseException {
    if (jj_2_7(3)) {
      PostfixExpr();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 21:
      case 22:
      case 23:
      case 24:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case URIQualifiedStar:
      case NCNameColonStar:
      case StarColonNCName:
      case URIQualifiedName:
      case QNameToken:
        AxisStep();
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void AxisStep() throws ParseException {
         /*@bgen(jjtree) AxisStep */
  SimpleNode jjtn000 = new SimpleNode(this, JJTAXISSTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_8(2)) {
        ReverseStep();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 2:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 13:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 21:
        case 22:
        case 23:
        case 24:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case URIQualifiedStar:
        case NCNameColonStar:
        case StarColonNCName:
        case URIQualifiedName:
        case QNameToken:
          ForwardStep();
          break;
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      PredicateList();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ForwardStep() throws ParseException {
    if (jj_2_9(2)) {
      ForwardAxis();
      NodeTest();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 21:
      case 22:
      case 23:
      case 24:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case URIQualifiedStar:
      case NCNameColonStar:
      case StarColonNCName:
      case URIQualifiedName:
      case QNameToken:
        AbbrevForwardStep();
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ForwardAxis() throws ParseException {
         /*@bgen(jjtree) ForwardAxis */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFORWARDAXIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
        jj_consume_token(13);
            jjtn000.processValue("child");
        jj_consume_token(14);
        break;
      case 15:
        jj_consume_token(15);
                 jjtn000.processValue("descendant");
        jj_consume_token(14);
        break;
      case 16:
        jj_consume_token(16);
                jjtn000.processValue("attribute");
        jj_consume_token(14);
        break;
      case 17:
        jj_consume_token(17);
           jjtn000.processValue("self");
        jj_consume_token(14);
        break;
      case 18:
        jj_consume_token(18);
                         jjtn000.processValue("descendant-or-self");
        jj_consume_token(14);
        break;
      case 61:
        jj_consume_token(61);
                        jjtn000.processValue("following-sibling");
        jj_consume_token(14);
        break;
      case 62:
        jj_consume_token(62);
                jjtn000.processValue("following");
        jj_consume_token(14);
        break;
      case 19:
        jj_consume_token(19);
                jjtn000.processValue("namespace");
        jj_consume_token(14);
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void AbbrevForwardStep() throws ParseException {
         /*@bgen(jjtree) AbbrevForwardStep */
  SimpleNode jjtn000 = new SimpleNode(this, JJTABBREVFORWARDSTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 63:
        jj_consume_token(63);
                 jjtn000.processValue("@");
        break;
      default:
        jj_la1[58] = jj_gen;
        ;
      }
      NodeTest();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ReverseStep() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
      ReverseAxis();
      NodeTest();
      break;
    case 69:
      AbbrevReverseStep();
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ReverseAxis() throws ParseException {
         /*@bgen(jjtree) ReverseAxis */
  SimpleNode jjtn000 = new SimpleNode(this, JJTREVERSEAXIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 64:
        jj_consume_token(64);
             jjtn000.processValue("parent");
        jj_consume_token(14);
        break;
      case 65:
        jj_consume_token(65);
               jjtn000.processValue("ancestor");
        jj_consume_token(14);
        break;
      case 66:
        jj_consume_token(66);
                        jjtn000.processValue("preceding-sibling");
        jj_consume_token(14);
        break;
      case 67:
        jj_consume_token(67);
                jjtn000.processValue("preceding");
        jj_consume_token(14);
        break;
      case 68:
        jj_consume_token(68);
                       jjtn000.processValue("ancestor-or-self");
        jj_consume_token(14);
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void AbbrevReverseStep() throws ParseException {
         /*@bgen(jjtree) AbbrevReverseStep */
  SimpleNode jjtn000 = new SimpleNode(this, JJTABBREVREVERSESTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(69);
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void NodeTest() throws ParseException {
         /*@bgen(jjtree) NodeTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTNODETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_10(2)) {
        KindTest();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 2:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 13:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 21:
        case 22:
        case 23:
        case 24:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case URIQualifiedStar:
        case NCNameColonStar:
        case StarColonNCName:
        case URIQualifiedName:
        case QNameToken:
          NameTest();
          break;
        default:
          jj_la1[61] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void NameTest() throws ParseException {
         /*@bgen(jjtree) NameTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTNAMETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 21:
      case 22:
      case 23:
      case 24:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 35:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case URIQualifiedName:
      case QNameToken:
        EQName();
        break;
      case 36:
      case URIQualifiedStar:
      case NCNameColonStar:
      case StarColonNCName:
        Wildcard();
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void Wildcard() throws ParseException {
         /*@bgen(jjtree) Wildcard */
  SimpleNode jjtn000 = new SimpleNode(this, JJTWILDCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 36:
        jj_consume_token(36);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.processValue("*");
        break;
      case NCNameColonStar:
        jj_consume_token(NCNameColonStar);
                                     SimpleNode jjtn001 = new SimpleNode(this, JJTNCNAMECOLONSTAR);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
        try {
                                     jjtree.closeNodeScope(jjtn001,  true);
                                     jjtc001 = false;
                                    processToken(jjtn001, token);
        } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001,  true);
                                     }
        }
        break;
      case StarColonNCName:
        jj_consume_token(StarColonNCName);
                                     SimpleNode jjtn002 = new SimpleNode(this, JJTSTARCOLONNCNAME);
                                     boolean jjtc002 = true;
                                     jjtree.openNodeScope(jjtn002);
        try {
                                     jjtree.closeNodeScope(jjtn002,  true);
                                     jjtc002 = false;
                                    processToken(jjtn002, token);
        } finally {
                                     if (jjtc002) {
                                       jjtree.closeNodeScope(jjtn002,  true);
                                     }
        }
        break;
      case URIQualifiedStar:
        jj_consume_token(URIQualifiedStar);
                                      SimpleNode jjtn003 = new SimpleNode(this, JJTURIQUALIFIEDSTAR);
                                      boolean jjtc003 = true;
                                      jjtree.openNodeScope(jjtn003);
        try {
                                      jjtree.closeNodeScope(jjtn003,  true);
                                      jjtc003 = false;
                                     processToken(jjtn003, token);
        } finally {
                                      if (jjtc003) {
                                        jjtree.closeNodeScope(jjtn003,  true);
                                      }
        }
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void FilterExpr() throws ParseException {
         /*@bgen(jjtree) FilterExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFILTEREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PrimaryExpr();
      PredicateList();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void PostfixExpr() throws ParseException {
         /*@bgen(jjtree) PostfixExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPOSTFIXEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PrimaryExpr();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 10:
        case 70:
          ;
          break;
        default:
          jj_la1[64] = jj_gen;
          break label_20;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 70:
          Predicate();
          break;
        case 10:
          ArgumentList();
          break;
        default:
          jj_la1[65] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ArgumentList() throws ParseException {
         /*@bgen(jjtree) ArgumentList */
  SimpleNode jjtn000 = new SimpleNode(this, JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(10);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 72:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case Slash:
      case SlashSlash:
      case Plus:
      case Minus:
      case URIQualifiedStar:
      case NCNameColonStar:
      case StarColonNCName:
      case IntegerLiteral:
      case DecimalLiteral:
      case DoubleLiteral:
      case StringLiteral:
      case URIQualifiedName:
      case QNameToken:
        Argument();
        label_21:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 11:
            ;
            break;
          default:
            jj_la1[66] = jj_gen;
            break label_21;
          }
          jj_consume_token(11);
          Argument();
        }
        break;
      default:
        jj_la1[67] = jj_gen;
        ;
      }
      jj_consume_token(12);
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void PredicateList() throws ParseException {
         /*@bgen(jjtree) #PredicateList(> 0) */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPREDICATELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 70:
          ;
          break;
        default:
          jj_la1[68] = jj_gen;
          break label_22;
        }
        Predicate();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 0);
              }
    }
  }

  final public void Predicate() throws ParseException {
         /*@bgen(jjtree) Predicate */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPREDICATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(70);
      Expr();
      jj_consume_token(71);
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void PrimaryExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IntegerLiteral:
    case DecimalLiteral:
    case DoubleLiteral:
    case StringLiteral:
      Literal();
      break;
    case 20:
      VarRef();
      break;
    case 10:
      ParenthesizedExpr();
      break;
    case 1:
      ContextItemExpr();
      break;
    default:
      jj_la1[69] = jj_gen;
      if (jj_2_11(2)) {
        FunctionCall();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 2:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 13:
        case 15:
        case 17:
        case 18:
        case 19:
        case 21:
        case 22:
        case 23:
        case 24:
        case 26:
        case 27:
        case 28:
        case 30:
        case 31:
        case 32:
        case 33:
        case 35:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 74:
        case URIQualifiedName:
        case QNameToken:
          FunctionItemExpr();
          break;
        default:
          jj_la1[70] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void Literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IntegerLiteral:
    case DecimalLiteral:
    case DoubleLiteral:
      NumericLiteral();
      break;
    case StringLiteral:
      jj_consume_token(StringLiteral);
                                   SimpleNode jjtn001 = new SimpleNode(this, JJTSTRINGLITERAL);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
      try {
                                   jjtree.closeNodeScope(jjtn001,  true);
                                   jjtc001 = false;
                                  processToken(jjtn001, token);
      } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  true);
                                   }
      }
      break;
    default:
      jj_la1[71] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NumericLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IntegerLiteral:
      jj_consume_token(IntegerLiteral);
                               SimpleNode jjtn001 = new SimpleNode(this, JJTINTEGERLITERAL);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
      try {
                               jjtree.closeNodeScope(jjtn001,  true);
                               jjtc001 = false;
                              processToken(jjtn001, token);
      } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  true);
                               }
      }
      break;
    case DecimalLiteral:
      jj_consume_token(DecimalLiteral);
                                    SimpleNode jjtn002 = new SimpleNode(this, JJTDECIMALLITERAL);
                                    boolean jjtc002 = true;
                                    jjtree.openNodeScope(jjtn002);
      try {
                                    jjtree.closeNodeScope(jjtn002,  true);
                                    jjtc002 = false;
                                   processToken(jjtn002, token);
      } finally {
                                    if (jjtc002) {
                                      jjtree.closeNodeScope(jjtn002,  true);
                                    }
      }
      break;
    case DoubleLiteral:
      jj_consume_token(DoubleLiteral);
                                   SimpleNode jjtn003 = new SimpleNode(this, JJTDOUBLELITERAL);
                                   boolean jjtc003 = true;
                                   jjtree.openNodeScope(jjtn003);
      try {
                                   jjtree.closeNodeScope(jjtn003,  true);
                                   jjtc003 = false;
                                  processToken(jjtn003, token);
      } finally {
                                   if (jjtc003) {
                                     jjtree.closeNodeScope(jjtn003,  true);
                                   }
      }
      break;
    default:
      jj_la1[72] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void VarRef() throws ParseException {
    jj_consume_token(20);
    VarName();
  }

  final public void VarName() throws ParseException {
         /*@bgen(jjtree) VarName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTVARNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      EQName();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ParenthesizedExpr() throws ParseException {
         /*@bgen(jjtree) ParenthesizedExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPARENTHESIZEDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(10);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case Slash:
      case SlashSlash:
      case Plus:
      case Minus:
      case URIQualifiedStar:
      case NCNameColonStar:
      case StarColonNCName:
      case IntegerLiteral:
      case DecimalLiteral:
      case DoubleLiteral:
      case StringLiteral:
      case URIQualifiedName:
      case QNameToken:
        Expr();
        break;
      default:
        jj_la1[73] = jj_gen;
        ;
      }
      jj_consume_token(12);
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ContextItemExpr() throws ParseException {
         /*@bgen(jjtree) ContextItemExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCONTEXTITEMEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(1);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                jjtn000.processValue(".");
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void FunctionCall() throws ParseException {
         /*@bgen(jjtree) FunctionCall */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      FunctionEQName();
      ArgumentList();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void Argument() throws ParseException {
         /*@bgen(jjtree) Argument */
  SimpleNode jjtn000 = new SimpleNode(this, JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case Slash:
      case SlashSlash:
      case Plus:
      case Minus:
      case URIQualifiedStar:
      case NCNameColonStar:
      case StarColonNCName:
      case IntegerLiteral:
      case DecimalLiteral:
      case DoubleLiteral:
      case StringLiteral:
      case URIQualifiedName:
      case QNameToken:
        ExprSingle();
        break;
      case 72:
        ArgumentPlaceholder();
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ArgumentPlaceholder() throws ParseException {
         /*@bgen(jjtree) ArgumentPlaceholder */
  SimpleNode jjtn000 = new SimpleNode(this, JJTARGUMENTPLACEHOLDER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(72);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                jjtn000.processValue("?");
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void FunctionItemExpr() throws ParseException {
         /*@bgen(jjtree) FunctionItemExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFUNCTIONITEMEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_12(2)) {
        NamedFunctionRef();
      } else if (jj_2_13(2)) {
        InlineFunctionExpr();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void NamedFunctionRef() throws ParseException {
         /*@bgen(jjtree) NamedFunctionRef */
  SimpleNode jjtn000 = new SimpleNode(this, JJTNAMEDFUNCTIONREF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      FunctionEQName();
      jj_consume_token(73);
      jj_consume_token(IntegerLiteral);
                                                   SimpleNode jjtn001 = new SimpleNode(this, JJTINTEGERLITERAL);
                                                   boolean jjtc001 = true;
                                                   jjtree.openNodeScope(jjtn001);
      try {
                                                   jjtree.closeNodeScope(jjtn001,  true);
                                                   jjtc001 = false;
                                                  processToken(jjtn001, token);
      } finally {
                                                   if (jjtc001) {
                                                     jjtree.closeNodeScope(jjtn001,  true);
                                                   }
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void InlineFunctionExpr() throws ParseException {
         /*@bgen(jjtree) InlineFunctionExpr */
  SimpleNode jjtn000 = new SimpleNode(this, JJTINLINEFUNCTIONEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(74);
      jj_consume_token(10);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
        ParamList();
        break;
      default:
        jj_la1[75] = jj_gen;
        ;
      }
      jj_consume_token(12);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 43:
        jj_consume_token(43);
        SequenceType();
        break;
      default:
        jj_la1[76] = jj_gen;
        ;
      }
      FunctionBody();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void SingleType() throws ParseException {
         /*@bgen(jjtree) SingleType */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSINGLETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SimpleTypeName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 72:
        jj_consume_token(72);
                                  jjtn000.processValue("?");
        break;
      default:
        jj_la1[77] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void TypeDeclaration() throws ParseException {
         /*@bgen(jjtree) TypeDeclaration */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTYPEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(43);
      SequenceType();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void SequenceType() throws ParseException {
         /*@bgen(jjtree) SequenceType */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSEQUENCETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_14(2)) {
        jj_consume_token(75);
                     jjtn000.processValue("empty-sequence");
        jj_consume_token(10);
        jj_consume_token(12);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 2:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 13:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 21:
        case 22:
        case 23:
        case 24:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 35:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case URIQualifiedName:
        case QNameToken:
          ItemType();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 36:
          case 72:
          case Plus:
            OccurrenceIndicator();
            break;
          default:
            jj_la1[78] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[79] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void OccurrenceIndicator() throws ParseException {
         /*@bgen(jjtree) OccurrenceIndicator */
  SimpleNode jjtn000 = new SimpleNode(this, JJTOCCURRENCEINDICATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 72:
        jj_consume_token(72);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 jjtn000.processValue("?");
        break;
      case 36:
        jj_consume_token(36);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                      jjtn000.processValue("*");
        break;
      case Plus:
        jj_consume_token(Plus);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         processToken(((SimpleNode)jjtree.peekNode()), token);
        break;
      default:
        jj_la1[80] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ItemType() throws ParseException {
         /*@bgen(jjtree) ItemType */
  SimpleNode jjtn000 = new SimpleNode(this, JJTITEMTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_15(2)) {
        KindTest();
      } else if (jj_2_16(2)) {
        jj_consume_token(76);
           jjtn000.processValue("item");
        jj_consume_token(10);
        jj_consume_token(12);
      } else if (jj_2_17(2)) {
        FunctionTest();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 2:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 13:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 21:
        case 22:
        case 23:
        case 24:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 35:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case URIQualifiedName:
        case QNameToken:
          AtomicOrUnionType();
          break;
        case 10:
          ParenthesizedItemType();
          break;
        default:
          jj_la1[81] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void AtomicOrUnionType() throws ParseException {
         /*@bgen(jjtree) AtomicOrUnionType */
  SimpleNode jjtn000 = new SimpleNode(this, JJTATOMICORUNIONTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      EQName();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void KindTest() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 78:
      DocumentTest();
      break;
    case 84:
      ElementTest();
      break;
    case 16:
      AttributeTest();
      break;
    case 85:
      SchemaElementTest();
      break;
    case 83:
      SchemaAttributeTest();
      break;
    case 82:
      PITest();
      break;
    case 80:
      CommentTest();
      break;
    case 79:
      TextTest();
      break;
    case 81:
      NamespaceNodeTest();
      break;
    case 77:
      AnyKindTest();
      break;
    default:
      jj_la1[82] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AnyKindTest() throws ParseException {
         /*@bgen(jjtree) AnyKindTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTANYKINDTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(77);
      jj_consume_token(10);
      jj_consume_token(12);
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void DocumentTest() throws ParseException {
         /*@bgen(jjtree) DocumentTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTDOCUMENTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(78);
      jj_consume_token(10);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 84:
      case 85:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 84:
          ElementTest();
          break;
        case 85:
          SchemaElementTest();
          break;
        default:
          jj_la1[83] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[84] = jj_gen;
        ;
      }
      jj_consume_token(12);
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void TextTest() throws ParseException {
         /*@bgen(jjtree) TextTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTEXTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(79);
      jj_consume_token(10);
      jj_consume_token(12);
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void CommentTest() throws ParseException {
         /*@bgen(jjtree) CommentTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCOMMENTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(80);
      jj_consume_token(10);
      jj_consume_token(12);
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void NamespaceNodeTest() throws ParseException {
         /*@bgen(jjtree) NamespaceNodeTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTNAMESPACENODETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(81);
      jj_consume_token(10);
      jj_consume_token(12);
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void PITest() throws ParseException {
         /*@bgen(jjtree) PITest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPITEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(82);
      jj_consume_token(10);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 21:
      case 22:
      case 23:
      case 24:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 35:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case StringLiteral:
      case QNameToken:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 2:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 13:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 21:
        case 22:
        case 23:
        case 24:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 35:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case QNameToken:
          NCName();
          break;
        case StringLiteral:
          jj_consume_token(StringLiteral);
                                   SimpleNode jjtn001 = new SimpleNode(this, JJTSTRINGLITERAL);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
          try {
                                   jjtree.closeNodeScope(jjtn001,  true);
                                   jjtc001 = false;
                                  processToken(jjtn001, token);
          } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  true);
                                   }
          }
          break;
        default:
          jj_la1[85] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[86] = jj_gen;
        ;
      }
      jj_consume_token(12);
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void AttributeTest() throws ParseException {
         /*@bgen(jjtree) AttributeTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTATTRIBUTETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(16);
      jj_consume_token(10);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 21:
      case 22:
      case 23:
      case 24:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case URIQualifiedName:
      case QNameToken:
        AttribNameOrWildcard();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 11:
          jj_consume_token(11);
          TypeName();
          break;
        default:
          jj_la1[87] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[88] = jj_gen;
        ;
      }
      jj_consume_token(12);
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void AttribNameOrWildcard() throws ParseException {
         /*@bgen(jjtree) AttribNameOrWildcard */
  SimpleNode jjtn000 = new SimpleNode(this, JJTATTRIBNAMEORWILDCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 21:
      case 22:
      case 23:
      case 24:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 35:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case URIQualifiedName:
      case QNameToken:
        AttributeName();
        break;
      case 36:
        jj_consume_token(36);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                      jjtn000.processValue("*");
        break;
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void SchemaAttributeTest() throws ParseException {
         /*@bgen(jjtree) SchemaAttributeTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSCHEMAATTRIBUTETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(83);
      jj_consume_token(10);
      AttributeDeclaration();
      jj_consume_token(12);
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void AttributeDeclaration() throws ParseException {
         /*@bgen(jjtree) AttributeDeclaration */
  SimpleNode jjtn000 = new SimpleNode(this, JJTATTRIBUTEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AttributeName();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ElementTest() throws ParseException {
         /*@bgen(jjtree) ElementTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTELEMENTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(84);
      jj_consume_token(10);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 21:
      case 22:
      case 23:
      case 24:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case URIQualifiedName:
      case QNameToken:
        ElementNameOrWildcard();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 11:
          jj_consume_token(11);
          TypeName();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 72:
            jj_consume_token(72);
                                                                        jjtn000.processValue("?");
            break;
          default:
            jj_la1[90] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[91] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[92] = jj_gen;
        ;
      }
      jj_consume_token(12);
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ElementNameOrWildcard() throws ParseException {
         /*@bgen(jjtree) ElementNameOrWildcard */
  SimpleNode jjtn000 = new SimpleNode(this, JJTELEMENTNAMEORWILDCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 21:
      case 22:
      case 23:
      case 24:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 35:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case URIQualifiedName:
      case QNameToken:
        ElementName();
        break;
      case 36:
        jj_consume_token(36);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                      jjtn000.processValue("*");
        break;
      default:
        jj_la1[93] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void SchemaElementTest() throws ParseException {
         /*@bgen(jjtree) SchemaElementTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSCHEMAELEMENTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(85);
      jj_consume_token(10);
      ElementDeclaration();
      jj_consume_token(12);
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ElementDeclaration() throws ParseException {
         /*@bgen(jjtree) ElementDeclaration */
  SimpleNode jjtn000 = new SimpleNode(this, JJTELEMENTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ElementName();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void AttributeName() throws ParseException {
         /*@bgen(jjtree) AttributeName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTATTRIBUTENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      EQName();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ElementName() throws ParseException {
         /*@bgen(jjtree) ElementName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTELEMENTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      EQName();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void SimpleTypeName() throws ParseException {
         /*@bgen(jjtree) SimpleTypeName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSIMPLETYPENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      TypeName();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void TypeName() throws ParseException {
         /*@bgen(jjtree) TypeName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTYPENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      EQName();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void FunctionTest() throws ParseException {
         /*@bgen(jjtree) FunctionTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFUNCTIONTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_18(4)) {
        AnyFunctionTest();
      } else if (jj_2_19(4)) {
        TypedFunctionTest();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void AnyFunctionTest() throws ParseException {
         /*@bgen(jjtree) AnyFunctionTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTANYFUNCTIONTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(74);
      jj_consume_token(10);
      jj_consume_token(36);
      jj_consume_token(12);
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void TypedFunctionTest() throws ParseException {
         /*@bgen(jjtree) TypedFunctionTest */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTYPEDFUNCTIONTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(74);
      jj_consume_token(10);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 13:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 21:
      case 22:
      case 23:
      case 24:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 35:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case URIQualifiedName:
      case QNameToken:
        SequenceType();
        label_23:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 11:
            ;
            break;
          default:
            jj_la1[94] = jj_gen;
            break label_23;
          }
          jj_consume_token(11);
          SequenceType();
        }
        break;
      default:
        jj_la1[95] = jj_gen;
        ;
      }
      jj_consume_token(12);
      jj_consume_token(43);
      SequenceType();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void ParenthesizedItemType() throws ParseException {
         /*@bgen(jjtree) ParenthesizedItemType */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPARENTHESIZEDITEMTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(10);
      ItemType();
      jj_consume_token(12);
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void EQName() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 13:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 24:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 35:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 61:
    case 62:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case QNameToken:
      QName();
      break;
    case URIQualifiedName:
      jj_consume_token(URIQualifiedName);
                                      SimpleNode jjtn001 = new SimpleNode(this, JJTURIQUALIFIEDNAME);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
      try {
                                      jjtree.closeNodeScope(jjtn001,  true);
                                      jjtc001 = false;
                                     processToken(jjtn001, token);
      } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  true);
                                      }
      }
      break;
    default:
      jj_la1[96] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void FunctionEQName() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 13:
    case 15:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 24:
    case 26:
    case 27:
    case 28:
    case 30:
    case 31:
    case 32:
    case 33:
    case 35:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 61:
    case 62:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case QNameToken:
      FunctionQName();
      break;
    case URIQualifiedName:
      jj_consume_token(URIQualifiedName);
                                      SimpleNode jjtn001 = new SimpleNode(this, JJTURIQUALIFIEDNAME);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
      try {
                                      jjtree.closeNodeScope(jjtn001,  true);
                                      jjtc001 = false;
                                     processToken(jjtn001, token);
      } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  true);
                                      }
      }
      break;
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NCName() throws ParseException {
         /*@bgen(jjtree) NCName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTNCNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      QName();
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void QName() throws ParseException {
         /*@bgen(jjtree) QName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTQNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 13:
      case 15:
      case 17:
      case 18:
      case 19:
      case 21:
      case 22:
      case 23:
      case 24:
      case 26:
      case 27:
      case 28:
      case 30:
      case 31:
      case 32:
      case 33:
      case 35:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case QNameToken:
        FunctionQName();
        break;
      case 16:
        jj_consume_token(16);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              jjtn000.processValue("attribute");
        break;
      case 80:
        jj_consume_token(80);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            jjtn000.processValue("comment");
        break;
      case 78:
        jj_consume_token(78);
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                  jjtn000.processValue("document-node");
        break;
      case 84:
        jj_consume_token(84);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            jjtn000.processValue("element");
        break;
      case 75:
        jj_consume_token(75);
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                   jjtn000.processValue("empty-sequence");
        break;
      case 74:
        jj_consume_token(74);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             jjtn000.processValue("function");
        break;
      case 29:
        jj_consume_token(29);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.processValue("if");
        break;
      case 76:
        jj_consume_token(76);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.processValue("item");
        break;
      case 81:
        jj_consume_token(81);
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                   jjtn000.processValue("namespace-node");
        break;
      case 77:
        jj_consume_token(77);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.processValue("node");
        break;
      case 82:
        jj_consume_token(82);
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtc000 = false;
                                           jjtn000.processValue("processing-instruction");
        break;
      case 83:
        jj_consume_token(83);
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                     jjtn000.processValue("schema-attribute");
        break;
      case 85:
        jj_consume_token(85);
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                   jjtn000.processValue("schema-element");
        break;
      case 86:
        jj_consume_token(86);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           jjtn000.processValue("switch");
        break;
      case 79:
        jj_consume_token(79);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.processValue("text");
        break;
      case 87:
        jj_consume_token(87);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                               jjtn000.processValue("typeswitch");
        break;
      default:
        jj_la1[98] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final public void FunctionQName() throws ParseException {
         /*@bgen(jjtree) FunctionQName */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFUNCTIONQNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QNameToken:
        jj_consume_token(QNameToken);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          processToken(((SimpleNode)jjtree.peekNode()), token);
        break;
      case 65:
        jj_consume_token(65);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             jjtn000.processValue("ancestor");
        break;
      case 68:
        jj_consume_token(68);
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                     jjtn000.processValue("ancestor-or-self");
        break;
      case 33:
        jj_consume_token(33);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.processValue("and");
        break;
      case 43:
        jj_consume_token(43);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.processValue("as");
        break;
      case 45:
        jj_consume_token(45);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.processValue("cast");
        break;
      case 44:
        jj_consume_token(44);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             jjtn000.processValue("castable");
        break;
      case 13:
        jj_consume_token(13);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          jjtn000.processValue("child");
        break;
      case 15:
        jj_consume_token(15);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                               jjtn000.processValue("descendant");
        break;
      case 18:
        jj_consume_token(18);
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                       jjtn000.processValue("descendant-or-self");
        break;
      case 37:
        jj_consume_token(37);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.processValue("div");
        break;
      case 6:
        jj_consume_token(6);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.processValue("doc");
        break;
      case 8:
        jj_consume_token(8);
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                    jjtn000.processValue("element-with-id");
        break;
      case 31:
        jj_consume_token(31);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.processValue("else");
        break;
      case 51:
        jj_consume_token(51);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.processValue("eq");
        break;
      case 27:
        jj_consume_token(27);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          jjtn000.processValue("every");
        break;
      case 5:
        jj_consume_token(5);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           jjtn000.processValue("except");
        break;
      case 62:
        jj_consume_token(62);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              jjtn000.processValue("following");
        break;
      case 61:
        jj_consume_token(61);
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                      jjtn000.processValue("following-sibling");
        break;
      case 22:
        jj_consume_token(22);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.processValue("for");
        break;
      case 56:
        jj_consume_token(56);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.processValue("ge");
        break;
      case 55:
        jj_consume_token(55);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.processValue("gt");
        break;
      case 7:
        jj_consume_token(7);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.processValue("id");
        break;
      case 38:
        jj_consume_token(38);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.processValue("idiv");
        break;
      case 23:
        jj_consume_token(23);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.processValue("in");
        break;
      case 40:
        jj_consume_token(40);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             jjtn000.processValue("instance");
        break;
      case 4:
        jj_consume_token(4);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              jjtn000.processValue("intersect");
        break;
      case 57:
        jj_consume_token(57);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.processValue("is");
        break;
      case 9:
        jj_consume_token(9);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.processValue("key");
        break;
      case 54:
        jj_consume_token(54);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.processValue("le");
        break;
      case 24:
        jj_consume_token(24);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.processValue("let");
        break;
      case 53:
        jj_consume_token(53);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.processValue("lt");
        break;
      case 39:
        jj_consume_token(39);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        jjtn000.processValue("mod");
        break;
      case 19:
        jj_consume_token(19);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              jjtn000.processValue("namespace");
        break;
      case 52:
        jj_consume_token(52);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.processValue("ne");
        break;
      case 41:
        jj_consume_token(41);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.processValue("of");
        break;
      case 32:
        jj_consume_token(32);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.processValue("or");
        break;
      case 64:
        jj_consume_token(64);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           jjtn000.processValue("parent");
        break;
      case 67:
        jj_consume_token(67);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              jjtn000.processValue("preceding");
        break;
      case 66:
        jj_consume_token(66);
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                      jjtn000.processValue("preceding-sibling");
        break;
      case 21:
        jj_consume_token(21);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                           jjtn000.processValue("return");
        break;
      case 28:
        jj_consume_token(28);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              jjtn000.processValue("satisfies");
        break;
      case 17:
        jj_consume_token(17);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.processValue("self");
        break;
      case 26:
        jj_consume_token(26);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.processValue("some");
        break;
      case 30:
        jj_consume_token(30);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         jjtn000.processValue("then");
        break;
      case 35:
        jj_consume_token(35);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.processValue("to");
        break;
      case 42:
        jj_consume_token(42);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          jjtn000.processValue("treat");
        break;
      case 2:
        jj_consume_token(2);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                          jjtn000.processValue("union");
        break;
      default:
        jj_la1[99] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
              }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_3R_309() {
    if (jj_scan_token(36)) return true;
    return false;
  }

  final private boolean jj_3R_308() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_309()) {
    jj_scanpos = xsp;
    if (jj_3R_310()) {
    jj_scanpos = xsp;
    if (jj_3R_311()) {
    jj_scanpos = xsp;
    if (jj_3R_312()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_307() {
    if (jj_3R_308()) return true;
    return false;
  }

  final private boolean jj_3R_306() {
    if (jj_3R_119()) return true;
    return false;
  }

  final private boolean jj_3R_305() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_306()) {
    jj_scanpos = xsp;
    if (jj_3R_307()) return true;
    }
    return false;
  }

  final private boolean jj_3R_304() {
    if (jj_3R_305()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_303() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_304()) return true;
    }
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(68)) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(69)) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(67)) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(66)) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(65)) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(64)) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    return false;
  }

  final private boolean jj_3R_302() {
    if (jj_scan_token(63)) return true;
    return false;
  }

  final private boolean jj_3R_301() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_302()) jj_scanpos = xsp;
    if (jj_3R_303()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(19)) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(62)) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(61)) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(18)) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(17)) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(16)) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(15)) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(13)) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3R_300() {
    if (jj_3R_301()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_289() {
    if (jj_3R_288()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_298() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_300()) return true;
    }
    return false;
  }

  final private boolean jj_3R_296() {
    if (jj_3R_298()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_295() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_296()) return true;
    }
    if (jj_3R_297()) return true;
    return false;
  }

  final private boolean jj_3R_292() {
    if (jj_3R_295()) return true;
    return false;
  }

  final private boolean jj_3R_293() {
    if (jj_scan_token(Slash)) return true;
    return false;
  }

  final private boolean jj_3R_291() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_293()) {
    jj_scanpos = xsp;
    if (jj_3R_294()) return true;
    }
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_294() {
    if (jj_scan_token(SlashSlash)) return true;
    return false;
  }

  final private boolean jj_3R_290() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_292()) return true;
    }
    return false;
  }

  final private boolean jj_3R_287() {
    if (jj_3R_288()) return true;
    return false;
  }

  final private boolean jj_3R_288() {
    if (jj_3R_290()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_291()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_286() {
    if (jj_scan_token(SlashSlash)) return true;
    if (jj_3R_288()) return true;
    return false;
  }

  final private boolean jj_3R_284() {
    if (jj_scan_token(60)) return true;
    return false;
  }

  final private boolean jj_3R_285() {
    if (jj_scan_token(Slash)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_289()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_283() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_285()) {
    jj_scanpos = xsp;
    if (jj_3R_286()) {
    jj_scanpos = xsp;
    if (jj_3R_287()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_282() {
    if (jj_3R_283()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_284()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_255() {
    if (jj_scan_token(59)) return true;
    return false;
  }

  final private boolean jj_3R_254() {
    if (jj_scan_token(58)) return true;
    return false;
  }

  final private boolean jj_3R_253() {
    if (jj_scan_token(57)) return true;
    return false;
  }

  final private boolean jj_3R_238() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_253()) {
    jj_scanpos = xsp;
    if (jj_3R_254()) {
    jj_scanpos = xsp;
    if (jj_3R_255()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_246() {
    if (jj_scan_token(56)) return true;
    return false;
  }

  final private boolean jj_3R_245() {
    if (jj_scan_token(55)) return true;
    return false;
  }

  final private boolean jj_3R_244() {
    if (jj_scan_token(54)) return true;
    return false;
  }

  final private boolean jj_3R_243() {
    if (jj_scan_token(53)) return true;
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_scan_token(52)) return true;
    return false;
  }

  final private boolean jj_3R_241() {
    if (jj_scan_token(51)) return true;
    return false;
  }

  final private boolean jj_3R_236() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) {
    jj_scanpos = xsp;
    if (jj_3R_245()) {
    jj_scanpos = xsp;
    if (jj_3R_246()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_252() {
    if (jj_scan_token(50)) return true;
    return false;
  }

  final private boolean jj_3R_251() {
    if (jj_scan_token(49)) return true;
    return false;
  }

  final private boolean jj_3R_250() {
    if (jj_scan_token(48)) return true;
    return false;
  }

  final private boolean jj_3R_249() {
    if (jj_scan_token(LeftAngleBracket)) return true;
    return false;
  }

  final private boolean jj_3R_248() {
    if (jj_scan_token(47)) return true;
    return false;
  }

  final private boolean jj_3R_247() {
    if (jj_scan_token(46)) return true;
    return false;
  }

  final private boolean jj_3R_237() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) {
    jj_scanpos = xsp;
    if (jj_3R_249()) {
    jj_scanpos = xsp;
    if (jj_3R_250()) {
    jj_scanpos = xsp;
    if (jj_3R_251()) {
    jj_scanpos = xsp;
    if (jj_3R_252()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_277() {
    if (jj_scan_token(45)) return true;
    return false;
  }

  final private boolean jj_3R_279() {
    if (jj_3R_282()) return true;
    return false;
  }

  final private boolean jj_3R_281() {
    if (jj_scan_token(Plus)) return true;
    return false;
  }

  final private boolean jj_3R_280() {
    if (jj_scan_token(Minus)) return true;
    return false;
  }

  final private boolean jj_3R_278() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_280()) {
    jj_scanpos = xsp;
    if (jj_3R_281()) return true;
    }
    return false;
  }

  final private boolean jj_3R_276() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_278()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_279()) return true;
    return false;
  }

  final private boolean jj_3R_275() {
    if (jj_scan_token(44)) return true;
    return false;
  }

  final private boolean jj_3R_273() {
    if (jj_scan_token(42)) return true;
    return false;
  }

  final private boolean jj_3R_274() {
    if (jj_3R_276()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_277()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_269() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  final private boolean jj_3R_272() {
    if (jj_3R_274()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_275()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_268() {
    if (jj_3R_272()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_273()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_266() {
    if (jj_3R_268()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_269()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_270() {
    if (jj_scan_token(4)) return true;
    return false;
  }

  final private boolean jj_3R_267() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_270()) {
    jj_scanpos = xsp;
    if (jj_3R_271()) return true;
    }
    return false;
  }

  final private boolean jj_3R_271() {
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3R_261() {
    if (jj_scan_token(3)) return true;
    return false;
  }

  final private boolean jj_3R_260() {
    if (jj_3R_266()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_267()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_256() {
    if (jj_3R_260()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_261()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_262() {
    if (jj_scan_token(36)) return true;
    return false;
  }

  final private boolean jj_3R_257() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_262()) {
    jj_scanpos = xsp;
    if (jj_3R_263()) {
    jj_scanpos = xsp;
    if (jj_3R_264()) {
    jj_scanpos = xsp;
    if (jj_3R_265()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_265() {
    if (jj_scan_token(39)) return true;
    return false;
  }

  final private boolean jj_3R_264() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  final private boolean jj_3R_263() {
    if (jj_scan_token(37)) return true;
    return false;
  }

  final private boolean jj_3R_239() {
    if (jj_3R_256()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_257()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_258() {
    if (jj_scan_token(Plus)) return true;
    return false;
  }

  final private boolean jj_3R_240() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_258()) {
    jj_scanpos = xsp;
    if (jj_3R_259()) return true;
    }
    return false;
  }

  final private boolean jj_3R_259() {
    if (jj_scan_token(Minus)) return true;
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_3R_239()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_240()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_scan_token(35)) return true;
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_3R_234()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_235()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_scan_token(34)) return true;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_scan_token(2)) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_scan_token(42)) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_scan_token(35)) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_scan_token(30)) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_scan_token(26)) return true;
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_3R_236()) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(17)) return true;
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_3R_229()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_230()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_228() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_231()) {
    jj_scanpos = xsp;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_scan_token(28)) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_scan_token(21)) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_scan_token(67)) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_scan_token(64)) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_scan_token(41)) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_scan_token(52)) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_scan_token(19)) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_scan_token(39)) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_scan_token(53)) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_scan_token(24)) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_scan_token(54)) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_scan_token(9)) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_scan_token(57)) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_scan_token(4)) return true;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_3R_238()) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_scan_token(40)) return true;
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_3R_237()) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_scan_token(23)) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_scan_token(38)) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_scan_token(7)) return true;
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_3R_227()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_228()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_scan_token(55)) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_scan_token(56)) return true;
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_scan_token(33)) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(22)) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_scan_token(62)) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_scan_token(5)) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_scan_token(27)) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_scan_token(51)) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_scan_token(31)) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_scan_token(8)) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_scan_token(6)) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_scan_token(37)) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_scan_token(18)) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(15)) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(13)) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(44)) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_scan_token(45)) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(43)) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_scan_token(33)) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(68)) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_3R_225()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_226()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(65)) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(QNameToken)) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_scan_token(87)) return true;
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_scan_token(79)) return true;
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_scan_token(32)) return true;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_scan_token(86)) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_scan_token(85)) return true;
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_scan_token(83)) return true;
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_scan_token(82)) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_scan_token(77)) return true;
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_scan_token(81)) return true;
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_scan_token(76)) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_scan_token(29)) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_scan_token(74)) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_scan_token(75)) return true;
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_scan_token(84)) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_3R_223()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_224()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_scan_token(78)) return true;
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_scan_token(80)) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_scan_token(16)) return true;
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(11)) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_scan_token(URIQualifiedName)) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(29)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(27)) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(26)) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_scan_token(URIQualifiedName)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    if (jj_scan_token(20)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_102()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_103()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_3R_188()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(20)) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) return true;
    }
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(24)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_scan_token(10)) return true;
    if (jj_3R_178()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_scan_token(74)) return true;
    if (jj_scan_token(10)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    if (jj_scan_token(43)) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(20)) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(74)) return true;
    if (jj_scan_token(10)) return true;
    if (jj_scan_token(36)) return true;
    if (jj_scan_token(12)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(22)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_3R_220()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_scan_token(11)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_3R_183()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_192()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(85)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_222() {
    if (jj_scan_token(20)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(19)) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_3R_222()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(18)) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(17)) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(84)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(16)) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(15)) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(13)) return true;
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(83)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(16)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(82)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(81)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(80)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(79)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(78)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(77)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(URIQualifiedName)) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_96()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_scan_token(9)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_scan_token(8)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_scan_token(7)) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_scan_token(6)) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_105()) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_3R_198()) return true;
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_3R_119()) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_3R_197()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(76)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_scan_token(Plus)) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_scan_token(36)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_scan_token(72)) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_3R_178()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_187() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_3R_187()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(75)) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_3R_219()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(74)) return true;
    if (jj_scan_token(10)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_193()) jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_74()) return true;
    if (jj_scan_token(73)) return true;
    if (jj_scan_token(IntegerLiteral)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) return true;
    }
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_3R_221()) return true;
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_scan_token(72)) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_3R_183()) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) return true;
    }
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_74()) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_scan_token(1)) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(10)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_3R_119()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(20)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_scan_token(DoubleLiteral)) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_scan_token(DecimalLiteral)) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_scan_token(IntegerLiteral)) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(StringLiteral)) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_3R_182()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) return true;
    }
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_110()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_3R_109()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_107()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(70)) return true;
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_111()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    return false;
  }

  final private boolean jj_3R_299() {
    if (jj_3R_111()) return true;
    return false;
  }

  final private boolean jj_3R_297() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_299()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_3R_184()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(10)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_53()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_312() {
    if (jj_scan_token(URIQualifiedStar)) return true;
    return false;
  }

  final private boolean jj_3R_311() {
    if (jj_scan_token(StarColonNCName)) return true;
    return false;
  }

  final private boolean jj_3R_310() {
    if (jj_scan_token(NCNameColonStar)) return true;
    return false;
  }

  public XParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[100];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xfdffa7f6,0xc,0xc,0x30,0x30,0xfdefa7f4,0xfdefa7f4,0x1003c0,0x0,0x0,0x3c0,0x800,0x100000,0x100000,0x0,0x0,0xfdefa7f4,0xfdefa3f4,0xfa000,0x800,0x0,0x800,0xfdffa7f6,0x800,0x800,0xc000000,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x30,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfdffa7f6,0xfdffa7f6,0x0,0x0,0xfdefa3f4,0xfdefa3f4,0xfdefa3f4,0xfa000,0x0,0x0,0x0,0xfdefa3f4,0xfdefa3f4,0x0,0x400,0x400,0x800,0xfdffa7f6,0x0,0x100402,0xddeea3f4,0x0,0x0,0xfdffa7f6,0xfdffa7f6,0x100000,0x0,0x0,0x0,0xfdefa7f4,0x0,0xfdefa7f4,0x10000,0x0,0x0,0xfdefa3f4,0xfdefa3f4,0x800,0xfdefa3f4,0xfdefa3f4,0x0,0x800,0xfdefa3f4,0xfdefa3f4,0x800,0xfdefa7f4,0xfdefa3f4,0xddeea3f4,0xfdefa3f4,0xddeea3f4,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0xe3f83ffb,0x0,0x0,0x0,0x0,0xe3f83ffb,0xe3f83ffb,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe3f83ffb,0xe3f83ffb,0x0,0x0,0x800,0x0,0xe3f83ffb,0x0,0x0,0x0,0x0,0x1,0x2,0xfffc000,0xfffc000,0x4,0x8,0x0,0x0,0xf0,0xf0,0x0,0x0,0x0,0x100,0x400,0x1000,0x2000,0x0,0x0,0x7c000,0x1f80000,0xe000000,0x10000000,0xe3f83ffb,0xe3f83ffb,0x0,0x0,0xe3f83ffb,0xe3f83ffb,0xe3f83ffb,0x60000000,0x80000000,0x0,0x0,0x63f83ffb,0x63f83ffb,0x10,0x0,0x0,0x0,0xe3f83ffb,0x0,0x0,0x63f83feb,0x0,0x0,0xe3f83ffb,0xe3f83ffb,0x0,0x800,0x0,0x10,0x63f83feb,0x10,0x63f83feb,0x0,0x0,0x0,0x63f83feb,0x63f83feb,0x0,0x63f83ffb,0x63f83ffb,0x0,0x0,0x63f83ffb,0x63f83ffb,0x0,0x63f83feb,0x63f83feb,0x63f83feb,0x63f83feb,0x63f83feb,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x6fffc1f,0x0,0x0,0x0,0x0,0xfffc1f,0x6fffc1f,0x0,0x6000000,0x6000000,0x0,0x0,0x0,0x0,0x6000000,0x6000000,0xfffc1f,0xfffc1f,0x0,0x0,0x0,0x0,0xc6fffc3f,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x20000000,0x0,0x0,0xc0000000,0xc0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000000,0xc0000000,0x20000000,0x0,0x0,0x0,0xfffc3f,0x6fffc3f,0x6000000,0x6000000,0xfffc3f,0xfffc1f,0xfffc1f,0x0,0x0,0x3f,0x1f,0xfffc1f,0xfffc1f,0x0,0x40,0x40,0x0,0xc6fffd3f,0x40,0x0,0x41f,0x0,0x0,0xc6fffc3f,0xc6fffd3f,0x0,0x0,0x100,0x40000100,0xfffc1f,0x40000100,0xfffc1f,0x3fe000,0x300000,0x300000,0xfffc1f,0xfffc1f,0x0,0xfffc1f,0xfffc1f,0x100,0x0,0xfffc1f,0xfffc1f,0x0,0xfffc1f,0xfffc1f,0x1f,0xfffc1f,0x1f,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x887,0x0,0x0,0x0,0x0,0x887,0x887,0x80,0x0,0x0,0x80,0x0,0x78,0x78,0x0,0x0,0x887,0x887,0x0,0x0,0x0,0x0,0x8ff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8ff,0x8ff,0x0,0x0,0x887,0x887,0x887,0x0,0x0,0x0,0x0,0x887,0x887,0x7,0x0,0x0,0x0,0x8ff,0x0,0x78,0x880,0x78,0x38,0x8ff,0x8ff,0x0,0x0,0x0,0x0,0x880,0x0,0x880,0x0,0x0,0x0,0x840,0x840,0x0,0x880,0x880,0x0,0x0,0x880,0x880,0x0,0x880,0x880,0x880,0x800,0x800,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[19];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public XParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public XParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new XParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 100; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 100; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public XParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new XParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 100; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 100; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public XParser(XParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 100; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(XParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 100; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[125];
    for (int i = 0; i < 125; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 100; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 125; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 19; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

        }
