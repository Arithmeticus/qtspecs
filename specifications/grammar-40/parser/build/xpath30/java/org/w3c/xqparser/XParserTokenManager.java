/* Generated By:JJTree&JavaCC: Do not edit this line. XParserTokenManager.java */
package org.w3c.xqparser;
import org.w3c.xqparser.Node;
import org.w3c.xqparser.SimpleNode;
import java.util.Stack;

public class XParserTokenManager implements XParserConstants
{
            public Stack stateStack = new Stack();

            /**
              * Push the current state onto the state stack.
              */
            private void pushState()
            {

                stateStack.addElement(new Integer(curLexState));
            }

            /**
              * Push the given state onto the state stack.
              * @param state Must be a valid state.
              */
            private void pushState(int state)
            {

                stateStack.push(new Integer(state));
            }

            /**
              * Pop the state on the state stack, and switch to that state.
              */
            private void popState()
            {
                if (stateStack.size() == 0)
                {
                    // E.g., a would-be query consisting of a single right curly brace.
                    throw new TokenMgrError(
                        "On line " + input_stream.getEndLine() + ","
                        + " the expression contains an 'ending' construct"
                        + " (e.g., a right-brace or end-tag)"
                        + " for which the corresponding 'starting' construct does not appear.",
                        TokenMgrError.LEXICAL_ERROR
                    );
                }

                int nextState = ((Integer) stateStack.pop()).intValue();

                SwitchTo(nextState);
            }

            /**
              * Print the current line position.
              */
            public void printLinePos()
            {
                System.err.println("Line: " + input_stream.getEndLine());
            }
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x100000L) != 0L)
            return 1;
         if ((active1 & 0x9L) != 0L)
            return 55;
         if ((active0 & 0xfbfa3f83fdebcf78L) != 0L || (active1 & 0xfffc0L) != 0L)
         {
            jjmatchedKind = 103;
            return 56;
         }
         return -1;
      case 1:
         if ((active0 & 0xfbfa000349e2c718L) != 0L || (active1 & 0xfffc0L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 1;
            }
            return 56;
         }
         if ((active0 & 0x3f80b4090860L) != 0L)
            return 56;
         return -1;
      case 2:
         if ((active0 & 0xa20050L) != 0L)
            return 56;
         if ((active0 & 0xfbfa00035d40c708L) != 0L || (active1 & 0xfffc0L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 2;
            return 56;
         }
         return -1;
      case 3:
         if ((active0 & 0xfbda00005d000608L) != 0L || (active1 & 0xff4c0L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 3;
            }
            return 56;
         }
         if ((active0 & 0x2000030040c100L) != 0L || (active1 & 0xb00L) != 0L)
            return 56;
         return -1;
      case 4:
         if ((active0 & 0x2000041000200L) != 0L)
            return 56;
         if ((active0 & 0xfbd800011c000408L) != 0L || (active1 & 0xff4c0L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 4;
            return 56;
         }
         return -1;
      case 5:
         if ((active0 & 0xf3d8000114000400L) != 0L || (active1 & 0xbf4c0L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 5;
            return 56;
         }
         if ((active0 & 0x800000008000008L) != 0L || (active1 & 0x40000L) != 0L)
            return 56;
         return -1;
      case 6:
         if ((active1 & 0x11000L) != 0L)
            return 56;
         if ((active0 & 0xf3d8000114000400L) != 0L || (active1 & 0xae4c0L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 6;
            return 56;
         }
         return -1;
      case 7:
         if ((active0 & 0x63d8000004000400L) != 0L || (active1 & 0xae480L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 7;
            }
            return 56;
         }
         if ((active0 & 0x9000000110000000L) != 0L || (active1 & 0x40L) != 0L)
            return 56;
         return -1;
      case 8:
         if ((active0 & 0x8048000000000000L) != 0L || (active1 & 0xac480L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 8;
            }
            return 56;
         }
         if ((active0 & 0x6390000004000400L) != 0L || (active1 & 0x2000L) != 0L)
            return 56;
         return -1;
      case 9:
         if ((active0 & 0xa080000000000000L) != 0L || (active1 & 0x2e480L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 103;
               jjmatchedPos = 9;
            }
            return 56;
         }
         if ((active0 & 0x48000000000000L) != 0L || (active1 & 0x80000L) != 0L)
            return 56;
         return -1;
      case 10:
         if ((active0 & 0xa0c0000000000000L) != 0L || (active1 & 0x2e480L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 10;
            return 56;
         }
         return -1;
      case 11:
         if ((active0 & 0xa0c0000000000000L) != 0L || (active1 & 0x2e480L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 11;
            return 56;
         }
         return -1;
      case 12:
         if ((active0 & 0xa0c0000000000000L) != 0L || (active1 & 0x2e080L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 12;
            return 56;
         }
         if ((active1 & 0x400L) != 0L)
            return 56;
         return -1;
      case 13:
         if ((active0 & 0xa0c0000000000000L) != 0L || (active1 & 0xc000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 13;
            return 56;
         }
         if ((active1 & 0x22080L) != 0L)
            return 56;
         return -1;
      case 14:
         if ((active0 & 0xa0c0000000000000L) != 0L || (active1 & 0xc000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 14;
            return 56;
         }
         return -1;
      case 15:
         if ((active0 & 0x20c0000000000000L) != 0L || (active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 15;
            return 56;
         }
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x8000L) != 0L)
            return 56;
         return -1;
      case 16:
         if ((active0 & 0x40000000000000L) != 0L || (active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 16;
            return 56;
         }
         if ((active0 & 0x2080000000000000L) != 0L)
            return 56;
         return -1;
      case 17:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 17;
            return 56;
         }
         if ((active0 & 0x40000000000000L) != 0L)
            return 56;
         return -1;
      case 18:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 18;
            return 56;
         }
         return -1;
      case 19:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 19;
            return 56;
         }
         return -1;
      case 20:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 20;
            return 56;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 35:
         return jjStopAtPos(0, 69);
      case 36:
         return jjStopAtPos(0, 2);
      case 40:
         jjmatchedKind = 12;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000000L);
      case 41:
         return jjStopAtPos(0, 13);
      case 42:
         return jjStartNfaWithStates_0(0, 20, 1);
      case 43:
         return jjStopAtPos(0, 90);
      case 44:
         return jjStopAtPos(0, 1);
      case 45:
         return jjStopAtPos(0, 91);
      case 46:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 47:
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x4000000000080L, 0x0L);
      case 60:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_0(0x401000000000L, 0x0L);
      case 61:
         return jjStopAtPos(0, 34);
      case 62:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_0(0x804000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 68);
      case 64:
         return jjStopAtPos(0, 58);
      case 91:
         return jjStopAtPos(0, 65);
      case 93:
         return jjStopAtPos(0, 66);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x9010000080020000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2000300000000L, 0x1000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x48000000200000L, 0x400L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x8008008200L, 0x10080L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x180000000000010L, 0x40L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x180000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x200014400820L, 0x100L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x60000000040L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x200010000000000L, 0x2200L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x20010000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x6800000000000000L, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x8L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x20000000000500L, 0x68000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x40084000L, 0x80800L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 87);
      case 124:
         jjmatchedKind = 25;
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 88);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         break;
      case 47:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         break;
      case 58:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 117);
         break;
      case 60:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         break;
      case 61:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         break;
      case 62:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0xa00000300000400L, active1, 0x2000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x28000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L);
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 40, 56);
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 44, 56);
         return jjMoveStringLiteralDfa2_0(active0, 0x68000000000048L, active1, 0x800L);
      case 102:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 11, 56);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(1, 29, 56);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000004000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0x10000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L);
      case 110:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x9000000015020000L, active1, 0L);
      case 111:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 19, 56);
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000800110L, active1, 0x1600L);
      case 113:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 39, 56);
         break;
      case 114:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 16, 56);
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000040000000L, active1, 0x4000L);
      case 115:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 31, 56);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 45, 56);
         break;
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 41, 56);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 43, 56);
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0x100L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000L);
      case 124:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x9000000008000000L, active1, 0x400L);
      case 100:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 56);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000040004200L, active1, 0x10100L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x28000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000001400000L, active1, 0x40000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1a0000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000100L, active1, 0x3000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80080L);
      case 114:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 4, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x48000310008000L, active1, 0L);
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 56);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000004000408L, active1, 0L);
      case 118:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 56);
         break;
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x6048000000000000L, active1, 0x4040L);
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 56);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 56);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x9a0000000c000000L, active1, 0xaa000L);
      case 102:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 56);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x182000000000000L, active1, 0L);
      case 109:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x11000L);
      case 110:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 56);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000200L, active1, 0L);
      case 116:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 56);
         return jjMoveStringLiteralDfa4_0(active0, 0x110000000L, active1, 0x40080L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x8L, active1, 0x400L);
      case 118:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x110000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000L);
      case 100:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 56);
         break;
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x6048000000000000L, active1, 0x15000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x28400L);
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x180000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000008L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x9200000000000400L, active1, 0x82000L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L);
      case 121:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 56);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x28000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000100000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x6000000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L, active1, 0L);
      case 104:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 82, 56);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L);
      case 110:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 3, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0x48000010000000L, active1, 0x11000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0x2000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0x4000L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 56);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 56);
         return jjMoveStringLiteralDfa6_0(active0, 0x9000000000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x180000000000000L, active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x28000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L, active1, 0x2000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x48000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x6180000000000400L, active1, 0x80000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x9000000000000000L, active1, 0x40L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4080L);
      case 116:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 76, 56);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 80, 56);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x48000000000000L, active1, 0x8000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000004000000L, active1, 0x2000L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 28, 56);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 32, 56);
         return jjMoveStringLiteralDfa8_0(active0, 0x400L, active1, 0x20080L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000L);
      case 110:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 56);
         return jjMoveStringLiteralDfa8_0(active0, 0x6180000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000000L, active1, 0x80400L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000000L, active1, 0x400L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000L);
      case 101:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 52, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2000L);
      case 103:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x2080000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x48000000000000L, active1, 0x4000L);
      case 113:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80L);
      case 115:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(8, 10, 56);
         break;
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 26, 56);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x2080000000000000L, active1, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x20000L);
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000L);
      case 104:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(9, 83, 56);
         break;
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000000L, active1, 0x8000L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L, active1, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000000L, active1, 0x8000L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x2080000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x2080000000000000L, active1, 0xc000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000000000L, active1, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa13_0(active0, 0x2080000000000000L, active1, 0x8000L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x80L);
      case 100:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000L);
      case 101:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(12, 74, 56);
         break;
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x24000L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(13, 71, 56);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(13, 77, 56);
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x2080000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x4000L);
      case 116:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(13, 81, 56);
         break;
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x2080000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0xc000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(15, 79, 56);
         return jjMoveStringLiteralDfa16_0(active0, 0x40000000000000L, active1, 0L);
      case 102:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 63, 56);
         break;
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0x2080000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 103:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 55, 56);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 61, 56);
         break;
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x40000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1);
      return 17;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x4000L);
      case 102:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 54, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, active1);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(16, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1);
      return 18;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa19_0(active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1);
}
private final int jjMoveStringLiteralDfa19_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(17, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, active1);
      return 19;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa20_0(active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, active1);
}
private final int jjMoveStringLiteralDfa20_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(18, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, active1);
      return 20;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa21_0(active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, active1);
}
private final int jjMoveStringLiteralDfa21_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(19, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, active1);
      return 21;
   }
   switch(curChar)
   {
      case 110:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(21, 78, 56);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, active1);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0xffffffffffffc000L, 0xfffff0007fffffffL, 0x7fffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec3 = {
   0x7ff3ffffffffffffL, 0x7ffffffffffffdfeL, 0xffffffffffffffffL, 0xfc31ffffffffe00fL
};
static final long[] jjbitVec4 = {
   0xffffffL, 0xffffffffffff0000L, 0xf80001ffffffffffL, 0x3L
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0xfffffffbffffd740L, 0xffffd547f7fffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff0003L, 0x33fcfffffff199fL
};
static final long[] jjbitVec7 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0x7fL, 0x707ffffff0000L
};
static final long[] jjbitVec8 = {
   0x7fffffe00000000L, 0xfffe0000000007feL, 0x7cffffffffffffffL, 0x60002f7fffL
};
static final long[] jjbitVec9 = {
   0x23ffffffffffffe0L, 0x3ff000000L, 0x3c5fdfffff99fe0L, 0x30003b0000000L
};
static final long[] jjbitVec10 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100000000L
};
static final long[] jjbitVec11 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec12 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec13 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x0L, 0x0L
};
static final long[] jjbitVec14 = {
   0xd7ffffffffffeL, 0x3fL, 0x200d6caefef02596L, 0x1fL
};
static final long[] jjbitVec15 = {
   0x0L, 0x3fffffffeffL, 0x0L, 0x0L
};
static final long[] jjbitVec16 = {
   0x0L, 0x0L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec17 = {
   0x500000000007daedL, 0x2c62ab82315001L, 0xf580c90040000000L, 0x201080000000007L
};
static final long[] jjbitVec18 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec19 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec20 = {
   0x4c4000000000L, 0x0L, 0x7L, 0x0L
};
static final long[] jjbitVec21 = {
   0x3fe00000080L, 0xfffffffffffffffeL, 0xfffffffe001fffffL, 0x7ffffffffffffffL
};
static final long[] jjbitVec22 = {
   0x1fffffffffe0L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec23 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec24 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec25 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec26 = {
   0xffffffL, 0xffffffffffff0000L, 0xf80001ffffffffffL, 0x30003L
};
static final long[] jjbitVec27 = {
   0xffffffffffffffffL, 0x30000003fL, 0xfffffffbffffd7c0L, 0xffffd547f7fffL
};
static final long[] jjbitVec28 = {
   0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff007bL, 0x33fcfffffff199fL
};
static final long[] jjbitVec29 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe007fL, 0x707ffffff0016L
};
static final long[] jjbitVec30 = {
   0x7fffffe00000000L, 0xffff03ff0007ffffL, 0x7cffffffffffffffL, 0x3ff3dffffef7fffL
};
static final long[] jjbitVec31 = {
   0xf3ffffffffffffeeL, 0xffcfff1e3fffL, 0xd3c5fdfffff99feeL, 0x3ffcfb080399fL
};
static final long[] jjbitVec32 = {
   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100003bbfL
};
static final long[] jjbitVec33 = {
   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
};
static final long[] jjbitVec34 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec35 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x0L, 0x0L
};
static final long[] jjbitVec36 = {
   0x7ff7ffffffffffeL, 0x3ff7fffL, 0x3bff6caefef02596L, 0x3ff3f5fL
};
static final long[] jjbitVec37 = {
   0xc2a003ff03000000L, 0xfffe03fffffffeffL, 0x2fe3ffffebf0fdfL, 0x0L
};
static final long[] jjbitVec38 = {
   0x0L, 0x0L, 0x0L, 0x21fff0000L
};
static final long[] jjbitVec39 = {
   0x3efffe000000a0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x77ffffffffffffffL
};
static final long[] jjbitVec40 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec41 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 55;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAddStates(0, 9);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(14);
                  }
                  else if (curChar == 46)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 39)
                     jjCheckNAddStates(13, 15);
                  else if (curChar == 34)
                     jjCheckNAddStates(16, 18);
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 56:
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(54);
                  }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 53;
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 50;
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 96)
                        kind = 96;
                     jjCheckNAdd(21);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 1:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 3:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
               case 5:
                  if (curChar == 34)
                     jjCheckNAddStates(16, 18);
                  break;
               case 6:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(16, 18);
                  break;
               case 8:
                  if (curChar == 34 && kind > 98)
                     kind = 98;
                  break;
               case 9:
               case 10:
                  if (curChar == 39)
                     jjCheckNAddStates(13, 15);
                  break;
               case 11:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 13:
                  if (curChar == 39 && kind > 98)
                     kind = 98;
                  break;
               case 14:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 46)
                     jjCheckNAddStates(10, 12);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(19, 21);
                  break;
               case 18:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAddStates(0, 9);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 25);
                  break;
               case 28:
                  if (curChar == 46)
                     jjCheckNAddStates(26, 28);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(26, 28);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(30);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(31, 32);
                  break;
               case 32:
                  if (curChar != 46)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAdd(33);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 35:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(36, 23);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 23);
                  break;
               case 39:
                  jjAddStates(32, 33);
                  break;
               case 41:
                  if (curChar == 42 && kind > 92)
                     kind = 92;
                  break;
               case 43:
                  jjAddStates(34, 35);
                  break;
               case 46:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 49:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 50:
                  if (curChar == 42 && kind > 93)
                     kind = 93;
                  break;
               case 51:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 54:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(54);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAddStates(36, 40);
                  }
                  if (curChar == 81)
                     jjAddStates(41, 42);
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(54);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 2:
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAdd(3);
                  break;
               case 7:
                  jjAddStates(16, 18);
                  break;
               case 12:
                  jjAddStates(13, 15);
                  break;
               case 17:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(43, 44);
                  break;
               case 20:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 84)
                     kind = 84;
                  break;
               case 23:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(45, 46);
                  break;
               case 37:
                  if (curChar == 81)
                     jjAddStates(41, 42);
                  break;
               case 38:
                  if (curChar == 123)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 39:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 40:
                  if (curChar == 125)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 42:
                  if (curChar == 123)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 43:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 44:
                  if (curChar == 125)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
               case 46:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(46);
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddStates(36, 40);
                  break;
               case 48:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(54);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddStates(36, 40);
                  break;
               case 56:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(48, 49);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(51, 52);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAdd(54);
                  }
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAdd(3);
                  break;
               case 3:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAdd(3);
                  break;
               case 7:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(16, 18);
                  break;
               case 12:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(13, 15);
                  break;
               case 39:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(32, 33);
                  break;
               case 43:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(34, 35);
                  break;
               case 45:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(46);
                  break;
               case 46:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(46);
                  break;
               case 48:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 51:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 53:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(54);
                  break;
               case 54:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(54);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 55 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x60000000000000L) != 0L)
         {
            jjmatchedKind = 119;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa1_1(0x20000000000000L);
      case 58:
         return jjMoveStringLiteralDfa1_1(0x40000000000000L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_1(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         break;
      case 58:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 117);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, 0L, active1);
}
static final long[] jjbitVec42 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec43 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
};
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffff00002600L & l) != 0L)
                     kind = 119;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 119;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2) && kind > 119)
                     kind = 119;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   27, 28, 17, 20, 30, 31, 32, 34, 35, 23, 16, 21, 22, 11, 12, 13, 
   6, 7, 8, 16, 17, 20, 27, 28, 17, 20, 29, 17, 20, 34, 35, 23, 
   39, 40, 43, 44, 48, 49, 51, 52, 54, 38, 42, 18, 19, 24, 25, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec24[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec24[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec41[i2] & l2) != 0L);
      default : 
         if ((jjbitVec40[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec41[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec43[i2] & l2) != 0L);
      default : 
         if ((jjbitVec42[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", "\54", "\44", "\162\145\164\165\162\156", "\146\157\162", "\151\156", 
"\154\145\164", "\72\75", "\163\157\155\145", "\145\166\145\162\171", 
"\163\141\164\151\163\146\151\145\163", "\151\146", "\50", "\51", "\164\150\145\156", "\145\154\163\145", "\157\162", 
"\141\156\144", "\174\174", "\164\157", "\52", "\144\151\166", "\151\144\151\166", 
"\155\157\144", "\165\156\151\157\156", "\174", "\151\156\164\145\162\163\145\143\164", 
"\145\170\143\145\160\164", "\151\156\163\164\141\156\143\145", "\157\146", "\164\162\145\141\164", 
"\141\163", "\143\141\163\164\141\142\154\145", "\143\141\163\164", "\75", "\41\75", 
"\74\75", "\76", "\76\75", "\145\161", "\156\145", "\154\164", "\154\145", "\147\164", 
"\147\145", "\151\163", "\74\74", "\76\76", "\41", "\143\150\151\154\144", "\72\72", 
"\144\145\163\143\145\156\144\141\156\164", "\141\164\164\162\151\142\165\164\145", "\163\145\154\146", 
"\144\145\163\143\145\156\144\141\156\164\55\157\162\55\163\145\154\146", "\146\157\154\154\157\167\151\156\147\55\163\151\142\154\151\156\147", 
"\146\157\154\154\157\167\151\156\147", "\156\141\155\145\163\160\141\143\145", "\100", "\160\141\162\145\156\164", 
"\141\156\143\145\163\164\157\162", "\160\162\145\143\145\144\151\156\147\55\163\151\142\154\151\156\147", 
"\160\162\145\143\145\144\151\156\147", "\141\156\143\145\163\164\157\162\55\157\162\55\163\145\154\146", "\56\56", 
"\133", "\135", "\56", "\77", "\43", "\146\165\156\143\164\151\157\156", 
"\145\155\160\164\171\55\163\145\161\165\145\156\143\145", "\151\164\145\155", "\156\157\144\145", 
"\144\157\143\165\155\145\156\164\55\156\157\144\145", "\164\145\170\164", "\143\157\155\155\145\156\164", 
"\156\141\155\145\163\160\141\143\145\55\156\157\144\145", 
"\160\162\157\143\145\163\163\151\156\147\55\151\156\163\164\162\165\143\164\151\157\156", "\163\143\150\145\155\141\55\141\164\164\162\151\142\165\164\145", 
"\145\154\145\155\145\156\164", "\163\143\150\145\155\141\55\145\154\145\155\145\156\164", 
"\163\167\151\164\143\150", "\164\171\160\145\163\167\151\164\143\150", null, "\57", "\57\57", "\173", 
"\175", "\74", "\53", "\55", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "EXPR_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0x8fffffffffL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x1e0000000000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[55];
private final int[] jjstateSet = new int[110];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public XParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public XParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 55; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 117 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           pushState();
         break;
      case 118 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         popState();
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 87 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[87]);
                    pushState();
         break;
      case 88 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[88]);
                    popState();
         break;
      case 89 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[89]);
                              pushState();
         break;
      default : 
         break;
   }
}
}
