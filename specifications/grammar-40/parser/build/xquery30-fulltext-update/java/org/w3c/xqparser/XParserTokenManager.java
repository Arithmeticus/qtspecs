/* Generated By:JJTree&JavaCC: Do not edit this line. XParserTokenManager.java */
package org.w3c.xqparser;
import org.w3c.xqparser.Node;
import org.w3c.xqparser.SimpleNode;
import java.util.Stack;

public class XParserTokenManager implements XParserConstants
{
            public Stack stateStack = new Stack();

            /**
              * Push the current state onto the state stack.
              */
            private void pushState()
            {

                stateStack.addElement(new Integer(curLexState));
            }

            /**
              * Push the given state onto the state stack.
              * @param state Must be a valid state.
              */
            private void pushState(int state)
            {

                stateStack.push(new Integer(state));
            }

            /**
              * Pop the state on the state stack, and switch to that state.
              */
            private void popState()
            {
                if (stateStack.size() == 0)
                {
                    // E.g., a would-be query consisting of a single right curly brace.
                    throw new TokenMgrError(
                        "On line " + input_stream.getEndLine() + ","
                        + " the expression contains an 'ending' construct"
                        + " (e.g., a right-brace or end-tag)"
                        + " for which the corresponding 'starting' construct does not appear.",
                        TokenMgrError.LEXICAL_ERROR
                    );
                }

                int nextState = ((Integer) stateStack.pop()).intValue();

                SwitchTo(nextState);
            }

            /**
              * Print the current line position.
              */
            public void printLinePos()
            {
                System.err.println("Line: " + input_stream.getEndLine());
            }
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1, active2, active3), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_5(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_5(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 63:
         return jjMoveStringLiteralDfa1_5(0x400000000000000L);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_5(long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(0, 0L, 0L, 0L, active3);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active3 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 250);
         break;
      default :
         break;
   }
   return jjStartNfa_5(0, 0L, 0L, 0L, active3);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0xffffffffffffc000L, 0xfffff0007fffffffL, 0x7fffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec3 = {
   0x7ff3ffffffffffffL, 0x7ffffffffffffdfeL, 0xffffffffffffffffL, 0xfc31ffffffffe00fL
};
static final long[] jjbitVec4 = {
   0xffffffL, 0xffffffffffff0000L, 0xf80001ffffffffffL, 0x3L
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0xfffffffbffffd740L, 0xffffd547f7fffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff0003L, 0x33fcfffffff199fL
};
static final long[] jjbitVec7 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0x7fL, 0x707ffffff0000L
};
static final long[] jjbitVec8 = {
   0x7fffffe00000000L, 0xfffe0000000007feL, 0x7cffffffffffffffL, 0x60002f7fffL
};
static final long[] jjbitVec9 = {
   0x23ffffffffffffe0L, 0x3ff000000L, 0x3c5fdfffff99fe0L, 0x30003b0000000L
};
static final long[] jjbitVec10 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100000000L
};
static final long[] jjbitVec11 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec12 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec13 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x0L, 0x0L
};
static final long[] jjbitVec14 = {
   0xd7ffffffffffeL, 0x3fL, 0x200d6caefef02596L, 0x1fL
};
static final long[] jjbitVec15 = {
   0x0L, 0x3fffffffeffL, 0x0L, 0x0L
};
static final long[] jjbitVec16 = {
   0x0L, 0x0L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec17 = {
   0x500000000007daedL, 0x2c62ab82315001L, 0xf580c90040000000L, 0x201080000000007L
};
static final long[] jjbitVec18 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec19 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec20 = {
   0x4c4000000000L, 0x0L, 0x7L, 0x0L
};
static final long[] jjbitVec21 = {
   0x3fe00000080L, 0xfffffffffffffffeL, 0xfffffffe001fffffL, 0x7ffffffffffffffL
};
static final long[] jjbitVec22 = {
   0x1fffffffffe0L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec23 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec24 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec25 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec26 = {
   0xffffffL, 0xffffffffffff0000L, 0xf80001ffffffffffL, 0x30003L
};
static final long[] jjbitVec27 = {
   0xffffffffffffffffL, 0x30000003fL, 0xfffffffbffffd7c0L, 0xffffd547f7fffL
};
static final long[] jjbitVec28 = {
   0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff007bL, 0x33fcfffffff199fL
};
static final long[] jjbitVec29 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe007fL, 0x707ffffff0016L
};
static final long[] jjbitVec30 = {
   0x7fffffe00000000L, 0xffff03ff0007ffffL, 0x7cffffffffffffffL, 0x3ff3dffffef7fffL
};
static final long[] jjbitVec31 = {
   0xf3ffffffffffffeeL, 0xffcfff1e3fffL, 0xd3c5fdfffff99feeL, 0x3ffcfb080399fL
};
static final long[] jjbitVec32 = {
   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100003bbfL
};
static final long[] jjbitVec33 = {
   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
};
static final long[] jjbitVec34 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec35 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x0L, 0x0L
};
static final long[] jjbitVec36 = {
   0x7ff7ffffffffffeL, 0x3ff7fffL, 0x3bff6caefef02596L, 0x3ff3f5fL
};
static final long[] jjbitVec37 = {
   0xc2a003ff03000000L, 0xfffe03fffffffeffL, 0x2fe3ffffebf0fdfL, 0x0L
};
static final long[] jjbitVec38 = {
   0x0L, 0x0L, 0x0L, 0x21fff0000L
};
static final long[] jjbitVec39 = {
   0x3efffe000000a0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x77ffffffffffffffL
};
private final int jjMoveNfa_5(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 15;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 2:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 269;
                  jjCheckNAdd(2);
                  break;
               case 1:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  kind = 265;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 265)
                        kind = 265;
                     jjCheckNAdd(1);
                  }
                  if (curChar == 120)
                     jjAddStates(0, 3);
                  else if (curChar == 88)
                     jjAddStates(4, 7);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 265)
                     kind = 265;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 88)
                     jjAddStates(4, 7);
                  break;
               case 4:
                  if (curChar == 76 && kind > 213)
                     kind = 213;
                  break;
               case 5:
               case 11:
                  if (curChar == 77)
                     jjCheckNAdd(4);
                  break;
               case 6:
                  if (curChar == 108 && kind > 213)
                     kind = 213;
                  break;
               case 7:
               case 12:
                  if (curChar == 77)
                     jjCheckNAdd(6);
                  break;
               case 8:
               case 13:
                  if (curChar == 109)
                     jjCheckNAdd(4);
                  break;
               case 9:
               case 14:
                  if (curChar == 109)
                     jjCheckNAdd(6);
                  break;
               case 10:
                  if (curChar == 120)
                     jjAddStates(0, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 265)
                     kind = 265;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 265)
                     kind = 265;
                  jjCheckNAdd(1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 15 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_9(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_9(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_9(jjStopStringLiteralDfa_9(pos, active0, active1, active2, active3), pos + 1);
}
private final int jjStartNfaWithStates_9(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_9(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_9()
{
   switch(curChar)
   {
      case 62:
         return jjStopAtPos(0, 237);
      default :
         return jjMoveNfa_9(1, 0);
   }
}
private final int jjMoveNfa_9(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 269;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(8, 9);
                  break;
               case 3:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 236)
                     kind = 236;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 236)
                     kind = 236;
                  jjCheckNAddStates(10, 12);
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
               case 5:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 236)
                     kind = 236;
                  jjCheckNAdd(5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 236)
                     kind = 236;
                  jjCheckNAddStates(10, 12);
                  break;
               case 2:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 236)
                     kind = 236;
                  jjCheckNAdd(5);
                  break;
               case 5:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 236)
                     kind = 236;
                  jjCheckNAdd(5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1, long active2, long active3, long active4)
{
   switch (pos)
   {
      case 0:
         if ((active3 & 0x100000L) != 0L)
            return 3;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1, long active2, long active3, long active4)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1, active2, active3, active4), pos + 1);
}
private final int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 38:
         return jjStartNfaWithStates_3(0, 212, 3);
      case 39:
         jjmatchedKind = 242;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x20L);
      case 60:
         return jjStopAtPos(0, 211);
      case 123:
         jjmatchedKind = 220;
         return jjMoveStringLiteralDfa1_3(0x8000000000000L, 0x0L);
      case 125:
         jjmatchedKind = 210;
         return jjMoveStringLiteralDfa1_3(0x10000000000000L, 0x0L);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_3(long active3, long active4)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, 0L, 0L, 0L, active3, active4);
      return 1;
   }
   switch(curChar)
   {
      case 39:
         if ((active4 & 0x20L) != 0L)
            return jjStopAtPos(1, 261);
         break;
      case 123:
         if ((active3 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 243);
         break;
      case 125:
         if ((active3 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 244);
         break;
      default :
         break;
   }
   return jjStartNfa_3(0, 0L, 0L, 0L, active3, active4);
}
static final long[] jjbitVec40 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec41 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec42 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
};
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 21;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(16, 18);
                  break;
               case 0:
                  if ((0xffffffff00002600L & l) != 0L)
                  {
                     if (kind > 264)
                        kind = 264;
                  }
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 15;
                  if (curChar == 38)
                     jjAddStates(13, 16);
                  break;
               case 2:
                  if (curChar == 59 && kind > 259)
                     kind = 259;
                  break;
               case 14:
                  if ((0xffffffff00002600L & l) != 0L && kind > 264)
                     kind = 264;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 59 && kind > 266)
                     kind = 266;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(19, 17);
                  break;
               case 20:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 97)
                     jjAddStates(17, 18);
                  else if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 103)
                     jjCheckNAdd(1);
                  else if (curChar == 108)
                     jjCheckNAdd(1);
                  break;
               case 0:
                  if (kind > 264)
                     kind = 264;
                  break;
               case 1:
                  if (curChar == 116)
                     jjCheckNAdd(2);
                  break;
               case 4:
                  if (curChar == 103)
                     jjCheckNAdd(1);
                  break;
               case 5:
                  if (curChar == 111)
                     jjCheckNAdd(1);
                  break;
               case 6:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 97)
                     jjAddStates(17, 18);
                  break;
               case 9:
                  if (curChar == 112)
                     jjCheckNAdd(2);
                  break;
               case 10:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 115)
                     jjCheckNAdd(2);
                  break;
               case 12:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 18:
                  if (curChar == 120)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(19, 17);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 264)
                     kind = 264;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 21 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_13(int pos, long active0, long active1, long active2, long active3, long active4)
{
   switch (pos)
   {
      case 0:
         if ((active4 & 0x18000000L) != 0L)
         {
            jjmatchedKind = 285;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_13(int pos, long active0, long active1, long active2, long active3, long active4)
{
   return jjMoveNfa_13(jjStopStringLiteralDfa_13(pos, active0, active1, active2, active3, active4), pos + 1);
}
private final int jjStartNfaWithStates_13(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_13(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_13()
{
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa1_13(0x8000000L);
      case 58:
         return jjMoveStringLiteralDfa1_13(0x10000000L);
      default :
         return jjMoveNfa_13(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_13(long active4)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(0, 0L, 0L, 0L, 0L, active4);
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active4 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 284);
         break;
      case 58:
         if ((active4 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 283);
         break;
      default :
         break;
   }
   return jjStartNfa_13(0, 0L, 0L, 0L, 0L, active4);
}
private final int jjMoveNfa_13(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffff00002600L & l) != 0L)
                     kind = 285;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 285;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 285)
                     kind = 285;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      case 0:
         if ((active3 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 247;
            return 2;
         }
         return -1;
      case 1:
         if ((active3 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 1;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1, active2, active3), pos + 1);
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa1_1(0x40000000000000L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_1(long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, 0L, 0L, 0L, active3);
      return 1;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa2_1(active3, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_1(0, 0L, 0L, 0L, active3);
}
private final int jjMoveStringLiteralDfa2_1(long old3, long active3)
{
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_1(0, 0L, 0L, 0L, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, 0L, 0L, 0L, active3);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active3 & 0x40000000000000L) != 0L)
            return jjStopAtPos(2, 246);
         break;
      default :
         break;
   }
   return jjStartNfa_1(1, 0L, 0L, 0L, active3);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffff00002600L & l) != 0L)
                  {
                     if (kind > 247)
                        kind = 247;
                  }
                  if (curChar == 45)
                     jjAddStates(8, 9);
                  break;
               case 2:
                  if ((0xffffffff00002600L & l) != 0L)
                  {
                     if (kind > 248)
                        kind = 248;
                  }
                  if (curChar == 45)
                  {
                     if (kind > 209)
                        kind = 209;
                  }
                  break;
               case 1:
                  if (curChar == 45)
                     jjAddStates(8, 9);
                  break;
               case 3:
                  if ((0xffffffff00002600L & l) != 0L && kind > 248)
                     kind = 248;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 247)
                     kind = 247;
                  break;
               case 2:
                  if (kind > 248)
                     kind = 248;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 247)
                     kind = 247;
                  break;
               case 2:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 248)
                     kind = 248;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfff91fffff7ffe7cL) != 0L || (active1 & 0xaf3f87ffd7fdffffL) != 0L || (active2 & 0xfffffffffff707dfL) != 0L || (active3 & 0xce01ffffL) != 0L)
         {
            jjmatchedKind = 267;
            return 131;
         }
         if ((active1 & 0x20000000L) != 0L)
            return 1;
         if ((active2 & 0x4800L) != 0L)
            return 132;
         return -1;
      case 1:
         if ((active0 & 0xf6d91effb869fe7cL) != 0L || (active1 & 0xaf0007cbc779feefL) != 0L || (active2 & 0xedf7ffffdfd707deL) != 0L || (active3 & 0x8a01bcdfL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 267;
               jjmatchedPos = 1;
            }
            return 131;
         }
         if ((active0 & 0x920010047160000L) != 0L || (active1 & 0x3f803410840110L) != 0L || (active2 & 0x1208000020200001L) != 0L || (active3 & 0x44004320L) != 0L)
            return 131;
         return -1;
      case 2:
         if ((active0 & 0xf4591efeff7ffe5cL) != 0L || (active1 & 0xab0007de8659fefbL) != 0L || (active2 & 0xfdfffffd5ff707dfL) != 0L || (active3 & 0xce00ffffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 267;
               jjmatchedPos = 2;
            }
            return 131;
         }
         if ((active0 & 0xa80000100000020L) != 0L || (active1 & 0x400000141200004L) != 0L || (active2 & 0x2a0000000L) != 0L || (active3 & 0x10000L) != 0L)
            return 131;
         return -1;
      case 3:
         if ((active0 & 0xf6491efeff3ffe7cL) != 0L || (active1 & 0xa900025e024076e8L) != 0L || (active2 & 0xddffee7857d707ddL) != 0L || (active3 & 0xce017dcaL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 267;
               jjmatchedPos = 3;
            }
            return 131;
         }
         if ((active0 & 0x10000000400000L) != 0L || (active1 & 0x200058084198813L) != 0L || (active2 & 0x2000118508200002L) != 0L || (active3 & 0x8235L) != 0L)
            return 131;
         return -1;
      case 4:
         if ((active0 & 0x72491eeedf49ee7cL) != 0L || (active1 & 0x8900029c02016608L) != 0L || (active2 & 0xddfbee5807c707ddL) != 0L || (active3 & 0xca016d83L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 267;
               jjmatchedPos = 4;
            }
            return 131;
         }
         if ((active0 & 0x8400001020361000L) != 0L || (active1 & 0x20000042004010e0L) != 0L || (active2 & 0x4002450100000L) != 0L || (active3 & 0x4001248L) != 0L)
            return 131;
         return -1;
      case 5:
         if ((active0 & 0x52091e2eff4fee58L) != 0L || (active1 & 0x8100029402012008L) != 0L || (active2 & 0xcdfaee4000d7079dL) != 0L || (active3 & 0xca000803L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 267;
               jjmatchedPos = 5;
            }
            return 131;
         }
         if ((active0 & 0x204000c000000024L) != 0L || (active1 & 0x800000800004600L) != 0L || (active2 & 0x1001001807000040L) != 0L || (active3 & 0x16580L) != 0L)
            return 131;
         return -1;
      case 6:
         if ((active0 & 0x12011c2cfd4bcc48L) != 0L || (active1 & 0x8100029402012008L) != 0L || (active2 & 0xcdf8ee0003d5079dL) != 0L || (active3 & 0xca000002L) != 0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 6;
            return 131;
         }
         if ((active0 & 0x4008020202042210L) != 0L || (active2 & 0x2004000020000L) != 0L || (active3 & 0x801L) != 0L)
            return 131;
         return -1;
      case 7:
         if ((active0 & 0x82cbd494440L) != 0L || (active1 & 0x8000020400012000L) != 0L || (active2 & 0x8cf8a8000394031dL) != 0L || (active3 & 0xc0000002L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 267;
               jjmatchedPos = 7;
            }
            return 131;
         }
         if ((active0 & 0x1201140040028808L) != 0L || (active1 & 0x100009002000008L) != 0L || (active2 & 0x4100460000410480L) != 0L || (active3 & 0xa000000L) != 0L)
            return 131;
         return -1;
      case 8:
         if ((active0 & 0x28bd410400L) != 0L || (active1 & 0x8000000000010000L) != 0L || (active2 & 0x888000003540404L) != 0L || (active3 & 0x80000002L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 267;
               jjmatchedPos = 8;
            }
            return 131;
         }
         if ((active0 & 0x80400084040L) != 0L || (active1 & 0x20400002000L) != 0L || (active2 & 0x8470ac0000800319L) != 0L || (active3 & 0x40000000L) != 0L)
            return 131;
         return -1;
      case 9:
         if ((active0 & 0x884000000L) != 0L || (active1 & 0x8000000000010000L) != 0L || (active2 & 0x80080000000004L) != 0L || (active3 & 0x80000000L) != 0L)
            return 131;
         if ((active0 & 0x2039410400L) != 0L || (active2 & 0x808000003d40508L) != 0L || (active3 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 267;
               jjmatchedPos = 9;
            }
            return 131;
         }
         return -1;
      case 10:
         if ((active0 & 0x2038410400L) != 0L || (active2 & 0x800000003d4050cL) != 0L || (active3 & 0x2L) != 0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 10;
            return 131;
         }
         if ((active0 & 0x1000000L) != 0L || (active2 & 0x8000000000000L) != 0L)
            return 131;
         return -1;
      case 11:
         if ((active0 & 0x2038400400L) != 0L || (active2 & 0x3d4050cL) != 0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 11;
            return 131;
         }
         if ((active0 & 0x10000L) != 0L || (active2 & 0x800000000000000L) != 0L || (active3 & 0x2L) != 0L)
            return 131;
         return -1;
      case 12:
         if ((active0 & 0x2038400400L) != 0L || (active2 & 0x394050cL) != 0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 12;
            return 131;
         }
         if ((active2 & 0x400000L) != 0L)
            return 131;
         return -1;
      case 13:
         if ((active0 & 0x2030400000L) != 0L || (active2 & 0x104050cL) != 0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 13;
            return 131;
         }
         if ((active0 & 0x8000400L) != 0L || (active2 & 0x2900000L) != 0L)
            return 131;
         return -1;
      case 14:
         if ((active0 & 0x2030000000L) != 0L || (active2 & 0x104050cL) != 0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 14;
            return 131;
         }
         if ((active0 & 0x400000L) != 0L)
            return 131;
         return -1;
      case 15:
         if ((active0 & 0x2030000000L) != 0L || (active2 & 0x4010cL) != 0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 15;
            return 131;
         }
         if ((active2 & 0x1000400L) != 0L)
            return 131;
         return -1;
      case 16:
         if ((active0 & 0x20000000L) != 0L || (active2 & 0x40004L) != 0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 16;
            return 131;
         }
         if ((active0 & 0x2010000000L) != 0L || (active2 & 0x108L) != 0L)
            return 131;
         return -1;
      case 17:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 17;
            return 131;
         }
         if ((active0 & 0x20000000L) != 0L || (active2 & 0x4L) != 0L)
            return 131;
         return -1;
      case 18:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 18;
            return 131;
         }
         return -1;
      case 19:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 19;
            return 131;
         }
         return -1;
      case 20:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 267;
            jjmatchedPos = 20;
            return 131;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4), pos + 1);
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 124;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L, 0x0L, 0x0L, 0x0L);
      case 35:
         return jjStopAtPos(0, 147);
      case 36:
         return jjStopAtPos(0, 49);
      case 37:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x2L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 40:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x800000000L, 0x8000000L);
      case 41:
         return jjStopAtPos(0, 47);
      case 42:
         return jjStartNfaWithStates_0(0, 93, 1);
      case 43:
         return jjStopAtPos(0, 225);
      case 44:
         return jjStopAtPos(0, 23);
      case 45:
         return jjStopAtPos(0, 226);
      case 46:
         jjmatchedKind = 142;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800L, 0x0L, 0x0L);
      case 47:
         jjmatchedKind = 215;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1000000L, 0x0L);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x4000000000000000L, 0x0L, 0x0L, 0x0L);
      case 59:
         return jjStopAtPos(0, 8);
      case 60:
         jjmatchedKind = 224;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40100000000000L, 0x0L, 0xa20000000000000L, 0x0L);
      case 61:
         return jjStopAtPos(0, 7);
      case 62:
         jjmatchedKind = 109;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80400000000000L, 0x0L, 0x0L, 0x0L);
      case 63:
         return jjStopAtPos(0, 143);
      case 64:
         return jjStopAtPos(0, 133);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 140);
      case 93:
         return jjStopAtPos(0, 141);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x220010000000000L, 0x1000000L, 0x280000481L, 0x40000040L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x8400L, 0x100L, 0x0L, 0x80L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x8000000414000L, 0x2000018002408020L, 0x2000000020000L, 0x8000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1018002200L, 0x8000000040000000L, 0x80220000410004L, 0x80000400L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x20000200008L, 0x800800101004L, 0x1004000100000L, 0x8000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x800c0000000000L, 0x0L, 0x10058000018L, 0x8L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x18000000000080L, 0x0L, 0x2000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x110004042000000L, 0x20001480040000L, 0x8000000000000L, 0x4120L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x406000000000000L, 0x5020000000000000L, 0x4000010L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x80000020L, 0x100000000L, 0x8000000000L, 0x10000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x5000040L, 0x1000000000010L, 0x200000020a00000L, 0x200L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x40000000160000L, 0x2000800002L, 0x1000000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x2600000800L, 0x8L, 0x880800040340L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L, 0x800000000000000L, 0x2802L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xc400008000001000L, 0x800000000006a00L, 0x2110540003000002L, 0x4L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x200024014290000L, 0x400002000000000L, 0x0L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x100000080000L, 0x200000000L, 0x44000000000000L, 0x0L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1000000000010L, 0x100000000000000L, 0x0L, 0x1000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x40000000041L, 0x8000000504000000L, 0x1L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x4L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 122:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 220);
      case 124:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000L, 0x0L, 0x0L, 0x0L);
      case 125:
         return jjStopAtPos(0, 221);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x820000000000000L, active4, 0L);
      case 35:
         if ((active3 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 227);
         break;
      case 37:
         return jjMoveStringLiteralDfa2_0(active0, 0x2L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 46:
         if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(1, 139);
         break;
      case 47:
         if ((active3 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 216);
         break;
      case 58:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 126);
         else if ((active4 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 283);
         break;
      case 60:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         break;
      case 61:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 110);
         break;
      case 62:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         break;
      case 63:
         if ((active3 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 249);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1002100008040L, active1, 0x50001800040a000L, active2, 0x4000980000800040L, active3, 0x1010L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x400008000000000L, active1, 0L, active2, 0x1003000000L, active3, 0L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000L, active2, 0L, active3, 0L, active4, 0L);
      case 101:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 116, 131);
         return jjMoveStringLiteralDfa2_0(active0, 0x800000e18002210L, active1, 0x8000000004000410L, active2, 0x1810440004000006L, active3, 0x84002c82L, active4, 0L);
      case 102:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(1, 82, 131);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 101, 131);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000080041L, active2, 0x400000800000000L, active3, 0L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000001080000000L, active1, 0x40040000000L, active2, 0x8080222000000000L, active3, 0x9L, active4, 0L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x4200020000000000L, active1, 0x100000L, active2, 0x200000000L, active3, 0L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000200000L, active1, 0L, active2, 0x100000L, active3, 0L, active4, 0L);
      case 110:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x42080008L, active1, 0x1601000006L, active2, 0x9000080000480L, active3, 0x4120L, active4, 0L);
      case 111:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 92, 131);
         else if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x88000005414420L, active1, 0x102000820L, active2, 0x22008520630018L, active3, 0x18200L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x40100000000000L, active1, 0L, active2, 0x40000000000000L, active3, 0L, active4, 0L);
      case 113:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 111, 131);
         return jjMoveStringLiteralDfa2_0(active0, 0x4L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 114:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20160800L, active1, 0x24000200088L, active2, 0x10000040300L, active3, 0x2000000L, active4, 0L);
      case 115:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 117, 131);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4000000000000L, active3, 0x40000000L, active4, 0L);
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 113, 131);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 115, 131);
         return jjMoveStringLiteralDfa2_0(active0, 0x8010080000001000L, active1, 0x800000000000200L, active2, 0x2100000058000001L, active3, 0L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000040000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000L, active2, 0L, active3, 0L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000L, active2, 0L, active3, 0L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000L, active2, 0x4000000000L, active3, 0x8000000L, active4, 0L);
      case 121:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 72, 131);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000010000L, active2, 0L, active3, 0L, active4, 0L);
      case 124:
         if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 37:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(2, 1);
         break;
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0x80005000000L, active1, 0L, active2, 0L, active3, 0x20000000000000L);
      case 78:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 131);
         break;
      case 91:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x20000000200L, active2, 0x80004010000000L, active3, 0x4000000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x18000208L, active1, 0x800000000L, active2, 0x1000410480L, active3, 0x40000000L);
      case 100:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 131);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 88, 131);
         else if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100000160020L, active1, 0L, active2, 0x200000L, active3, 0x10200L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x10020000000800L, active1, 0x4000081049L, active2, 0x500000000000300L, active3, 0x2000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x40002000L, active1, 0L, active2, 0x200000000000L, active3, 0x80L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x8002000000L, active1, 0L, active2, 0x3000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0x2000000280004000L, active2, 0x4000004000000L, active3, 0x4L);
      case 108:
         if ((active2 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 161;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000004000L, active1, 0x100000000000002L, active2, 0x880000000000001aL, active3, 0x1400L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000040L, active1, 0x800L, active2, 0x102000820000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2008040080010000L, active1, 0x2000000L, active2, 0x4012440040000000L, active3, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000020080000L, active1, 0x80L, active2, 0x2000010008040000L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000600000L, active1, 0x200000000010000L, active2, 0x40000000100000L, active3, 0x8800L);
      case 114:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 55, 131);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000e00001010L, active1, 0x800000000000000L, active2, 0x880d00000040L, active3, 0x8L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0x8000019000108000L, active2, 0x8028000000004L, active3, 0x80000110L);
      case 116:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 59, 131);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 157, 131);
         return jjMoveStringLiteralDfa3_0(active0, 0x40002000000000L, active1, 0x40400402400L, active2, 0x1000000000001L, active3, 0x8000061L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x404L, active1, 0x20L, active2, 0L, active3, 0L);
      case 118:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 94, 131);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1000000000000000L, active3, 0x4002L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20000000000000L, active3, 0L);
      case 120:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 122, 131);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000010L, active2, 0L, active3, 0L);
      case 121:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 85, 131);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 159, 131);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         if ((active3 & 0x20000000000000L) != 0L)
            return jjStopAtPos(3, 245);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0L, active2, 0L, active3, 0L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000002000L, active1, 0x4000000000L, active2, 0x800880800000000L, active3, 0x2002002L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0x200L, active2, 0L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x40200000000L, active1, 0x8000000000400000L, active2, 0x80004000040304L, active3, 0x80000000L);
      case 100:
         if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 160;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x6000000000000000L, active1, 0L, active2, 0x8000000400000000L, active3, 0L);
      case 101:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 131);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 131);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 84, 131);
         else if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x200000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 172, 131);
         return jjMoveStringLiteralDfa4_0(active0, 0x8002168044L, active1, 0xc00010000L, active2, 0x10680020038004c0L, active3, 0x48000740L);
      case 102:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 129, 131);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x200000000000L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x4000000004000000L, active3, 0L);
      case 104:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4100105c001000L, active1, 0x900000000002000L, active2, 0x1000000000000L, active3, 0x10000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x4200L, active1, 0x2000000000000000L, active2, 0x18L, active3, 0x800L);
      case 109:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 131);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 168, 131);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L, active2, 0x100000000020000L, active3, 0L);
      case 110:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 131);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 131);
         return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0x20000000020L, active2, 0x4000010000000L, active3, 0L);
      case 111:
         if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 197, 131);
         return jjMoveStringLiteralDfa4_0(active0, 0x200084800000008L, active1, 0x200000000L, active2, 0x40000000L, active3, 0x4080L);
      case 112:
         if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 189, 131);
         else if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 194, 131);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0L, active2, 0L, active3, 0L);
      case 114:
         if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 155, 131);
         return jjMoveStringLiteralDfa4_0(active0, 0x8400000000080000L, active1, 0x1040L, active2, 0x1L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x10810L, active1, 0L, active2, 0x410000000000000L, active3, 0x4000008L);
      case 116:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 131);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 90, 131);
         else if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 167, 131);
         else if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 196, 131);
         return jjMoveStringLiteralDfa4_0(active0, 0x8002000200000L, active1, 0x9002004000L, active2, 0x2460000100000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0xa0000020L, active1, 0x480L, active2, 0x1000410000L, active3, 0x1000L);
      case 118:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 95, 131);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8L, active2, 0L, active3, 0L);
      case 121:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 131);
         else if ((active3 & 0x8000L) != 0L)
         {
            jjmatchedKind = 207;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x800408000L, active1, 0L, active2, 0L, active3, 0L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000004200L, active1, 0x9002000000L, active2, 0x400020000000000L, active3, 0x800L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000004000L, active2, 0x8000000000000000L, active3, 0L);
      case 100:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 125, 131);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 156, 131);
         return jjMoveStringLiteralDfa5_0(active0, 0x80408L, active1, 0x100000000000000L, active2, 0L, active3, 0L);
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 131);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 70, 131);
         else if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 204, 131);
         return jjMoveStringLiteralDfa5_0(active0, 0x8022200000800L, active1, 0x8000000000000000L, active2, 0x2640000060304L, active3, 0x80000000L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000L);
      case 103:
         if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 178, 131);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x880000000000L, active3, 0L);
      case 104:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 86, 131);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x4000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000010L, active1, 0x8L, active2, 0x10000000000001L, active3, 0L);
      case 107:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000020L, active1, 0x200L, active2, 0x1000000000000000L, active3, 0x2L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x8418000000L, active1, 0L, active2, 0x100000003410000L, active3, 0x2000L);
      case 110:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 97, 131);
         return jjMoveStringLiteralDfa5_0(active0, 0x44000000L, active1, 0L, active2, 0x8000000000040L, active3, 0x40000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x2040000000000000L, active1, 0L, active2, 0x18L, active3, 0x1L);
      case 112:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 12, 131);
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80020000000L, active1, 0x800000000L, active2, 0L, active3, 0L);
      case 114:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 198, 131);
         return jjMoveStringLiteralDfa5_0(active0, 0x4003060004L, active1, 0x400000400L, active2, 0xe1001000000000L, active3, 0x8000180L);
      case 115:
         if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 162, 131);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 165, 131);
         else if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 201, 131);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000040L, active1, 0x20000012000L, active2, 0x800800480L, active3, 0L);
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 131);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 131);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 69, 131);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 102, 131);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 158, 131);
         else if ((active3 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 195, 131);
         else if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 218, 131);
         return jjMoveStringLiteralDfa5_0(active0, 0x140000010000L, active1, 0L, active2, 0x800004000000000L, active3, 0x2000400L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L, active1, 0L, active2, 0x4000000000000000L, active3, 0L);
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 121:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 131);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x100000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0L, active2, 0x100000L, active3, 0L);
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000000000L);
      case 97:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x18000400L, active1, 0x100000000000000L, active2, 0xc000000003000000L, active3, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L, active1, 0x8000000000L, active2, 0x1L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x60000000000000L, active3, 0x800L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0L, active2, 0x300L, active3, 0x40000000L);
      case 101:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 5, 131);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 131);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 163, 131);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 176, 131);
         else if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 199, 131);
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 202, 131);
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 205, 131);
         else if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 206, 131);
         return jjMoveStringLiteralDfa6_0(active0, 0x10c0000L, active1, 0L, active2, 0x410000L, active3, 0x2000000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000002000L, active2, 0L, active3, 0L);
      case 104:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 78, 131);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1200140462020008L, active1, 0x2000000L, active2, 0x980000000000000L, active3, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L, active1, 0L, active2, 0x4000000000L, active3, 0L);
      case 110:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 131);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 131);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000020200400000L, active1, 0x8000001000000000L, active2, 0x2460000020004L, active3, 0x88000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x10L, active1, 0x8L, active2, 0L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L, active1, 0L, active2, 0x800000L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000010a00L, active1, 0L, active2, 0xa80000000000L, active3, 0L);
      case 115:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 164, 131);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 188, 131);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000L, active2, 0x8000000040000L, active3, 0L);
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 131);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 99, 131);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 123, 131);
         else if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 134, 131);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 154, 131);
         else if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 200, 131);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000004000L, active1, 0L, active2, 0x10000000000480L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L, active1, 0L, active2, 0x400000000000000L, active3, 0x1L);
      case 119:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 131);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000L, active2, 0x18L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 121:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 2, 131);
         else if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 208, 131);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x3000000L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x400040L, active1, 0L, active2, 0x60880000800000L, active3, 0x8000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000L, active2, 0x460000000000L, active3, 0L);
      case 100:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 18, 131);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x4L, active3, 0x80000002L);
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 9, 131);
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 203, 131);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L, active1, 0x400000000L, active2, 0x200000000000L, active3, 0L);
      case 103:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 62, 131);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x4000000000000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x80800004000L, active1, 0x12000L, active2, 0x18000000000318L, active3, 0x40000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000418000000L, active1, 0x8000000000L, active2, 0L, active3, 0L);
      case 110:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 4, 131);
         return jjMoveStringLiteralDfa7_0(active0, 0x1200102020020008L, active1, 0x2000000L, active2, 0x100000000410000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0x20000000000L, active2, 0x800000000000480L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x88400L, active1, 0L, active2, 0x8400000000000000L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x81000000L, active1, 0L, active2, 0x140000L, active3, 0x2000000L);
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 131);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 131);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 131);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 131);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 131);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 145, 131);
         else if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 177, 131);
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 192, 131);
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L, active1, 0x100000000000000L, active2, 0x80000000000000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L, active1, 0x8L, active2, 0x1L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L, active1, 0L, active2, 0L, active3, 0L);
      case 121:
         if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 166, 131);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x2018000000L, active1, 0L, active2, 0L, active3, 0L);
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x800000000000000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x1000004L, active3, 0x2L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x10040L, active1, 0x400000000L, active2, 0x800000L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 11, 131);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 48, 131);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 100, 131);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 103, 131);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 120, 131);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 169, 131);
         else if ((active2 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 7;
         }
         else if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 190, 131);
         return jjMoveStringLiteralDfa8_0(active0, 0x1080000L, active1, 0x2000L, active2, 0x40002100000L, active3, 0L);
      case 103:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 3, 131);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 17, 131);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 131);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 57, 131);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 60, 131);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 184, 131);
         return jjMoveStringLiteralDfa8_0(active0, 0x820000000L, active1, 0L, active2, 0L, active3, 0L);
      case 105:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 15, 131);
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L, active1, 0L, active2, 0x80000000040000L, active3, 0x80000000L);
      case 108:
         if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 219, 131);
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000L, active1, 0L, active2, 0L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L, active1, 0L, active2, 0L, active3, 0L);
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 42, 131);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x800200000000318L, active3, 0x40000000L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000004000L, active1, 0L, active2, 0L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x880000000000L, active3, 0L);
      case 114:
         if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L, active1, 0x20000000000L, active2, 0x400L, active3, 0L);
      case 115:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 67, 131);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 89, 131);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x60000000000000L, active3, 0L);
      case 116:
         if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 7;
         }
         else if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 217, 131);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000L, active2, 0x8000000400001L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x400000000000000L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x10000000000000L, active3, 0L);
      case 121:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 30, 131);
         return jjMoveStringLiteralDfa8_0(active0, 0x400L, active1, 0L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000400L, active1, 0L, active2, 0x400400L, active3, 0L);
      case 91:
         if ((active3 & 0x800000000000000L) != 0L)
            return jjStopAtPos(8, 251);
         break;
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000L, active2, 0x80000000000000L, active3, 0L);
      case 100:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(8, 19, 131);
         break;
      case 101:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 34, 131);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 128, 131);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 180, 131);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 181, 131);
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 182, 131);
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L, active1, 0L, active2, 0x800000L, active3, 0L);
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L, active1, 0L, active2, 0L, active3, 0L);
      case 103:
         if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 8;
         }
         else if ((active2 & 0x200L) != 0L)
         {
            jjmatchedKind = 137;
            jjmatchedPos = 8;
         }
         else if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 222, 131);
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000L, active1, 0L, active2, 0x108L, active3, 0L);
      case 104:
         if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x80000000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x804000000L, active1, 0L, active2, 0x8000000000000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x2000000L, active3, 0L);
      case 109:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 105, 131);
         break;
      case 110:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 14, 131);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 43, 131);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x40004L, active3, 0x80000000L);
      case 113:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x100000L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L, active1, 0L, active2, 0L, active3, 0L);
      case 115:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 77, 131);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 170, 131);
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 186, 131);
         else if ((active2 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 191, 131);
         return jjMoveStringLiteralDfa9_0(active0, 0x2010000000L, active1, 0L, active2, 0x800000000000000L, active3, 0L);
      case 116:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(8, 98, 131);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 173, 131);
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L, active1, 0L, active2, 0x1000000L, active3, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x800108L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x2010000000L, active1, 0L, active2, 0x2000000L, active3, 0L);
      case 103:
         if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(9, 223, 131);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x40000L, active3, 0L);
      case 104:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(9, 80, 131);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x800000000000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000L, active1, 0L, active2, 0L, active3, 0x2L);
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(9, 31, 131);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x400000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L, active1, 0L, active2, 0x400L, active3, 0L);
      case 115:
         if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 171, 131);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 183, 131);
         return jjMoveStringLiteralDfa10_0(active0, 0x20400400L, active1, 0L, active2, 0L, active3, 0L);
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 26, 131);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(9, 35, 131);
         else if ((active1 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x1000004L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x100000L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L, active1, 0L, active2, 0x8000000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, active2, active3, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0x40004L, active3, 0L);
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(10, 24, 131);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 179, 131);
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000L, active2, 0x100000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0x800000000000000L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0x2000000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0x800000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000L, active2, 0x400000L, active3, 0x2L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x2010400400L, active2, 0L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000L, active2, 0x1000400L, active3, 0L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0x108L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(9, old0, 0L, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, active2, active3, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x400L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x2010400400L, active2, 0L, active3, 0L);
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x400000L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x2000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x1040108L, active3, 0L);
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000L, active2, 0L, active3, 0L);
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(11, 16, 131);
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(11, 193, 131);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x100000L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x800004L, active3, 0L);
      case 112:
         if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 187, 131);
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, active2, active3, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(10, old0, 0L, old2, old3, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, active2, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x28000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0x1000108L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x400400L, active2, 0x100000L);
      case 100:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0x800000L);
      case 101:
         if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(12, 150, 131);
         break;
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0x2040000L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x2010000000L, active2, 0x4L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, active2, 0L, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, old0, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, active2, 0L, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0x4L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x2010000000L, active2, 0L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(13, 10, 131);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(13, 148, 131);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(13, 151, 131);
         return jjMoveStringLiteralDfa14_0(active0, 0x400000L, active2, 0x400L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0x108L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0x40000L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(13, 27, 131);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(13, 153, 131);
         break;
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, active2, 0L, 0L);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(12, old0, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, active2, 0L, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0x108L);
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0x400L);
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(14, 22, 131);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0x4L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x2010000000L, active2, 0x1040000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, active2, 0L, 0L);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(13, old0, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L, active2, 0L, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 101:
         if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(15, 152, 131);
         return jjMoveStringLiteralDfa16_0(active0, 0L, active2, 0x4L);
      case 102:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(15, 138, 131);
         break;
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active2, 0x108L);
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x2010000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active2, 0x40000L);
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L, active2, 0L, 0L);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(14, old0, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L, active2, 0L, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 103:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(16, 131, 131);
         else if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(16, 136, 131);
         break;
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active2, 0x4L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x20000000L, active2, 0L);
      case 114:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(16, 28, 131);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 37, 131);
         break;
      case 117:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active2, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L, active2, 0L, 0L);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(15, old0, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L, active2, 0L, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active2, 0x40000L);
      case 102:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(17, 130, 131);
         break;
      case 114:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(17, 29, 131);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L, active2, 0L, 0L);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0, long old2, long active2)
{
   if (((active0 &= old0) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(16, old0, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, 0L, active2, 0L, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa19_0(active2, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, 0L, active2, 0L, 0L);
}
private final int jjMoveStringLiteralDfa19_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(17, 0L, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, 0L, active2, 0L, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa20_0(active2, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, 0L, active2, 0L, 0L);
}
private final int jjMoveStringLiteralDfa20_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(18, 0L, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, 0L, active2, 0L, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa21_0(active2, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, 0L, active2, 0L, 0L);
}
private final int jjMoveStringLiteralDfa21_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(19, 0L, 0L, old2, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, 0L, active2, 0L, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 110:
         if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(21, 146, 131);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, 0L, active2, 0L, 0L);
}
static final long[] jjbitVec43 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 131;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 131:
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 267)
                        kind = 267;
                     jjCheckNAdd(130);
                  }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 129;
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(127, 128);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 126;
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(124, 125);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 253)
                        kind = 253;
                     jjCheckNAddStates(19, 28);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 286)
                        kind = 286;
                     jjCheckNAdd(52);
                  }
                  else if (curChar == 46)
                     jjCheckNAddStates(29, 31);
                  else if (curChar == 39)
                     jjCheckNAddStates(32, 36);
                  else if (curChar == 34)
                     jjCheckNAddStates(37, 41);
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 132:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 254)
                        kind = 254;
                     jjCheckNAdd(59);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 44);
                  break;
               case 1:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 3:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
               case 13:
                  if (curChar == 34)
                     jjCheckNAddStates(37, 41);
                  break;
               case 5:
                  if (curChar == 38)
                     jjAddStates(45, 48);
                  break;
               case 7:
                  if (curChar == 59)
                     jjCheckNAddStates(37, 41);
                  break;
               case 8:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(9, 7);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(11, 7);
                  break;
               case 12:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 14:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0xffffffbbffffffffL & l) != 0L)
                     jjCheckNAddStates(37, 41);
                  break;
               case 16:
                  if (curChar == 34 && kind > 256)
                     kind = 256;
                  break;
               case 28:
               case 37:
                  if (curChar == 39)
                     jjCheckNAddStates(32, 36);
                  break;
               case 29:
                  if (curChar == 38)
                     jjAddStates(49, 52);
                  break;
               case 31:
                  if (curChar == 59)
                     jjCheckNAddStates(32, 36);
                  break;
               case 32:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 31);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(35, 31);
                  break;
               case 36:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 38:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0xffffff3fffffffffL & l) != 0L)
                     jjCheckNAddStates(32, 36);
                  break;
               case 40:
                  if (curChar == 39 && kind > 256)
                     kind = 256;
                  break;
               case 52:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 286)
                     kind = 286;
                  jjCheckNAdd(52);
                  break;
               case 53:
                  if (curChar == 46)
                     jjCheckNAddStates(29, 31);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 44);
                  break;
               case 56:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 254)
                     kind = 254;
                  jjCheckNAdd(59);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 62:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(63);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 255)
                     kind = 255;
                  jjCheckNAdd(63);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 253)
                     kind = 253;
                  jjCheckNAddStates(19, 28);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(53, 56);
                  break;
               case 66:
                  if (curChar == 46)
                     jjCheckNAddStates(57, 59);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(57, 59);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 253)
                     kind = 253;
                  jjCheckNAdd(68);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(69, 70);
                  break;
               case 70:
                  if (curChar != 46)
                     break;
                  if (kind > 254)
                     kind = 254;
                  jjCheckNAdd(71);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 254)
                     kind = 254;
                  jjCheckNAdd(71);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(60, 62);
                  break;
               case 73:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(74, 61);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(74, 61);
                  break;
               case 77:
                  if (curChar == 38)
                     jjAddStates(63, 66);
                  break;
               case 79:
                  if (curChar == 59)
                     jjCheckNAddStates(67, 70);
                  break;
               case 80:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(81, 79);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(83, 79);
                  break;
               case 84:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 85:
                  if ((0xffffffbfffffffffL & l) != 0L)
                     jjCheckNAddStates(67, 70);
                  break;
               case 87:
                  if (curChar == 42 && kind > 229)
                     kind = 229;
                  break;
               case 100:
                  if (curChar == 38)
                     jjAddStates(71, 74);
                  break;
               case 102:
                  if (curChar == 59)
                     jjCheckNAddStates(75, 78);
                  break;
               case 103:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(104, 105);
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(104, 102);
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(106, 102);
                  break;
               case 107:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 108:
                  if ((0xffffffbfffffffffL & l) != 0L)
                     jjCheckNAddStates(75, 78);
                  break;
               case 111:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 257)
                     kind = 257;
                  jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 124:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(124, 125);
                  break;
               case 125:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 126:
                  if (curChar == 42 && kind > 230)
                     kind = 230;
                  break;
               case 127:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(127, 128);
                  break;
               case 128:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 130:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 267)
                     kind = 267;
                  jjCheckNAdd(130);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 131:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 267)
                        kind = 267;
                     jjCheckNAdd(130);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(127, 128);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(124, 125);
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 267)
                        kind = 267;
                     jjCheckNAddStates(79, 83);
                  }
                  if (curChar == 81)
                     jjAddStates(84, 85);
                  break;
               case 2:
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(3);
                  break;
               case 6:
                  if (curChar == 116)
                     jjCheckNAdd(7);
                  break;
               case 10:
                  if (curChar == 120)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(11, 7);
                  break;
               case 15:
                  jjAddStates(37, 41);
                  break;
               case 17:
                  if (curChar == 108)
                     jjCheckNAdd(6);
                  break;
               case 18:
                  if (curChar == 103)
                     jjCheckNAdd(6);
                  break;
               case 19:
                  if (curChar == 111)
                     jjCheckNAdd(6);
                  break;
               case 20:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 97)
                     jjAddStates(86, 87);
                  break;
               case 23:
                  if (curChar == 112)
                     jjCheckNAdd(7);
                  break;
               case 24:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 115)
                     jjCheckNAdd(7);
                  break;
               case 26:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 30:
                  if (curChar == 116)
                     jjCheckNAdd(31);
                  break;
               case 34:
                  if (curChar == 120)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(35, 31);
                  break;
               case 39:
                  jjAddStates(32, 36);
                  break;
               case 41:
                  if (curChar == 108)
                     jjCheckNAdd(30);
                  break;
               case 42:
                  if (curChar == 103)
                     jjCheckNAdd(30);
                  break;
               case 43:
                  if (curChar == 111)
                     jjCheckNAdd(30);
                  break;
               case 44:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 97)
                     jjAddStates(88, 89);
                  break;
               case 47:
                  if (curChar == 112)
                     jjCheckNAdd(31);
                  break;
               case 48:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 115)
                     jjCheckNAdd(31);
                  break;
               case 50:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 55:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(90, 91);
                  break;
               case 58:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 214)
                     kind = 214;
                  break;
               case 61:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(92, 93);
                  break;
               case 75:
                  if (curChar == 81)
                     jjAddStates(84, 85);
                  break;
               case 76:
                  if (curChar == 123)
                     jjCheckNAddStates(67, 70);
                  break;
               case 78:
                  if (curChar == 116)
                     jjCheckNAdd(79);
                  break;
               case 82:
                  if (curChar == 120)
                     jjCheckNAdd(83);
                  break;
               case 83:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(83, 79);
                  break;
               case 85:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(67, 70);
                  break;
               case 86:
                  if (curChar == 125)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 88:
                  if (curChar == 108)
                     jjCheckNAdd(78);
                  break;
               case 89:
                  if (curChar == 103)
                     jjCheckNAdd(78);
                  break;
               case 90:
                  if (curChar == 111)
                     jjCheckNAdd(78);
                  break;
               case 91:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 97)
                     jjAddStates(94, 95);
                  break;
               case 94:
                  if (curChar == 112)
                     jjCheckNAdd(79);
                  break;
               case 95:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 115)
                     jjCheckNAdd(79);
                  break;
               case 97:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 123)
                     jjCheckNAddStates(75, 78);
                  break;
               case 101:
                  if (curChar == 116)
                     jjCheckNAdd(102);
                  break;
               case 105:
                  if (curChar == 120)
                     jjCheckNAdd(106);
                  break;
               case 106:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(106, 102);
                  break;
               case 108:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(75, 78);
                  break;
               case 109:
                  if (curChar == 125)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 110:
               case 111:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 257)
                     kind = 257;
                  jjCheckNAdd(111);
                  break;
               case 112:
                  if (curChar == 108)
                     jjCheckNAdd(101);
                  break;
               case 113:
                  if (curChar == 103)
                     jjCheckNAdd(101);
                  break;
               case 114:
                  if (curChar == 111)
                     jjCheckNAdd(101);
                  break;
               case 115:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 97)
                     jjAddStates(96, 97);
                  break;
               case 118:
                  if (curChar == 112)
                     jjCheckNAdd(102);
                  break;
               case 119:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 115)
                     jjCheckNAdd(102);
                  break;
               case 121:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 267)
                     kind = 267;
                  jjCheckNAddStates(79, 83);
                  break;
               case 124:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(124, 125);
                  break;
               case 127:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(127, 128);
                  break;
               case 129:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 267)
                     kind = 267;
                  jjCheckNAdd(130);
                  break;
               case 130:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 267)
                     kind = 267;
                  jjCheckNAdd(130);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 131:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(124, 125);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(127, 128);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 267)
                        kind = 267;
                     jjCheckNAdd(130);
                  }
                  break;
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 267)
                     kind = 267;
                  jjCheckNAddStates(79, 83);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(3);
                  break;
               case 3:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 231)
                     kind = 231;
                  jjCheckNAdd(3);
                  break;
               case 15:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(37, 41);
                  break;
               case 39:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(32, 36);
                  break;
               case 85:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(67, 70);
                  break;
               case 108:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(75, 78);
                  break;
               case 110:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 257)
                     kind = 257;
                  jjCheckNAdd(111);
                  break;
               case 111:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 257)
                     kind = 257;
                  jjCheckNAdd(111);
                  break;
               case 124:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(124, 125);
                  break;
               case 127:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(127, 128);
                  break;
               case 129:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 267)
                     kind = 267;
                  jjCheckNAdd(130);
                  break;
               case 130:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 267)
                     kind = 267;
                  jjCheckNAdd(130);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 131 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_7(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      case 0:
         if ((active3 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 270;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_7(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0, active1, active2, active3), pos + 1);
}
private final int jjStartNfaWithStates_7(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_7(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_7(0x1000000000L);
      default :
         return jjMoveNfa_7(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_7(long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(0, 0L, 0L, 0L, active3);
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active3 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 228);
         break;
      default :
         break;
   }
   return jjStartNfa_7(0, 0L, 0L, 0L, active3);
}
private final int jjMoveNfa_7(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffff00002600L & l) != 0L)
                     kind = 270;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 270;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 270)
                     kind = 270;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      case 0:
         if ((active3 & 0x100000L) != 0L)
            return 3;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1, active2, active3), pos + 1);
}
private final int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 38:
         return jjStartNfaWithStates_4(0, 212, 3);
      case 60:
         jjmatchedKind = 224;
         return jjMoveStringLiteralDfa1_4(0xa20080000000000L);
      case 123:
         jjmatchedKind = 220;
         return jjMoveStringLiteralDfa1_4(0x8000000000000L);
      case 125:
         jjmatchedKind = 210;
         return jjMoveStringLiteralDfa1_4(0x10000000000000L);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_4(long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, 0L, 0L, 0L, active3);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_4(active3, 0x820000000000000L);
      case 47:
         if ((active3 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 235);
         break;
      case 63:
         if ((active3 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 249);
         break;
      case 123:
         if ((active3 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 243);
         break;
      case 125:
         if ((active3 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 244);
         break;
      default :
         break;
   }
   return jjStartNfa_4(0, 0L, 0L, 0L, active3);
}
private final int jjMoveStringLiteralDfa2_4(long old3, long active3)
{
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_4(0, 0L, 0L, 0L, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(1, 0L, 0L, 0L, active3);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_4(active3, 0x20000000000000L);
      case 91:
         return jjMoveStringLiteralDfa3_4(active3, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(1, 0L, 0L, 0L, active3);
}
private final int jjMoveStringLiteralDfa3_4(long old3, long active3)
{
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_4(1, 0L, 0L, 0L, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(2, 0L, 0L, 0L, active3);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         if ((active3 & 0x20000000000000L) != 0L)
            return jjStopAtPos(3, 245);
         break;
      case 67:
         return jjMoveStringLiteralDfa4_4(active3, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(2, 0L, 0L, 0L, active3);
}
private final int jjMoveStringLiteralDfa4_4(long old3, long active3)
{
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_4(2, 0L, 0L, 0L, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(3, 0L, 0L, 0L, active3);
      return 4;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa5_4(active3, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(3, 0L, 0L, 0L, active3);
}
private final int jjMoveStringLiteralDfa5_4(long old3, long active3)
{
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_4(3, 0L, 0L, 0L, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(4, 0L, 0L, 0L, active3);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_4(active3, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(4, 0L, 0L, 0L, active3);
}
private final int jjMoveStringLiteralDfa6_4(long old3, long active3)
{
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_4(4, 0L, 0L, 0L, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(5, 0L, 0L, 0L, active3);
      return 6;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa7_4(active3, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(5, 0L, 0L, 0L, active3);
}
private final int jjMoveStringLiteralDfa7_4(long old3, long active3)
{
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_4(5, 0L, 0L, 0L, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(6, 0L, 0L, 0L, active3);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_4(active3, 0x800000000000000L);
      default :
         break;
   }
   return jjStartNfa_4(6, 0L, 0L, 0L, active3);
}
private final int jjMoveStringLiteralDfa8_4(long old3, long active3)
{
   if (((active3 &= old3)) == 0L)
      return jjStartNfa_4(6, 0L, 0L, 0L, old3); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(7, 0L, 0L, 0L, active3);
      return 8;
   }
   switch(curChar)
   {
      case 91:
         if ((active3 & 0x800000000000000L) != 0L)
            return jjStopAtPos(8, 251);
         break;
      default :
         break;
   }
   return jjStartNfa_4(7, 0L, 0L, 0L, active3);
}
private final int jjMoveNfa_4(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 21;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(16, 18);
                  break;
               case 0:
                  if ((0xffffffff00002600L & l) != 0L)
                  {
                     if (kind > 262)
                        kind = 262;
                  }
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 15;
                  if (curChar == 38)
                     jjAddStates(13, 16);
                  break;
               case 2:
                  if (curChar == 59 && kind > 259)
                     kind = 259;
                  break;
               case 14:
                  if ((0xffffffff00002600L & l) != 0L && kind > 262)
                     kind = 262;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 59 && kind > 266)
                     kind = 266;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(19, 17);
                  break;
               case 20:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 97)
                     jjAddStates(17, 18);
                  else if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 103)
                     jjCheckNAdd(1);
                  else if (curChar == 108)
                     jjCheckNAdd(1);
                  break;
               case 0:
                  if (kind > 262)
                     kind = 262;
                  break;
               case 1:
                  if (curChar == 116)
                     jjCheckNAdd(2);
                  break;
               case 4:
                  if (curChar == 103)
                     jjCheckNAdd(1);
                  break;
               case 5:
                  if (curChar == 111)
                     jjCheckNAdd(1);
                  break;
               case 6:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 97)
                     jjAddStates(17, 18);
                  break;
               case 9:
                  if (curChar == 112)
                     jjCheckNAdd(2);
                  break;
               case 10:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 115)
                     jjCheckNAdd(2);
                  break;
               case 12:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 18:
                  if (curChar == 120)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(19, 17);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 262)
                     kind = 262;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 21 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0, active1, active2, active3), pos + 1);
}
private final int jjStartNfaWithStates_6(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_6(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_6(0x1000000000L);
      default :
         return jjMoveNfa_6(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_6(long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(0, 0L, 0L, 0L, active3);
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active3 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 228);
         break;
      default :
         break;
   }
   return jjStartNfa_6(0, 0L, 0L, 0L, active3);
}
private final int jjMoveNfa_6(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 269;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_12()
{
   return jjMoveNfa_12(0, 0);
}
private final int jjMoveNfa_12(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 31;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 25:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 269)
                     kind = 269;
                  jjCheckNAdd(25);
                  break;
               case 2:
                  if (curChar == 38)
                     jjAddStates(98, 101);
                  break;
               case 4:
                  if (curChar == 59)
                     jjCheckNAddStates(102, 105);
                  break;
               case 5:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 4);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(8, 4);
                  break;
               case 9:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 10:
                  if ((0xffffffbfffffffffL & l) != 0L)
                     jjCheckNAddStates(102, 105);
                  break;
               case 13:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 257)
                     kind = 257;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 27:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(106, 107);
                  break;
               case 28:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 30:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 267)
                     kind = 267;
                  jjstateSet[jjnewStateCnt++] = 30;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 267)
                        kind = 267;
                     jjCheckNAddStates(108, 110);
                  }
                  if (curChar == 81)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 123)
                     jjCheckNAddStates(102, 105);
                  break;
               case 3:
                  if (curChar == 116)
                     jjCheckNAdd(4);
                  break;
               case 7:
                  if (curChar == 120)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(8, 4);
                  break;
               case 10:
                  if ((0xd7ffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(102, 105);
                  break;
               case 11:
                  if (curChar == 125)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
               case 13:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 257)
                     kind = 257;
                  jjCheckNAdd(13);
                  break;
               case 14:
                  if (curChar == 108)
                     jjCheckNAdd(3);
                  break;
               case 15:
                  if (curChar == 103)
                     jjCheckNAdd(3);
                  break;
               case 16:
                  if (curChar == 111)
                     jjCheckNAdd(3);
                  break;
               case 17:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 97)
                     jjAddStates(111, 112);
                  break;
               case 20:
                  if (curChar == 112)
                     jjCheckNAdd(4);
                  break;
               case 21:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 115)
                     jjCheckNAdd(4);
                  break;
               case 23:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 267)
                     kind = 267;
                  jjCheckNAddStates(108, 110);
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 29:
               case 30:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 267)
                     kind = 267;
                  jjCheckNAdd(30);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 267)
                     kind = 267;
                  jjCheckNAddStates(108, 110);
                  break;
               case 10:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjAddStates(102, 105);
                  break;
               case 12:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 257)
                     kind = 257;
                  jjCheckNAdd(13);
                  break;
               case 13:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 257)
                     kind = 257;
                  jjCheckNAdd(13);
                  break;
               case 27:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 29:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 267)
                     kind = 267;
                  jjCheckNAdd(30);
                  break;
               case 30:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 267)
                     kind = 267;
                  jjCheckNAdd(30);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 31 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_10(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      case 0:
         if ((active3 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 270;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_10(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_10(jjStopStringLiteralDfa_10(pos, active0, active1, active2, active3), pos + 1);
}
private final int jjStartNfaWithStates_10(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_10(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_10()
{
   switch(curChar)
   {
      case 63:
         return jjMoveStringLiteralDfa1_10(0x400000000000000L);
      default :
         return jjMoveNfa_10(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_10(long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(0, 0L, 0L, 0L, active3);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active3 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 250);
         break;
      default :
         break;
   }
   return jjStartNfa_10(0, 0L, 0L, 0L, active3);
}
private final int jjMoveNfa_10(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffff00002600L & l) != 0L)
                     kind = 270;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 270;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 270)
                     kind = 270;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1, long active2, long active3, long active4)
{
   switch (pos)
   {
      case 0:
         if ((active3 & 0x100000L) != 0L)
            return 3;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1, long active2, long active3, long active4)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1, active2, active3, active4), pos + 1);
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 34:
         jjmatchedKind = 240;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x10L);
      case 38:
         return jjStartNfaWithStates_2(0, 212, 3);
      case 60:
         return jjStopAtPos(0, 211);
      case 123:
         jjmatchedKind = 220;
         return jjMoveStringLiteralDfa1_2(0x8000000000000L, 0x0L);
      case 125:
         jjmatchedKind = 210;
         return jjMoveStringLiteralDfa1_2(0x10000000000000L, 0x0L);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_2(long active3, long active4)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, 0L, 0L, 0L, active3, active4);
      return 1;
   }
   switch(curChar)
   {
      case 34:
         if ((active4 & 0x10L) != 0L)
            return jjStopAtPos(1, 260);
         break;
      case 123:
         if ((active3 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 243);
         break;
      case 125:
         if ((active3 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 244);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, 0L, 0L, 0L, active3, active4);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 21;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(16, 18);
                  break;
               case 0:
                  if ((0xffffffff00002600L & l) != 0L)
                  {
                     if (kind > 263)
                        kind = 263;
                  }
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 15;
                  if (curChar == 38)
                     jjAddStates(13, 16);
                  break;
               case 2:
                  if (curChar == 59 && kind > 259)
                     kind = 259;
                  break;
               case 14:
                  if ((0xffffffff00002600L & l) != 0L && kind > 263)
                     kind = 263;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 59 && kind > 266)
                     kind = 266;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(19, 17);
                  break;
               case 20:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 97)
                     jjAddStates(17, 18);
                  else if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 103)
                     jjCheckNAdd(1);
                  else if (curChar == 108)
                     jjCheckNAdd(1);
                  break;
               case 0:
                  if (kind > 263)
                     kind = 263;
                  break;
               case 1:
                  if (curChar == 116)
                     jjCheckNAdd(2);
                  break;
               case 4:
                  if (curChar == 103)
                     jjCheckNAdd(1);
                  break;
               case 5:
                  if (curChar == 111)
                     jjCheckNAdd(1);
                  break;
               case 6:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 113)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 97)
                     jjAddStates(17, 18);
                  break;
               case 9:
                  if (curChar == 112)
                     jjCheckNAdd(2);
                  break;
               case 10:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 115)
                     jjCheckNAdd(2);
                  break;
               case 12:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 18:
                  if (curChar == 120)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(19, 17);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 263)
                     kind = 263;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 21 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_8(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_8(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0, active1, active2, active3), pos + 1);
}
private final int jjStartNfaWithStates_8(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_8(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_8()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 239);
      case 39:
         return jjStopAtPos(0, 241);
      case 47:
         return jjMoveStringLiteralDfa1_8(0x40000000000L);
      case 61:
         return jjStopAtPos(0, 238);
      case 62:
         return jjStopAtPos(0, 233);
      default :
         return jjMoveNfa_8(1, 0);
   }
}
private final int jjMoveStringLiteralDfa1_8(long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(0, 0L, 0L, 0L, active3);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active3 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 234);
         break;
      default :
         break;
   }
   return jjStartNfa_8(0, 0L, 0L, 0L, active3);
}
private final int jjMoveNfa_8(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 269;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(8, 9);
                  break;
               case 3:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAddStates(10, 12);
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
               case 5:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAddStates(10, 12);
                  break;
               case 2:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(5);
                  break;
               case 5:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 232)
                     kind = 232;
                  jjCheckNAdd(5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_11()
{
   return jjMoveNfa_11(0, 0);
}
private final int jjMoveNfa_11(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffff00002600L & l) != 0L && kind > 270)
                     kind = 270;
                  break;
               case 2:
                  if (curChar == 62 && kind > 252)
                     kind = 252;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 270)
                     kind = 270;
                  if (curChar == 93)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 93)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 3:
                  if (kind > 270)
                     kind = 270;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 270)
                     kind = 270;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   11, 12, 13, 14, 5, 7, 8, 9, 2, 3, 2, 3, 5, 3, 4, 7, 
   8, 10, 13, 65, 66, 55, 58, 68, 69, 70, 72, 73, 61, 54, 59, 60, 
   29, 36, 38, 39, 40, 5, 12, 14, 15, 16, 54, 55, 58, 17, 18, 21, 
   22, 41, 42, 45, 46, 65, 66, 55, 58, 67, 55, 58, 72, 73, 61, 88, 
   89, 92, 93, 77, 84, 85, 86, 112, 113, 116, 117, 100, 107, 108, 109, 124, 
   125, 127, 128, 130, 76, 99, 24, 27, 48, 51, 56, 57, 62, 63, 95, 98, 
   119, 122, 14, 15, 18, 19, 2, 9, 10, 11, 27, 28, 27, 28, 30, 21, 
   24, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec24[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec24[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec42[i2] & l2) != 0L);
      default : 
         if ((jjbitVec40[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec41[i2] & l2) != 0L);
      default : 
         if ((jjbitVec43[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", "\45\45\45", "\170\161\165\145\162\171", 
"\145\156\143\157\144\151\156\147", "\166\145\162\163\151\157\156", "\155\157\144\165\154\145", 
"\156\141\155\145\163\160\141\143\145", "\75", "\73", "\144\145\143\154\141\162\145", 
"\142\157\165\156\144\141\162\171\55\163\160\141\143\145", "\160\162\145\163\145\162\166\145", "\163\164\162\151\160", 
"\144\145\146\141\165\154\164", "\143\157\154\154\141\164\151\157\156", "\142\141\163\145\55\165\162\151", 
"\143\157\156\163\164\162\165\143\164\151\157\156", "\157\162\144\145\162\151\156\147", "\157\162\144\145\162\145\144", 
"\165\156\157\162\144\145\162\145\144", "\157\162\144\145\162", "\145\155\160\164\171", 
"\143\157\160\171\55\156\141\155\145\163\160\141\143\145\163", "\54", "\156\157\55\160\162\145\163\145\162\166\145", 
"\151\156\150\145\162\151\164", "\156\157\55\151\156\150\145\162\151\164", 
"\144\145\143\151\155\141\154\55\146\157\162\155\141\164", "\144\145\143\151\155\141\154\55\163\145\160\141\162\141\164\157\162", 
"\147\162\157\165\160\151\156\147\55\163\145\160\141\162\141\164\157\162", "\151\156\146\151\156\151\164\171", "\155\151\156\165\163\55\163\151\147\156", 
"\116\141\116", "\160\145\162\143\145\156\164", "\160\145\162\55\155\151\154\154\145", 
"\172\145\162\157\55\144\151\147\151\164", "\144\151\147\151\164", 
"\160\141\164\164\145\162\156\55\163\145\160\141\162\141\164\157\162", "\151\155\160\157\162\164", "\163\143\150\145\155\141", "\141\164", 
"\145\154\145\155\145\156\164", "\146\165\156\143\164\151\157\156", "\146\164\55\157\160\164\151\157\156", 
"\165\160\144\141\164\151\156\147", "\45", "\50", "\51", "\166\141\162\151\141\142\154\145", "\44", "\72\75", 
"\143\157\156\164\145\170\164", "\151\164\145\155", "\141\163", "\157\160\164\151\157\156", "\146\157\162", 
"\151\156", "\141\154\154\157\167\151\156\147", "\163\143\157\162\145", "\154\145\164", 
"\164\165\155\142\154\151\156\147", "\167\151\156\144\157\167", "\163\154\151\144\151\156\147", 
"\163\164\141\162\164", "\167\150\145\156", "\157\156\154\171", "\145\156\144", 
"\160\162\145\166\151\157\165\163", "\156\145\170\164", "\143\157\165\156\164", "\167\150\145\162\145", 
"\147\162\157\165\160", "\142\171", "\163\164\141\142\154\145", "\162\145\164\165\162\156", 
"\163\157\155\145", "\145\166\145\162\171", "\163\141\164\151\163\146\151\145\163", 
"\163\167\151\164\143\150", "\143\141\163\145", "\164\171\160\145\163\167\151\164\143\150", "\174", 
"\151\146", "\164\150\145\156", "\145\154\163\145", "\164\162\171", 
"\143\141\164\143\150", "\157\162", "\141\156\144", "\143\157\156\164\141\151\156\163", 
"\164\145\170\164", "\174\174", "\164\157", "\52", "\144\151\166", "\151\144\151\166", 
"\155\157\144", "\165\156\151\157\156", "\151\156\164\145\162\163\145\143\164", 
"\145\170\143\145\160\164", "\151\156\163\164\141\156\143\145", "\157\146", "\164\162\145\141\164", 
"\143\141\163\164\141\142\154\145", "\143\141\163\164", "\164\162\141\156\163\146\157\162\155", 
"\167\151\164\150", "\41\75", "\74\75", "\76", "\76\75", "\145\161", "\156\145", "\154\164", 
"\154\145", "\147\164", "\147\145", "\151\163", "\74\74", "\76\76", 
"\166\141\154\151\144\141\164\145", "\164\171\160\145", "\154\141\170", "\163\164\162\151\143\164", "\41", 
"\143\150\151\154\144", "\72\72", "\144\145\163\143\145\156\144\141\156\164", 
"\141\164\164\162\151\142\165\164\145", "\163\145\154\146", 
"\144\145\163\143\145\156\144\141\156\164\55\157\162\55\163\145\154\146", "\146\157\154\154\157\167\151\156\147\55\163\151\142\154\151\156\147", 
"\146\157\154\154\157\167\151\156\147", "\100", "\160\141\162\145\156\164", "\141\156\143\145\163\164\157\162", 
"\160\162\145\143\145\144\151\156\147\55\163\151\142\154\151\156\147", "\160\162\145\143\145\144\151\156\147", 
"\141\156\143\145\163\164\157\162\55\157\162\55\163\145\154\146", "\56\56", "\133", "\135", "\56", "\77", "\144\157\143\165\155\145\156\164", 
"\143\157\155\155\145\156\164", 
"\160\162\157\143\145\163\163\151\156\147\55\151\156\163\164\162\165\143\164\151\157\156", "\43", "\145\155\160\164\171\55\163\145\161\165\145\156\143\145", 
"\156\157\144\145", "\144\157\143\165\155\145\156\164\55\156\157\144\145", 
"\156\141\155\145\163\160\141\143\145\55\156\157\144\145", "\163\143\150\145\155\141\55\141\164\164\162\151\142\165\164\145", 
"\163\143\150\145\155\141\55\145\154\145\155\145\156\164", "\167\145\151\147\150\164", "\146\164\157\162", "\146\164\141\156\144", 
"\156\157\164", "\146\164\156\157\164", "\141\156\171", "\167\157\162\144", "\141\154\154", 
"\167\157\162\144\163", "\160\150\162\141\163\145", "\157\143\143\165\162\163", 
"\164\151\155\145\163", "\145\170\141\143\164\154\171", "\155\157\163\164", "\146\162\157\155", 
"\144\151\163\164\141\156\143\145", "\163\145\156\164\145\156\143\145\163", 
"\160\141\162\141\147\162\141\160\150\163", "\163\141\155\145", "\144\151\146\146\145\162\145\156\164", 
"\163\145\156\164\145\156\143\145", "\160\141\162\141\147\162\141\160\150", "\145\156\164\151\162\145", 
"\143\157\156\164\145\156\164", "\165\163\151\156\147", "\151\156\163\145\156\163\151\164\151\166\145", 
"\163\145\156\163\151\164\151\166\145", "\154\157\167\145\162\143\141\163\145", 
"\165\160\160\145\162\143\141\163\145", "\144\151\141\143\162\151\164\151\143\163", 
"\163\164\145\155\155\151\156\147", "\156\157", "\164\150\145\163\141\165\162\165\163", 
"\162\145\154\141\164\151\157\156\163\150\151\160", "\154\145\166\145\154\163", "\163\164\157\160", 
"\154\141\156\147\165\141\147\145", "\167\151\154\144\143\141\162\144\163", "\167\151\164\150\157\165\164", 
"\162\145\166\141\154\151\144\141\164\151\157\156", "\163\153\151\160", "\146\151\162\163\164", "\154\141\163\164", 
"\151\156\164\157", "\141\146\164\145\162", "\142\145\146\157\162\145", 
"\151\156\163\145\162\164", "\156\157\144\145\163", "\144\145\154\145\164\145", 
"\162\145\160\154\141\143\145", "\166\141\154\165\145", "\162\145\156\141\155\145", 
"\151\156\166\157\153\145", "\143\157\160\171", "\155\157\144\151\146\171", null, "\175", "\74", "\46", 
null, null, "\57", "\57\57", "\147\162\145\141\164\145\163\164", 
"\154\145\141\163\164", "\145\170\164\145\162\156\141\154", "\173", "\175", 
"\141\163\143\145\156\144\151\156\147", "\144\145\163\143\145\156\144\151\156\147", "\74", "\53", "\55", "\50\43", 
"\43\51", null, null, null, null, "\76", "\57\76", "\74\57", null, "\76", "\75", "\42", 
"\42", "\47", "\47", "\173\173", "\175\175", "\74\41\55\55", "\55\55\76", null, null, 
"\74\77", "\77\76", "\74\41\133\103\104\101\124\101\133", null, null, null, null, null, 
null, null, null, "\42\42", "\47\47", null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "XML_COMMENT", 
   "QUOT_ATTRIBUTE_CONTENT", 
   "APOS_ATTRIBUTE_CONTENT", 
   "ELEMENT_CONTENT", 
   "PROCESSING_INSTRUCTION", 
   "PRAGMA_2", 
   "PRAGMA_3", 
   "START_TAG", 
   "END_TAG", 
   "PROCESSING_INSTRUCTION_CONTENT", 
   "CDATA_SECTION", 
   "PRAGMA_1", 
   "EXPR_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, 8, 
   -1, -1, 12, 0, -1, -1, -1, -1, 4, -1, 9, -1, -1, -1, 2, 8, 3, 8, -1, -1, 1, -1, -1, -1, 5, 
   -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0x6ffbL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x0L, 0x0L, 0x0L, 
   0x78000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[131];
private final int[] jjstateSet = new int[262];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public XParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public XParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 131; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 14 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
     case 6:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_6();
       break;
     case 7:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_7();
       break;
     case 8:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_8();
       break;
     case 9:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_9();
       break;
     case 10:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_10();
       break;
     case 11:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_11();
       break;
     case 12:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_12();
       break;
     case 13:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_13();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 283 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           pushState();
         break;
      case 284 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         popState();
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 210 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[210]);
                         pushState();
         break;
      case 211 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[211]);
                                   pushState();
         break;
      case 220 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[220]);
                    pushState();
         break;
      case 221 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[221]);
                    popState();
         break;
      case 224 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[224]);
                              pushState();
         break;
      case 234 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[234]);
                            popState();
         break;
      case 237 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[237]);
                         popState();
         break;
      case 245 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[245]);
                                pushState();
         break;
      case 246 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[246]);
                             popState();
         break;
      case 249 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[249]);
                                         pushState();
         break;
      case 250 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[250]);
                                       popState();
         break;
      case 251 :
        if (image == null)
            image = new StringBuffer();
            image.append(jjstrLiteralImages[251]);
                                       pushState();
         break;
      case 252 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                       popState();
         break;
      case 257 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    if ( curLexState == DEFAULT ) { } else
    if ( curLexState == PRAGMA_1 ) { SwitchTo(PRAGMA_2); } else
    { assert false; }
         break;
      case 267 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    if ( curLexState == DEFAULT ) { } else
    if ( curLexState == PRAGMA_1 ) { SwitchTo(PRAGMA_2); } else
    { assert false; }
         break;
      case 269 :
        if (image == null)
            image = new StringBuffer();
            image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    if ( curLexState == START_TAG ) { } else
    if ( curLexState == END_TAG ) { } else
    if ( curLexState == PROCESSING_INSTRUCTION ) { SwitchTo(PROCESSING_INSTRUCTION_CONTENT); } else
    if ( curLexState == PRAGMA_1 ) { } else
    if ( curLexState == PRAGMA_2 ) { SwitchTo(PRAGMA_3); } else
    { assert false; }
         break;
      default : 
         break;
   }
}
}
