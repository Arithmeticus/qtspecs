<?xml version="1.0" encoding="UTF-8"?><tests>
<test value="&quot;&amp;amp;&quot;"/>
<test value="pi"/>
<test value="math:pi"/>
<test value="Q{http://www.w3.org/2005/xpath-functions/math}pi"/>
<test value="E1/E2"/>
<test value="E1[E2]"/>
<test value="E2"/>
<test value="E1"/>
<test value="E2"/>
<test value="E2"/>
<test value="E1"/>
<test value="E2"/>
<test value="."/>
<test value="E1/E2"/>
<test value="E1[E2]"/>
<test value="E1"/>
<test value="E2"/>
<test value="fn:position()"/>
<test value="E1/E2"/>
<test value="E1[E2]"/>
<test value="E2"/>
<test value="E1"/>
<test value="fn:last()"/>
<test value="E1/E2"/>
<test value="E1[E2]"/>
<test value="E2"/>
<test value="E1"/>
<test value="fn:doc(fn:document-uri($N)) is $N"/>
<test value="fn:document-uri($N)"/>
<test value="fn:doc(fn:document-uri($N)) is $N"/>
<test value="&#10;error()&#10;"/>
<test value="&#10;if (empty($arg))&#10;then&#10;  &quot;cat&quot; * 2&#10;else&#10;  0&#10;"/>
<test value="($x div $y) + xs:decimal($z)"/>
<test value="($x div $y)"/>
<test value="xs:decimal($z)"/>
<test value="fn:error(xs:QName(&quot;app:err057&quot;), &quot;Unexpected value&quot;, fn:string($v))"/>
<test value="$s[1]"/>
<test value="position()=1"/>
<test value="//book[author eq 'Berners-Lee']"/>
<test value="$e eq 0"/>
<test value="S1 = S2"/>
<test value="some $x in $expr1 satisfies $x = 47"/>
<test value="//product[id = 47]"/>
<test value="if (doc-available('abc.xml')) then doc('abc.xml') else ()"/>
<test value="string-length(//title)"/>
<test value="//part[color eq &quot;Red&quot;]"/>
<test value="//part[color = &quot;Red&quot;][color eq&#10;&quot;Red&quot;]"/>
<test value="$N[@x castable as xs:date][xs:date(@x) gt xs:date(&quot;2000-01-01&quot;)]"/>
<test value="$N[if (@x castable as xs:date)&#10;   then xs:date(@x) gt xs:date(&quot;2000-01-01&quot;)&#10;   else false()]"/>
<test value="fn:collection(&quot;http://example.org&quot;)//customer"/>
<test value="fn:normalize-space(N)"/>
<test value="processing-instruction(xml-stylesheet)"/>
<test value="processing-instruction(&quot;xml-stylesheet&quot;)"/>
<test value="comment()"/>
<test value="namespace-node()"/>
<test value="document-node()"/>
<test value="document-node(element(book))"/>
<test value="element(book)"/>
<test value="element()"/>
<test value="element(*)"/>
<test value="element(person)"/>
<test value="element(person, surgeon)"/>
<test value="element(person, surgeon?)"/>
<test value="element(*, surgeon)"/>
<test value="element(*, surgeon?)"/>
<test value="schema-element(customer)"/>
<test value="attribute()"/>
<test value="attribute(*)"/>
<test value="attribute(price)"/>
<test value="attribute(price, currency)"/>
<test value="attribute(*, currency)"/>
<test value="schema-attribute(color)"/>
<test value="&quot;12.5&quot;"/>
<test value="12"/>
<test value="12.5"/>
<test value="125E2"/>
<test value="&quot;He said, &quot;&quot;I don't like it.&quot;&quot;&quot;"/>
<test value="xs:integer(&quot;12&quot;)"/>
<test value="xs:date(&quot;2001-08-25&quot;)"/>
<test value="xs:dayTimeDuration(&quot;PT5H&quot;)"/>
<test value="xs:float(&quot;NaN&quot;)"/>
<test value="xs:double(&quot;INF&quot;)"/>
<test value="9 cast as&#10;                        hatsize"/>
<test value="(2 + 4)&#10;&#9;&#9;    * 5"/>
<test value="(2 + 4)"/>
<test value="2 + 4 * 5"/>
<test value="fn:doc(&quot;bib.xml&quot;)/books/book[fn:count(./author)&gt;1]"/>
<test value="(1 to&#10;              100)[. mod 5 eq 0]"/>
<test value="my:three-argument-function(1,&#10;&#9;&#9;&#9;2, 3)"/>
<test value="my:two-argument-function((1,&#10;&#9;&#9;&#9;2), 3)"/>
<test value="my:two-argument-function(1,&#10;&#9;&#9;&#9;())"/>
<test value="my:one-argument-function((1, 2,&#10;&#9;&#9;&#9;3))"/>
<test value="my:one-argument-function(( ))"/>
<test value="my:zero-argument-function( )"/>
<test value="&#10;declare function local:filter($s as item()*, $p as function(xs:string) as xs:boolean) as item()*&#10;{&#10;  $s[$p(.)]&#10;};&#10;&#10;let $f := function($a) { starts-with($a, &quot;E&quot;) }&#10;return&#10;  local:filter((&quot;Ethel&quot;, &quot;Enid&quot;, &quot;Gertrude&quot;), $f)&#10;      "/>
<test value="fn:abs#1"/>
<test value="fn:concat#5"/>
<test value="local:myfunc#2"/>
<test value="function() as xs:integer+ { 2, 3, 5, 7, 11, 13 }"/>
<test value="function($a as xs:double, $b as xs:double) as xs:double { $a * $b }"/>
<test value="function($a) { $a }"/>
<test value="collection()/(let $a := . return function() { $a })"/>
<test value="$products[price gt 100]"/>
<test value="(1 to 100)[. mod 5 eq 0]"/>
<test value="(21 to 29)[5]"/>
<test value="$orders[fn:position() = (5 to 9)]"/>
<test value="$book/(chapter | appendix)[fn:last()]"/>
<test value="$f(2, 3)"/>
<test value="$f[2](&quot;Hi there&quot;)"/>
<test value="$f()[2]"/>
<test value="child::div1/child::para"/>
<test value="*"/>
<test value="/*"/>
<test value="/&#10;&#9; *"/>
<test value="(/) * 5"/>
<test value="4 + (/) * 5"/>
<test value="4 + /"/>
<test value="/&#10;&#9; union /*"/>
<test value="(/)&#10;&#9; union /*"/>
<test value="child::para"/>
<test value="child::para"/>
<test value="attribute::abc:href"/>
<test value="child::*"/>
<test value="attribute::*"/>
<test value="NCName:*"/>
<test value="Q{http://example.com/msg}*"/>
<test value="*:NCName"/>
<test value="node()"/>
<test value="text()"/>
<test value="comment()"/>
<test value="namespace-node()"/>
<test value="element()"/>
<test value="schema-element(person)"/>
<test value="element(person)"/>
<test value="element(person, surgeon)"/>
<test value="element(*,&#10;&#9;&#9;  surgeon)"/>
<test value="attribute()"/>
<test value="attribute(price)"/>
<test value="attribute(*,&#10;                  xs:decimal)"/>
<test value="document-node()"/>
<test value="document-node(element(book))"/>
<test value="element(book)"/>
<test value="child::chapter[2]"/>
<test value="descendant::toy[attribute::color = &quot;red&quot;]"/>
<test value="child::employee[secretary][assistant]"/>
<test value="preceding::foo[1]"/>
<test value="(preceding::foo)[1]"/>
<test value="(preceding::foo)"/>
<test value="ancestor::*[1]"/>
<test value="(ancestor::*)[1]"/>
<test value="child::para"/>
<test value="child::*"/>
<test value="child::text()"/>
<test value="child::node()"/>
<test value="attribute::name"/>
<test value="attribute::*"/>
<test value="parent::node()"/>
<test value="descendant::para"/>
<test value="ancestor::div"/>
<test value="ancestor-or-self::div"/>
<test value="descendant-or-self::para"/>
<test value="self::para"/>
<test value="child::chapter/descendant::para"/>
<test value="child::*/child::para"/>
<test value="/"/>
<test value="/descendant::para"/>
<test value="/descendant::list/child::member"/>
<test value="child::para[fn:position() = 1]"/>
<test value="child::para[fn:position() = fn:last()]"/>
<test value="child::para[fn:position() = fn:last()-1]"/>
<test value="child::para[fn:position() &gt; 1]"/>
<test value="following-sibling::chapter[fn:position() = 1]"/>
<test value="preceding-sibling::chapter[fn:position() = 1]"/>
<test value="/descendant::figure[fn:position() = 42]"/>
<test value="/child::book/child::chapter[fn:position() = 5]/child::section[fn:position() = 2]"/>
<test value="child::para[attribute::type eq &quot;warning&quot;]"/>
<test value="child::para[attribute::type eq 'warning'][fn:position() = 5]"/>
<test value="child::para[fn:position() = 5][attribute::type eq &quot;warning&quot;]"/>
<test value="child::chapter[child::title = 'Introduction']"/>
<test value="child::chapter[child::title]"/>
<test value="child::*[self::chapter or self::appendix]"/>
<test value="child::*[self::chapter or&#10;self::appendix][fn:position() = fn:last()]"/>
<test value="para[@type=&quot;warning&quot;]"/>
<test value="child::para[attribute::type=&quot;warning&quot;]"/>
<test value="section/para"/>
<test value="child::section/child::para"/>
<test value="section/@id"/>
<test value="child::section/attribute::id"/>
<test value="section/attribute(id)"/>
<test value="child::section/attribute::attribute(id)"/>
<test value="div1//para"/>
<test value="child::div1/descendant-or-self::node()/child::para"/>
<test value="//para[1]"/>
<test value="/descendant::para[1]"/>
<test value=".."/>
<test value="parent::node()"/>
<test value="../title"/>
<test value="parent::node()/child::title"/>
<test value="*"/>
<test value="text()"/>
<test value="@name"/>
<test value="@*"/>
<test value="para[1]"/>
<test value="para[fn:last()]"/>
<test value="*/para"/>
<test value="/book/chapter[5]/section[2]"/>
<test value="chapter//para"/>
<test value="//para"/>
<test value="//@version"/>
<test value="//list/member"/>
<test value=".//para"/>
<test value=".."/>
<test value="../@lang"/>
<test value="para[@type=&quot;warning&quot;]"/>
<test value="para[@type=&quot;warning&quot;][5]"/>
<test value="para[5][@type=&quot;warning&quot;]"/>
<test value="chapter[title=&quot;Introduction&quot;]"/>
<test value="chapter[title]"/>
<test value="employee[@secretary and @assistant]"/>
<test value="book/(chapter|appendix)/section"/>
<test value="E/."/>
<test value="(10, 1, 2, 3, 4)"/>
<test value="(10, (1, 2), (), (3, 4))"/>
<test value="(salary, bonus)"/>
<test value="($price, $price)"/>
<test value="(10, 1 to 4)"/>
<test value="10 to 10"/>
<test value="15 to 10"/>
<test value="fn:reverse(10 to 15)"/>
<test value="$seq1 union $seq2"/>
<test value="$seq2 union $seq3"/>
<test value="$seq1 intersect $seq2"/>
<test value="$seq2 intersect $seq3"/>
<test value="$seq1 except $seq2"/>
<test value="$seq2 except $seq3"/>
<test value="a-b"/>
<test value="a - b"/>
<test value="a -b"/>
<test value="A - B + C - D"/>
<test value="((A - B) + C) - D"/>
<test value="$arg1 idiv $arg2"/>
<test value="($arg1 div $arg2) cast as xs:integer?"/>
<test value="-1.5"/>
<test value="-1"/>
<test value="-3 div 2&#10;-3 idiv 2"/>
<test value="$emp/hiredate - $emp/birthdate"/>
<test value="$unit-price - $unit-discount"/>
<test value="$book1/author eq &quot;Kennedy&quot;"/>
<test value="//product[weight gt 100]"/>
<test value="my:hatsize(5) eq my:shoesize(5)"/>
<test value="fn:QName(&quot;http://example.com/ns1&quot;, &quot;this:color&quot;)&#10;   eq fn:QName(&quot;http://example.com/ns1&quot;, &quot;that:color&quot;)"/>
<test value="$book1/author = &quot;Kennedy&quot;"/>
<test value="($a, $b) = ($c, 3.0)"/>
<test value="($a, $b) = ($c, 2.0)"/>
<test value="/books/book[isbn=&quot;1558604820&quot;] is /books/book[call=&quot;QA76.9 C3845&quot;]"/>
<test value="/transactions/purchase[parcel=&quot;28-451&quot;]&#10;   &lt;&lt; /transactions/sale[parcel=&quot;33-870&quot;]"/>
<test value="1 eq 1 and 2 eq 2"/>
<test value="1 eq 1 or 2 eq 3"/>
<test value="1 eq 2 and 3 idiv 0 = 1"/>
<test value="1 eq 1 or 3 idiv 0 = 1"/>
<test value="1 eq 1 and 3 idiv 0 = 1"/>
<test value="for $x in X, $y in Y return $x + $y"/>
<test value="for $x in X return&#10;    for $y in Y return $x + $y"/>
<test value="for $a in fn:distinct-values(book/author)&#10;return ((book/author[. = $a])[1], book[author = $a]/title)"/>
<test value="for $a in fn:distinct-values(book/author)&#10;return ((book/author[. = $a])[1], book[author = $a]/title)"/>
<test value="for $i in (10, 20),&#10;    $j in (1, 2)&#10;return ($i + $j)"/>
<test value="for $i in (10, 20),&#10;    $j in (1, 2)&#10;return ($i + $j)"/>
<test value="for $x in $z, $y in f($x)&#10;return g($x, $y)"/>
<test value="for $x in $z, $y in f($x)&#10;return g($x, $y)"/>
<test value="fn:sum(for $i in order-item return $i/@price * $i/@qty)"/>
<test value="let $x := 4, $y := 3 return $x + $y"/>
<test value="let $x := 4 return let $y := 3 return $x + $y"/>
<test value="&#10;let $x := doc('a.xml')/*, $y := $x//*&#10;return $y[@value gt $x/@min]&#10;"/>
<test value="if ($widget1/unit-cost &lt; $widget2/unit-cost)&#10;  then $widget1&#10;  else $widget2"/>
<test value="if ($part/@discounted)&#10;  then $part/wholesale&#10;  else $part/retail"/>
<test value="every $part in /parts/part satisfies $part/@discounted"/>
<test value="some $emp in /emps/employee satisfies&#10;     ($emp/bonus &gt; 0.25 * $emp/salary)"/>
<test value="some $x in (1, 2, 3), $y in (2, 3, 4)&#10;satisfies $x + $y = 4"/>
<test value="every $x in (1, 2, 3), $y in (2, 3, 4)&#10;satisfies $x + $y = 4"/>
<test value="some $x in (1, 2, &quot;cat&quot;) satisfies $x * 2 = 4"/>
<test value="every $x in (1, 2, &quot;cat&quot;) satisfies $x * 2 = 4"/>
<test value="5 instance of xs:integer"/>
<test value="(5, 6) instance of xs:integer+"/>
<test value=". instance of element()"/>
<test value="&quot;2003-02-31&quot; cast as xs:date"/>
<test value="E castable as T"/>
<test value="&#10;if ($x castable as hatsize)&#10;   then $x cast as hatsize&#10;   else if ($x castable as IQ)&#10;   then $x cast as IQ&#10;   else $x cast as xs:string"/>
<test value="(($arg) cast as T?)"/>
<test value="(&quot;2000-01-01&quot; cast as&#10;xs:date?)"/>
<test value="xs:date(&quot;2000-01-01&quot;)"/>
<test value="(($floatvalue * 0.2E-5) cast as xs:decimal?)"/>
<test value="xs:decimal($floatvalue * 0.2E-5)"/>
<test value="(&quot;P21D&quot; cast as xs:dayTimeDuration?)"/>
<test value="xs:dayTimeDuration(&quot;P21D&quot;)"/>
<test value="(&quot;12345&quot; cast as&#10;usa:zipcode?)"/>
<test value="usa:zipcode(&quot;12345&quot;)"/>
<test value="17 cast as apple"/>
<test value="apple(17)&#10;"/>
<test value="$myaddress treat as element(*, USAddress)"/>
<test value="child::div1 / child::para / string() ! concat(&quot;id-&quot;, .)"/>
<test value="$emp ! (@first, @middle, @last)"/>
<test value="$docs ! ( //employee)"/>
<test value="avg( //employee / salary ! translate(., '$', '') ! number(.))"/>
<test value="/ *"/>
<test value="(/) * 5"/>
<test value="5 * /"/>
<test value="4 treat as item() + -&#10;&#9;5"/>
<test value="(4&#10;&#9;treat as item()+) - 5"/>
<test value="(4&#10;&#9;treat as item()) + -5"/>
<test value="address (: this may be empty&#10;              :)"/>
<test value="for (: whom the bell :)&#10;              $tolls in 3 return $tolls"/>
<test value="&quot;this is just a string&#10;                  :)&quot;"/>
<test value="&quot;this is another string&#10;                  (:&quot;"/>
<test value="for (: set up loop :) $i&#10;                  in $x return $i"/>
<test value="5 instance (: strange&#10;                  place for a comment :) of xs:integer"/>
<test value="foo -foo"/>
<test value="foo - foo"/>
<test value="foo(: This is a comment :)-&#10;            foo"/>
<test value="foo-foo"/>
<test value="(A &lt; B) &lt; C"/>
<test value="substring-before(10 div 3, &quot;.&quot;)"/>
<test value="$node-set = true()"/>
<test value="4 = true()"/>
<test value="4 = &quot;+4&quot;"/>
<test value="10 div 0"/>
<test value="@width+1"/>
<test value="item[@width+1 != 2]"/>
<test value="@birth &lt; @death"/>
<test value="substring-after(@temperature, &quot;-&quot;)"/>
<test value="abs(@temperature)"/>
<test value="round(../@price)"/>
<test value="../@price"/>
</tests>
