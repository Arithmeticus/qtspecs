<!--XSLT Processor: SAXON 9.1.0.2 from Saxonica SAXON SA 9.1.0.2--><spec xmlns:e="http://www.w3.org/1999/XSL/Spec/ElementSyntax" w3c-doctype="wgnote"><header><title>XQuery Update Facility 1.0 Use Cases</title><w3c-designation>NOTE-xquery-update-10-use-cases</w3c-designation><w3c-doctype>W3C Working Group Note</w3c-doctype><pubdate><day>25</day><month>January</month><year>2011</year></pubdate><publoc>
      <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/2011/NOTE-xquery-update-10-use-cases-20110125/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/2011/NOTE-xquery-update-10-use-cases-20110125/</loc>
    </publoc><latestloc>
      <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/xquery-update-10-use-cases/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/TR/xquery-update-10-use-cases/</loc>
    </latestloc><prevlocs diff="chg">
      <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/2008/CR-xquery-update-10-use-cases-20080314/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/>
    </prevlocs><authlist><author><name>Ioana Manolescu</name><affiliation>INRIA</affiliation><email xmlns:xlink="http://www.w3.org/1999/xlink" href="mailto:ioana.manolescu@inria.fr" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">ioana.manolescu@inria.fr</email></author><author><name>Jonathan Robie</name><affiliation>Red Hat</affiliation><email xmlns:xlink="http://www.w3.org/1999/xlink" href="mailto:jonathan.robie@redhat.com" xlink:type="simple" xlink:show="new" xlink:actuate="onRequest">jonathan.robie@redhat.com</email></author></authlist><!--* Common status section for QT specs.
    * Use is currently not required, but it simplifies things.
    * 
    * Revisions:
    * 2007-01-15 : CMSMcQ : made file, to simplify publication of Rec.
    * 2008-02-15 : JimMelton : cloned from MSM's REC-only material
                     to generalize for all stages
    *--><status id="status"><!-- ************************************************************************** --><!-- * All Status sections must start with the standard boilerplate paragraph * --><!-- *   This entity is defined in status-entities.dtd                        * --><!-- ************************************************************************** --><p><emph>This section describes the status of this
         document at the time of its publication.
         Other documents may supersede this document.
         A list of current W3C publications and the latest
         revision of this technical report can be found in the
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">W3C technical reports index</loc>
         at http://www.w3.org/TR/.</emph></p><!-- ************************************************************************** --><!-- * QT publishes suites of documents, which must be described in the       * --><!--     Status section of each document within such a suite.                 * --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><!-- ************************************************************************** --><!-- * There is a lot of detailed customization based on the document stage   * --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><p>This is a <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/2005/10/Process-20051014/tr.html#tr-end" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Working Group Note</loc> as described in the <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/2005/10/Process-20051014/tr.html" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Process Document</loc>. 
It has been developed by the W3C <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/XML/Query/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XML Query Working Group</loc>,
which is part of the <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/XML/Activity" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XML Activity</loc>.
</p><!-- ************************************************************************** --><!-- * CR documents must cite features at risk                                * --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><!-- ************************************************************************** --><!-- * Every Status section must have a customized paragraph                  * --><!-- *   This entity is defined completely in the host document.              * --><!-- ************************************************************************** --><p>This document incorporates a number
of use cases that guided the development of
<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/xquery-update-10/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XQuery Update Facility 1.0</loc>
during its design and development. </p><!-- ************************************************************************** --><!-- * CR docs should, and PR docs must, have a pointer to an implementation  * --><!-- *   report.  We also want to point to the test suite.                    * --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><!-- ************************************************************************** --><!-- * The Status section should point to a changelog                         * --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><!-- ************************************************************************** --><!-- * The Status section must tell readers where to send comments            * --><!-- *   This entity is defined in status-entities.dtd                        * --><!-- ************************************************************************** --><p>Please report errors in this document using W3C's
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Bugs/Public/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">public Bugzilla system</loc>
         (instructions can be found at
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/XML/2005/04/qt-bugzilla" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://www.w3.org/XML/2005/04/qt-bugzilla</loc>).
         If access to that system is not feasible, you may send your comments
         to the W3C XSLT/XPath/XQuery public comments mailing list,
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="mailto:public-qt-comments@w3.org" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">public-qt-comments@w3.org</loc>.
         It will be very helpful if you include the string 
         “[UPDUC]”
         in the subject line of your report, whether made in Bugzilla or in email.
         Please use multiple Bugzilla entries (or, if necessary, multiple email messages)
         if you have more than one comment to make.
         Archives of the comments and responses are available at
         <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://lists.w3.org/Archives/Public/public-qt-comments/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">http://lists.w3.org/Archives/Public/public-qt-comments/</loc>. </p><!-- ************************************************************************** --><!-- Status sections must state the stability (not stable, or REC) of the document --><!-- *   This entity is defined in the host document.                         * --><!-- ************************************************************************** --><p>Publication as a <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/2005/10/Process-20051014/tr.html#tr-end" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Working Group Note</loc>
does not imply endorsement by the W3C Membership. 
At the time of publication, work on this document
was considered complete and no further revisions are anticipated. 
It is a stable document and may be used as reference material or
cited from another document. 
However, this document may be updated, replaced, or made obsolete by
other documents at any time.</p><!-- ************************************************************************** --><!-- * Finally, all Status sections must end with the appropriate IPR para    * --><!-- *   This entity is defined in status-entities.dtd                        * --><!-- ************************************************************************** --><p>This document was produced by a group operating under the
  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Consortium/Patent-Policy-20040205/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">5 February 2004
  W3C Patent Policy</loc>.
  W3C maintains a 
  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/2004/01/pp-impl/18797/status#disclosures" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">public list of any patent disclosures</loc>
  made in connection with the deliverables of the group; 
  that page also includes instructions for disclosing a patent.
  An individual who has actual knowledge of a patent 
  which the individual believes contains
  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Consortium/Patent-Policy-20040205/#def-essential" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Essential Claim(s)</loc>
  must disclose the information in accordance with
  <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/Consortium/Patent-Policy-20040205/#sec-Disclosure" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">
  section 6 of the W3C Patent Policy</loc>. </p></status><abstract><p>This document specifies usage scenarios for the XQuery Update Facility.</p></abstract><langusage><language id="EN">English</language></langusage><revisiondesc><p/></revisiondesc></header><body><div1 id="use-cases-for-xquery-updates"><head>Use Cases for XQuery Updates</head><p>The
			use cases listed below were created by the <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/XML/Query/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">XML Query Working Group</loc>
      to illustrate important
			applications for an XML update facility. Each
			use case is focused on a specific application
			area, and contains a Document Type Definition
			(DTD) and example input data. Each use case
			specifies a set of updates that might be
			applied to the input data, and the expected
			resulting value of the modified input 
			for each update. Since the English
			description of each query is concise, the
			expected results form an important part of the
			definition of each update directive.
      These use cases are inspired by 
			the <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/2011/NOTE-xquery-update-10-requirements-20110125/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">W3C
			XQuery Update Facility Requirements</loc> document.</p><p>These use cases represent a snapshot of an
          ongoing work. Some important application areas and important
          operations are not yet adequately covered by a use case. The
          XML Query Working Group reserves the right to add, delete,
          or modify individual queries or whole use cases as the work
          progresses. The presence of a query in this set of use cases
          does not necessarily indicate that the query will be
          expressible in the XQuery Update Facility to be created by
          the XML Query Working Group.</p><div2 id="rdb"><head>Use Case "R" - Updating Relational Data</head><p>One important use of an XML update language will be to update data stored in
        relational databases. This use case describes a set of such possible updates.</p><div3 id="rdb-description"><head>Description</head><p>This use case is based on
					performing updates on the data
					used in Use Case "R" from the
            <bibref ref="xquery-use-cases"/>. The
					sample data from this Use Case
					is copied below for
					convenience, and exactly match
					the data found in the XQuery
					1.0 Use Cases. Instead of
					DTDs, we describe this data
					with W3C XML Schemas.</p><p>The data represents a relational database used by an
                        online auction. The auction maintains a USERS table
                        containing information on registered users, each
                        identified by a unique userid, who can either offer
                        items for sale or bid on items. An ITEMS table lists
                        items currently or recently for sale, with the userid of
                        the user who offered each item. A BIDS table contains
                        all bids on record, keyed by the userid of the bidder
                        and the item number of the item to which the bid
                        applies.</p><p>The three tables used by the online auction are below,
                        with their column-names indicated in parentheses.</p><eg xml:space="preserve">USERS ( USERID, NAME, RATING )
ITEMS ( ITEMNO, DESCRIPTION, OFFERED_BY, 
        START_DATE, END_DATE, RESERVE_PRICE ) 
BIDS ( USERID, ITEMNO, BID, BID_DATE )</eg></div3><div3 id="rdb-dtd"><head>Document Type Definition (DTD)</head><p>This use case is based on three separate input documents
                        named users.xml, items.xml, and bids.xml. Each of the
                        documents represents one of the tables in the relational
                      database described above, using the following DTDs:</p><div4 id="schema-for-users.xml"><head>Schema for users.xml</head><eg xml:space="preserve">
                                            
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified"&gt;
  &lt;xs:element name="users"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element minOccurs="0" maxOccurs="unbounded" ref="user_tuple"/&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
  &lt;xs:element name="user_tuple"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element ref="userid"/&gt;
        &lt;xs:element ref="name"/&gt;
        &lt;xs:element minOccurs="0" ref="rating"/&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
  &lt;xs:element name="userid" type="xs:string"/&gt;
  &lt;xs:element name="name" type="xs:string"/&gt;
  &lt;xs:element name="rating" type="xs:string"/&gt;
&lt;/xs:schema&gt;
 </eg></div4><div4 id="schema-for-items.xml"><head>Schema for items.xml</head><eg xml:space="preserve">
                  
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified"&gt;
  &lt;xs:element name="items"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element minOccurs="0" maxOccurs="unbounded" ref="item_tuple"/&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
  &lt;xs:element name="item_tuple"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element ref="itemno"/&gt;
        &lt;xs:element ref="description"/&gt;
        &lt;xs:element ref="offered_by"/&gt;
        &lt;xs:element minOccurs="0" ref="start_date"/&gt;
        &lt;xs:element minOccurs="0" ref="end_date"/&gt;
        &lt;xs:element minOccurs="0" ref="reserve_price"/&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
  &lt;xs:element name="itemno" type="xs:string"/&gt;
  &lt;xs:element name="description" type="xs:string"/&gt;
  &lt;xs:element name="offered_by" type="xs:string"/&gt;
  &lt;xs:element name="start_date" type="xs:string"/&gt;
  &lt;xs:element name="end_date" type="xs:string"/&gt;
  &lt;xs:element name="reserve_price" type="xs:string"/&gt;
&lt;/xs:schema&gt;

</eg></div4><div4 id="schema-for-bids.xml"><head>Schema for bids.xml</head><eg xml:space="preserve">
                      
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified"&gt;
  &lt;xs:element name="bids"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element minOccurs="0" maxOccurs="unbounded" ref="bid_tuple"/&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
  &lt;xs:element name="bid_tuple"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element ref="userid"/&gt;
        &lt;xs:element ref="itemno"/&gt;
        &lt;xs:element ref="bid"/&gt;
        &lt;xs:element ref="bid_date"/&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
  &lt;xs:element name="userid" type="xs:string"/&gt;
  &lt;xs:element name="itemno" type="xs:string"/&gt;
  &lt;xs:element name="bid" type="xs:string"/&gt;
  &lt;xs:element name="bid_date" type="xs:string"/&gt;
&lt;/xs:schema&gt;

                      </eg></div4></div3><div3 id="rdb-data"><head>Input Data</head><p>The following data is an excerpt of the initial state for Q1. In this particular use case, 
                    each update begins with the
                    state resulting from the prior update.</p><eg role="data" xml:space="preserve">&lt;items&gt;
  &lt;item_tuple&gt;
    &lt;itemno&gt;1001&lt;/itemno&gt;
    &lt;description&gt;Red Bicycle&lt;/description&gt;
    &lt;offered_by&gt;U01&lt;/offered_by&gt;
    &lt;start_date&gt;1999-01-05&lt;/start_date&gt;
    &lt;end_date&gt;1999-01-20&lt;/end_date&gt;
    &lt;reserve_price&gt;40&lt;/reserve_price&gt;
  &lt;/item_tuple&gt;
  <emph>  ... Snip ... </emph>
&lt;/items&gt;
&lt;users&gt;
  &lt;user_tuple&gt;
    &lt;userid&gt;U01&lt;/userid&gt;
    &lt;name&gt;Tom Jones&lt;/name&gt;
    &lt;rating&gt;B&lt;/rating&gt;
  &lt;/user_tuple&gt;
  <emph>  ... Snip ... </emph>
&lt;/users&gt;
&lt;bids&gt;
  &lt;bid_tuple&gt; 
    &lt;userid&gt;U02&lt;/userid&gt; 
    &lt;itemno&gt;1001&lt;/itemno&gt; 
    &lt;bid&gt;35&lt;/bid&gt; 
    &lt;bid_date&gt;1999-01-07&lt;/bid_date&gt; 
    &lt;/bid_tuple&gt; 
  &lt;bid_tuple&gt; 
  <emph>  ... Snip ... </emph>
&lt;/bids&gt;
                    </eg><p>The entire data set is represented by the following tables:</p><table border="1" summary="Data set table"><caption>USERS</caption><thead><tr><td rowspan="1" colspan="1">USERID</td><td rowspan="1" colspan="1">NAME</td><td rowspan="1" colspan="1">RATING</td></tr></thead><tbody><tr><td rowspan="1" colspan="1">U01</td><td rowspan="1" colspan="1">Tom Jones</td><td rowspan="1" colspan="1">B</td></tr><tr><td rowspan="1" colspan="1">U02</td><td rowspan="1" colspan="1">Mary Doe</td><td rowspan="1" colspan="1">A</td></tr><tr><td rowspan="1" colspan="1">U03</td><td rowspan="1" colspan="1">Dee Linquent</td><td rowspan="1" colspan="1">D</td></tr><tr><td rowspan="1" colspan="1">U04</td><td rowspan="1" colspan="1">Roger Smith</td><td rowspan="1" colspan="1">C</td></tr><tr><td rowspan="1" colspan="1">U05</td><td rowspan="1" colspan="1">Jack Sprat</td><td rowspan="1" colspan="1">B</td></tr><tr><td rowspan="1" colspan="1">U06</td><td rowspan="1" colspan="1">Rip Van Winkle</td><td rowspan="1" colspan="1">B</td></tr></tbody></table><table border="1" summary="Data set table"><caption>ITEMS</caption><thead><tr><td rowspan="1" colspan="1">ITEMNO</td><td rowspan="1" colspan="1">DESCRIPTION</td><td rowspan="1" colspan="1">OFFERED_BY</td><td rowspan="1" colspan="1">START_DATE</td><td rowspan="1" colspan="1">END_DATE</td><td rowspan="1" colspan="1">RESERVE_PRICE</td></tr></thead><tbody><tr><td rowspan="1" colspan="1">1001</td><td rowspan="1" colspan="1">Red Bicycle</td><td rowspan="1" colspan="1">U01</td><td rowspan="1" colspan="1">1999-01-05</td><td rowspan="1" colspan="1">1999-01-20</td><td rowspan="1" colspan="1">40</td></tr><tr><td rowspan="1" colspan="1">1002</td><td rowspan="1" colspan="1">Motorcycle</td><td rowspan="1" colspan="1">U02</td><td rowspan="1" colspan="1">1999-02-11</td><td rowspan="1" colspan="1">1999-03-15</td><td rowspan="1" colspan="1">500</td></tr><tr><td rowspan="1" colspan="1">1003</td><td rowspan="1" colspan="1">Old Bicycle</td><td rowspan="1" colspan="1">U02</td><td rowspan="1" colspan="1">1999-01-10</td><td rowspan="1" colspan="1">1999-02-20</td><td rowspan="1" colspan="1">25</td></tr><tr><td rowspan="1" colspan="1">1004</td><td rowspan="1" colspan="1">Tricycle</td><td rowspan="1" colspan="1">U01</td><td rowspan="1" colspan="1">1999-02-25</td><td rowspan="1" colspan="1">1999-03-08</td><td rowspan="1" colspan="1">15</td></tr><tr><td rowspan="1" colspan="1">1005</td><td rowspan="1" colspan="1">Tennis Racket</td><td rowspan="1" colspan="1">U03</td><td rowspan="1" colspan="1">1999-03-19</td><td rowspan="1" colspan="1">1999-04-30</td><td rowspan="1" colspan="1">20</td></tr><tr><td rowspan="1" colspan="1">1006</td><td rowspan="1" colspan="1">Helicopter</td><td rowspan="1" colspan="1">U03</td><td rowspan="1" colspan="1">1999-05-05</td><td rowspan="1" colspan="1">1999-05-25</td><td rowspan="1" colspan="1">50000</td></tr><tr><td rowspan="1" colspan="1">1007</td><td rowspan="1" colspan="1">Racing Bicycle</td><td rowspan="1" colspan="1">U04</td><td rowspan="1" colspan="1">1999-01-20</td><td rowspan="1" colspan="1">1999-02-20</td><td rowspan="1" colspan="1">200</td></tr><tr><td rowspan="1" colspan="1">1008</td><td rowspan="1" colspan="1">Broken Bicycle</td><td rowspan="1" colspan="1">U01</td><td rowspan="1" colspan="1">1999-02-05</td><td rowspan="1" colspan="1">1999-03-06</td><td rowspan="1" colspan="1">25</td></tr></tbody></table><table border="1" summary="Data set table"><caption>BIDS</caption><thead><tr><td rowspan="1" colspan="1">USERID</td><td rowspan="1" colspan="1">ITEMNO</td><td rowspan="1" colspan="1">BID</td><td rowspan="1" colspan="1">BID_DATE</td></tr></thead><tbody><tr><td rowspan="1" colspan="1">U02</td><td rowspan="1" colspan="1">1001</td><td rowspan="1" colspan="1">35</td><td rowspan="1" colspan="1">1999-01-07</td></tr><tr><td rowspan="1" colspan="1">U04</td><td rowspan="1" colspan="1">1001</td><td rowspan="1" colspan="1">40</td><td rowspan="1" colspan="1">1999-01-08</td></tr><tr><td rowspan="1" colspan="1">U02</td><td rowspan="1" colspan="1">1001</td><td rowspan="1" colspan="1">45</td><td rowspan="1" colspan="1">1999-01-11</td></tr><tr><td rowspan="1" colspan="1">U04</td><td rowspan="1" colspan="1">1001</td><td rowspan="1" colspan="1">50</td><td rowspan="1" colspan="1">1999-01-13</td></tr><tr><td rowspan="1" colspan="1">U02</td><td rowspan="1" colspan="1">1001</td><td rowspan="1" colspan="1">55</td><td rowspan="1" colspan="1">1999-01-15</td></tr><tr><td rowspan="1" colspan="1">U01</td><td rowspan="1" colspan="1">1002</td><td rowspan="1" colspan="1">400</td><td rowspan="1" colspan="1">1999-02-14</td></tr><tr><td rowspan="1" colspan="1">U02</td><td rowspan="1" colspan="1">1002</td><td rowspan="1" colspan="1">600</td><td rowspan="1" colspan="1">1999-02-16</td></tr><tr><td rowspan="1" colspan="1">U03</td><td rowspan="1" colspan="1">1002</td><td rowspan="1" colspan="1">800</td><td rowspan="1" colspan="1">1999-02-17</td></tr><tr><td rowspan="1" colspan="1">U04</td><td rowspan="1" colspan="1">1002</td><td rowspan="1" colspan="1">1000</td><td rowspan="1" colspan="1">1999-02-25</td></tr><tr><td rowspan="1" colspan="1">U02</td><td rowspan="1" colspan="1">1002</td><td rowspan="1" colspan="1">1200</td><td rowspan="1" colspan="1">1999-03-02</td></tr><tr><td rowspan="1" colspan="1">U04</td><td rowspan="1" colspan="1">1003</td><td rowspan="1" colspan="1">15</td><td rowspan="1" colspan="1">1999-01-22</td></tr><tr><td rowspan="1" colspan="1">U05</td><td rowspan="1" colspan="1">1003</td><td rowspan="1" colspan="1">20</td><td rowspan="1" colspan="1">1999-02-03</td></tr><tr><td rowspan="1" colspan="1">U01</td><td rowspan="1" colspan="1">1004</td><td rowspan="1" colspan="1">40</td><td rowspan="1" colspan="1">1999-03-05</td></tr><tr><td rowspan="1" colspan="1">U03</td><td rowspan="1" colspan="1">1007</td><td rowspan="1" colspan="1">175</td><td rowspan="1" colspan="1">1999-01-25</td></tr><tr><td rowspan="1" colspan="1">U05</td><td rowspan="1" colspan="1">1007</td><td rowspan="1" colspan="1">200</td><td rowspan="1" colspan="1">1999-02-08</td></tr><tr><td rowspan="1" colspan="1">U04</td><td rowspan="1" colspan="1">1007</td><td rowspan="1" colspan="1">225</td><td rowspan="1" colspan="1">1999-02-12</td></tr></tbody></table><p>The underlying database system has the following referential integrity constraints:</p><ulist><item><p>A foreign key on the BIDS table requires that BIDS.USERID contains a value that is found in USERS.USERID</p></item><item><p>A foreign key on the BIDS table requires that BIDS.ITEMNO contains a value that is found in ITEMS.ITEMNO</p></item></ulist></div3><div3 id="rdb-updates-results"><head>Updates and Results</head><div4 id="rdb-updates-results-u1"><head>Q1</head><p>Add a new user (with no rating) to the users.xml view.</p><p>
              <emph>Solution in the XQuery Update Facility:</emph>
            </p><eg xml:space="preserve">
insert nodes 
  &lt;user_tuple&gt;
    &lt;userid&gt;U07&lt;/userid&gt;
    &lt;name&gt;Annabel Lee&lt;/name&gt;
  &lt;/user_tuple&gt;
into doc("users.xml")/users

</eg><p>
              <emph>Expected resulting content of users.xml:</emph>
            </p><eg role="result" xml:space="preserve">&lt;users&gt;
  &lt;user_tuple&gt;
    &lt;userid&gt;U01&lt;/userid&gt;
    &lt;name&gt;Tom Jones&lt;/name&gt;
    &lt;rating&gt;B&lt;/rating&gt;
  &lt;/user_tuple&gt;
  &lt;user_tuple&gt;
    &lt;userid&gt;U02&lt;/userid&gt;
    &lt;name&gt;Mary Doe&lt;/name&gt;
    &lt;rating&gt;A&lt;/rating&gt;
  &lt;/user_tuple&gt;
  <emph>  ... Snip ... </emph>
&lt;user_tuple&gt;
   &lt;userid&gt;U06&lt;/userid&gt;
   &lt;name&gt;Rip Van Winkle&lt;/name&gt;
   &lt;rating&gt;B&lt;/rating&gt;
  &lt;/user_tuple&gt;
  &lt;user_tuple&gt;
    &lt;userid&gt;U07&lt;/userid&gt;
    &lt;name&gt;Annabel Lee&lt;/name&gt;
  &lt;/user_tuple&gt;
&lt;/users&gt;
						</eg></div4><div4 id="rdb-updates-results-u2"><head>Q2</head><p>Enter a bid for user Annabel Lee on February 1st, 1999 for 60 dollars on item 1001.</p><p>
              <emph>Solution in the XQuery Update Facility:</emph>
            </p><eg xml:space="preserve">
let $uid := 
doc("users.xml")/users/user_tuple[name="Annabel Lee"]/userid
return 
  insert nodes
    &lt;bid_tuple&gt; 
      &lt;userid&gt;{data($uid)}&lt;/userid&gt; 
      &lt;itemno&gt;1001&lt;/itemno&gt; 
      &lt;bid&gt;60&lt;/bid&gt; 
      &lt;bid_date&gt;1999-02-01&lt;/bid_date&gt; 
    &lt;/bid_tuple&gt;
  into doc("bids.xml")/bids 
</eg><p>
              <emph>Expected resulting content of bids.xml:</emph>
            </p><eg role="result" xml:space="preserve">&lt;bids&gt;
  &lt;bid_tuple&gt; 
    &lt;userid&gt;U02&lt;/userid&gt; 
    &lt;itemno&gt;1001&lt;/itemno&gt; 
    &lt;bid&gt;35&lt;/bid&gt; 
    &lt;bid_date&gt;1999-01-07&lt;/bid_date&gt; 
  &lt;/bid_tuple&gt; 
  &lt;bid_tuple&gt; 
    &lt;userid&gt;U04&lt;/userid&gt; 
    &lt;itemno&gt;1001&lt;/itemno&gt; 
    &lt;bid&gt;40&lt;/bid&gt; 
    &lt;bid_date&gt;1999-01-08&lt;/bid_date&gt; 
  &lt;/bid_tuple&gt;
<emph>  ... Snip ... </emph>
  &lt;bid_tuple&gt; 
    &lt;userid&gt;U01&lt;/userid&gt; 
    &lt;itemno&gt;1002&lt;/itemno&gt; 
    &lt;bid&gt;400&lt;/bid&gt; 
    &lt;bid_date&gt;1999-02-14&lt;/bid_date&gt; 
  &lt;/bid_tuple&gt; 
  <emph>  ... Snip ... </emph>
    &lt;bid_tuple&gt; 
    &lt;userid&gt;U04&lt;/userid&gt; 
    &lt;itemno&gt;1007&lt;/itemno&gt; 
    &lt;bid&gt;225&lt;/bid&gt; 
    &lt;bid_date&gt;1999-02-12&lt;/bid_date&gt; 
  &lt;/bid_tuple&gt; 
  &lt;bid_tuple&gt; 
    &lt;userid&gt;U07&lt;/userid&gt; 
    &lt;itemno&gt;1001&lt;/itemno&gt; 
    &lt;bid&gt;60&lt;/bid&gt; 
    &lt;bid_date&gt;1999-02-01&lt;/bid_date&gt; 
  &lt;/bid_tuple&gt; 
&lt;/bids&gt;
						</eg></div4><div4 id="rdb-updates-results-u3"><head>Q3</head><p>Insert a new bid for Annabel Lee on item 1002, 
adding 10% to the best bid received so far for this item.</p><p>
              <emph>Solution in the XQuery Update Facility:</emph>
            </p><eg xml:space="preserve">
let $uid := doc("users.xml")/users/user_tuple[name="Annabel Lee"]/userid
let $topbid := max(doc("bids.xml")/bids/bid_tuple[itemno=1002]/bid)
return 
  insert nodes 
    &lt;bid_tuple&gt; 
      &lt;userid&gt;{data($uid)}&lt;/userid&gt; 
      &lt;itemno&gt;1002&lt;/itemno&gt; 
      &lt;bid&gt;{$topbid*1.1}&lt;/bid&gt; 
      &lt;bid_date&gt;1999-02-01&lt;/bid_date&gt; 
    &lt;/bid_tuple&gt;
  into doc("bids.xml")/bids

</eg><p>
              <emph>Expected resulting content of bids.xml:</emph>
            </p><eg role="result" xml:space="preserve">&lt;bids&gt;
  &lt;bid_tuple&gt; 
    &lt;userid&gt;U02&lt;/userid&gt; 
    &lt;itemno&gt;1001&lt;/itemno&gt; 
    &lt;bid&gt;35&lt;/bid&gt; 
    &lt;bid_date&gt;1999-01-07&lt;/bid_date&gt; 
  &lt;/bid_tuple&gt; 
  <emph>  ... Snip ... </emph>
  &lt;bid_tuple&gt; 
    &lt;userid&gt;U01&lt;/userid&gt; 
    &lt;itemno&gt;1002&lt;/itemno&gt; 
    &lt;bid&gt;400&lt;/bid&gt; 
    &lt;bid_date&gt;1999-02-14&lt;/bid_date&gt; 
  &lt;/bid_tuple&gt; 
  <emph>  ... Snip ... </emph>
   &lt;bid_tuple&gt; 
    &lt;userid&gt;U04&lt;/userid&gt; 
    &lt;itemno&gt;1007&lt;/itemno&gt; 
    &lt;bid&gt;225&lt;/bid&gt; 
    &lt;bid_date&gt;1999-02-12&lt;/bid_date&gt; 
  &lt;/bid_tuple&gt; 
  <emph>  ... Snip ... </emph>
  &lt;bid_tuple&gt; 
    &lt;userid&gt;U07&lt;/userid&gt; 
    &lt;itemno&gt;1002&lt;/itemno&gt; 
    &lt;bid&gt;1320&lt;/bid&gt; 
    &lt;bid_date&gt;1999-03-05&lt;/bid_date&gt; 
  &lt;/bid_tuple&gt; 
&lt;/bids&gt;
						</eg><p>The best bid for item 1002 had been at 1200, thus Annabel's bid is at 1320.</p></div4><div4 id="rdb-updates-results-u4"><head>Q4</head><p>Set Annabel Lee's rating to B.</p><p>
              <emph>Solution in the XQuery Update Facility:</emph>

              <eg xml:space="preserve">
let $user := doc("users.xml")/users/user_tuple[name="Annabel Lee"]
return 
  if ($user/rating)
    then replace value of node $user/rating with "B"
    else insert node &lt;rating&gt;B&lt;/rating&gt; into $user
</eg>
            </p><p>
              <emph>Expected resulting content of users.xml:</emph>
            </p><eg role="result" xml:space="preserve">&lt;users&gt;
  &lt;user_tuple&gt;
    &lt;userid&gt;U01&lt;/userid&gt;
    &lt;name&gt;Tom Jones&lt;/name&gt;
    &lt;rating&gt;B&lt;/rating&gt;
  &lt;/user_tuple&gt;
  &lt;user_tuple&gt;
    &lt;userid&gt;U02&lt;/userid&gt;
    &lt;name&gt;Mary Doe&lt;/name&gt;
    &lt;rating&gt;A&lt;/rating&gt;
  &lt;/user_tuple&gt;
  <emph>  ... Snip ... </emph>
  &lt;user_tuple&gt;
   &lt;userid&gt;U06&lt;/userid&gt;
   &lt;name&gt;Rip Van Winkle&lt;/name&gt;
   &lt;rating&gt;B&lt;/rating&gt;
  &lt;/user_tuple&gt;
  &lt;user_tuple&gt;
    &lt;userid&gt;U07&lt;/userid&gt;
    &lt;name&gt;Annabel Lee&lt;/name&gt;
    &lt;rating&gt;B&lt;/rating&gt;
  &lt;/user_tuple&gt;
&lt;/users&gt;
						</eg></div4><div4 id="rdb-updates-results-u5"><head>Q5</head><p>Place a bid for Annabel Lee 
						on item 1007, adding 10% to the
            best bid received so far on that item, but only 
						if the bid amount does not exceed a given limit.
            The first query illustrates the desired behavior if the limit is exceeded.</p><p>
              <emph>Solution in the XQuery Update Facility:</emph>
            </p><eg xml:space="preserve">
let $uid := doc("users.xml")/users/user_tuple[name="Annabel Lee"]/userid
let $topbid := max(doc("bids.xml")/bids/bid_tuple[itemno=1007]/bid)
where $topbid*1.1 &lt;= 200
return 
  insert nodes 
    &lt;bid_tuple&gt; 
      &lt;userid&gt;{data($uid)}&lt;/userid&gt; 
      &lt;itemno&gt;1007&lt;/itemno&gt; 
      &lt;bid&gt;{$topbid*1.1}&lt;/bid&gt; 
      &lt;bid_date&gt;1999-02-01&lt;/bid_date&gt; 
    &lt;/bid_tuple&gt;
  into doc("bids.xml")/bids
</eg><p>
              <emph>Expected resulting content of bids.xml:</emph>
            </p><eg role="result" xml:space="preserve">&lt;bids&gt;
  &lt;bid_tuple&gt; 
    &lt;userid&gt;U02&lt;/userid&gt; 
    &lt;itemno&gt;1001&lt;/itemno&gt; 
    &lt;bid&gt;35&lt;/bid&gt; 
    &lt;bid_date&gt;1999-01-07&lt;/bid_date&gt; 
  &lt;/bid_tuple&gt; 
  <emph>  ... Snip ... </emph>
    &lt;bid_tuple&gt; 
    &lt;userid&gt;U04&lt;/userid&gt; 
    &lt;itemno&gt;1007&lt;/itemno&gt; 
    &lt;bid&gt;225&lt;/bid&gt; 
    &lt;bid_date&gt;1999-02-12&lt;/bid_date&gt; 
  &lt;/bid_tuple&gt; 
&lt;/bids&gt;
</eg><p>In the above, adding 10% to the best bid on item 1007 would have required a bid of 237,
            which is more than the allowed limit of 200. Thus, the bids.xml document does not change.</p><p>Place a bid for Annabel Lee 
						on item 1007, adding 10% to the
                         best bid received so far on that item, but only 
						 if the bid amount does not exceed 500. This illustrates the
                         behavior when the resulting value is within the limit.</p><p>
              <emph>Solution in the XQuery Update Facility:</emph>
            </p><eg xml:space="preserve">
let $uid := doc("users.xml")/users/user_tuple[name="Annabel Lee"]/userid
let $topbid := max(doc("bids.xml")/bids/bid_tuple[itemno=1007]/bid)
where $topbid*1.1 &lt;= 500
return 
  insert nodes 
    &lt;bid_tuple&gt; 
      &lt;userid&gt;{data($uid)}&lt;/userid&gt; 
      &lt;itemno&gt;1007&lt;/itemno&gt; 
      &lt;bid&gt;{$topbid*1.1}&lt;/bid&gt; 
      &lt;bid_date&gt;1999-02-01&lt;/bid_date&gt; 
    &lt;/bid_tuple&gt;
  into doc("bids.xml")/bids
</eg><p>
              <emph>Expected resulting content of bids.xml</emph>
            </p><eg role="result" xml:space="preserve">&lt;bids&gt;
  &lt;bid_tuple&gt; 
    &lt;userid&gt;U02&lt;/userid&gt; 
    &lt;itemno&gt;1001&lt;/itemno&gt; 
    &lt;bid&gt;35&lt;/bid&gt; 
    &lt;bid_date&gt;1999-01-07&lt;/bid_date&gt; 
  &lt;/bid_tuple&gt; 
  <emph>  ... Snip ... </emph>
   &lt;bid_tuple&gt; 
    &lt;userid&gt;U04&lt;/userid&gt; 
    &lt;itemno&gt;1007&lt;/itemno&gt; 
    &lt;bid&gt;225&lt;/bid&gt; 
    &lt;bid_date&gt;1999-02-12&lt;/bid_date&gt; 
  &lt;/bid_tuple&gt; 
  &lt;bid_tuple&gt; 
    &lt;userid&gt;U07&lt;/userid&gt; 
    &lt;itemno&gt;1007&lt;/itemno&gt; 
    &lt;bid&gt;237&lt;/bid&gt; 
    &lt;bid_date&gt;1999-04-01&lt;/bid_date&gt; 
  &lt;/bid_tuple&gt; 
&lt;/bids&gt;
</eg></div4><div4 id="rdb-updates-results-u6"><head>Q6</head><p>Erase user Dee Linquent and the corresponding associated items and bids.</p><p>
              <emph>Solution in the XQuery Update Facility:</emph>
            </p><eg xml:space="preserve">
let $user := doc("users.xml")/users/user_tuple[name="Dee Linquent"]
let $items := doc("items.xml")/items/item_tuple[offered_by=$user/userid]
let $bids := doc("bids.xml")/bids/bid_tuple[userid=$user/userid]
return (
  delete nodes $user,
  delete nodes $items,
  delete nodes $bids
)

</eg><p>An alternative solution is:</p><eg xml:space="preserve">
let $user := doc("users.xml")/users/user_tuple[name="Dee Linquent"]
let $items := doc("items.xml")/items/item_tuple[offered_by=$user/userid]
let $bids := doc("bids.xml")/bids/bid_tuple[userid=$user/userid]
return 
  delete nodes $user, $items, $bids

</eg><p>The two solutions above highlight the fact that a list of delete operations
is equivalent to deleting the list of nodes obtained by concatenating the 
operands on which the deletes applied.</p><p>
              <emph>Expected resulting content of items.xml:</emph>
            </p><eg role="result" xml:space="preserve">&lt;items&gt;
  &lt;item_tuple&gt;
    &lt;itemno&gt;1001&lt;/itemno&gt;
    &lt;description&gt;Red Bicycle&lt;/description&gt;
    &lt;offered_by&gt;U01&lt;/offered_by&gt;
    &lt;start_date&gt;1999-01-05&lt;/start_date&gt;
    &lt;end_date&gt;1999-01-20&lt;/end_date&gt;
    &lt;reserve_price&gt;40&lt;/reserve_price&gt;
  &lt;/item_tuple&gt;
  <emph>  ... Snip ... </emph>
  &lt;item_tuple&gt;
    &lt;itemno&gt;1004&lt;/itemno&gt;
    &lt;description&gt;Tricycle&lt;/description&gt;
    &lt;offered_by&gt;U01&lt;/offered_by&gt;
    &lt;start_date&gt;1999-02-25&lt;/start_date&gt;
    &lt;end_date&gt;1999-03-08&lt;/end_date&gt;
    &lt;reserve_price&gt;15&lt;/reserve_price&gt;
  &lt;/item_tuple&gt;
  &lt;item_tuple&gt;
    &lt;itemno&gt;1007&lt;/itemno&gt;
    &lt;description&gt;Racing bicycle&lt;/description&gt;
    &lt;offered_by&gt;U04&lt;/offered_by&gt;
    &lt;start_date&gt;1999-01-20&lt;/start_date&gt;
    &lt;end_date&gt;1999-02-20&lt;/end_date&gt;
    &lt;reserve_price&gt;200&lt;/reserve_price&gt;
  &lt;/item_tuple&gt;
  &lt;item_tuple&gt;
    &lt;itemno&gt;1008&lt;/itemno&gt;
    &lt;description&gt;Broken bicycle&lt;/description&gt;
    &lt;offered_by&gt;U01&lt;/offered_by&gt;
    &lt;start_date&gt;1999-02-05&lt;/start_date&gt;
    &lt;end_date&gt;1999-03-06&lt;/end_date&gt;
    &lt;reserve_price&gt;25&lt;/reserve_price&gt;
  &lt;/item_tuple&gt;
&lt;/items&gt;
</eg><p>In the above, items 1005 and 1006, 
						offered by user Dee Linquent, have been erased; 
						item 1007 now directly follows item 1004. 
                        Notice that the whole subtrees rooted at the corresponding 
						&lt;item_tuple&gt; elements have been erased.</p><p>
              <emph>Expected resulting content of users.xml:</emph>
            </p><eg role="result" xml:space="preserve">&lt;users&gt;
  &lt;user_tuple&gt;
    &lt;userid&gt;U01&lt;/userid&gt;
    &lt;name&gt;Tom Jones&lt;/name&gt;
    &lt;rating&gt;B&lt;/rating&gt;
  &lt;/user_tuple&gt;
  &lt;user_tuple&gt;
    &lt;userid&gt;U02&lt;/userid&gt;
    &lt;name&gt;Mary Doe&lt;/name&gt;
    &lt;rating&gt;A&lt;/rating&gt;
  &lt;/user_tuple&gt;
   &lt;user_tuple&gt;
    &lt;userid&gt;U04&lt;/userid&gt;
    &lt;name&gt;Roger Smith&lt;/name&gt;
    &lt;rating&gt;C&lt;/rating&gt;
  &lt;/user_tuple&gt;
<emph>  ... Snip ... </emph>
  &lt;user_tuple&gt;
   &lt;userid&gt;U06&lt;/userid&gt;
   &lt;name&gt;Rip Van Winkle&lt;/name&gt;
   &lt;rating&gt;B&lt;/rating&gt;
  &lt;/user_tuple&gt;
&lt;/users&gt;
</eg><p>In the above, user Dee Linquent has been erased.</p><p>
              <emph>Expected resulting content of bids.xml:</emph>
            </p><eg role="result" xml:space="preserve">&lt;bids&gt;
  &lt;bid_tuple&gt; 
    &lt;userid&gt;U02&lt;/userid&gt; 
    &lt;itemno&gt;1001&lt;/itemno&gt; 
    &lt;bid&gt;35&lt;/bid&gt; 
    &lt;bid_date&gt;1999-01-07&lt;/bid_date&gt; 
  &lt;/bid_tuple&gt; 
  &lt;bid_tuple&gt; 
    &lt;userid&gt;U04&lt;/userid&gt; 
    &lt;itemno&gt;1001&lt;/itemno&gt; 
    &lt;bid&gt;40&lt;/bid&gt; 
    &lt;bid_date&gt;1999-01-08&lt;/bid_date&gt; 
  &lt;/bid_tuple&gt; 
<emph>  ... Snip ... </emph>
  &lt;bid_tuple&gt; 
    &lt;userid&gt;U02&lt;/userid&gt; 
    &lt;itemno&gt;1002&lt;/itemno&gt; 
    &lt;bid&gt;600&lt;/bid&gt; 
    &lt;bid_date&gt;1999-02-16&lt;/bid_date&gt; 
  &lt;/bid_tuple&gt; 
  &lt;bid_tuple&gt; 
    &lt;userid&gt;U04&lt;/userid&gt; 
    &lt;itemno&gt;1002&lt;/itemno&gt; 
    &lt;bid&gt;1000&lt;/bid&gt; 
    &lt;bid_date&gt;1999-02-25&lt;/bid_date&gt; 
  &lt;/bid_tuple&gt; 
<emph>  ... Snip ... </emph>
  &lt;bid_tuple&gt; 
    &lt;userid&gt;U04&lt;/userid&gt; 
    &lt;itemno&gt;1007&lt;/itemno&gt; 
    &lt;bid&gt;225&lt;/bid&gt; 
    &lt;bid_date&gt;1999-02-12&lt;/bid_date&gt; 
  &lt;/bid_tuple&gt; 
&lt;/bids&gt;

</eg><p>No bids had been placed on items 1005 and 1006 
						offered by user Dee Linquent. However, Dee Linquent 
						had placed a bid on item 1002; this bid has been erased.</p></div4><div4 id="rdb-updates-results-u7"><head>Q7</head><p>Add the element &lt;comment&gt;This is a bargain !&lt;/comment&gt; 
                        as the last child of the &lt;item&gt; element describing item 1002.</p><p>
              <emph>Solution in the XQuery Update Facility</emph>
            </p><eg xml:space="preserve">
declare revalidation strict;

insert nodes
  &lt;comment&gt;This is a bargain !&lt;/comment&gt;
as last into doc("items.xml")/items/item_tuple[itemno=1002] 
</eg><p>
              <emph>Expected resulting content of items.xml:</emph> The same as the original contents.</p><p>The items.xml document is unchanged and an error is raised. This update can
						not be applied without rendering the document invalid with respect to its schema.</p></div4><div4 id="rdb-updates-results-q8"><head>Q8</head><p>Place a bid for
						Annabel Lee on item
						1010, which does not
						exist in
						"items.xml". In this
						query, we assume that
						a referential
						integrity constraint
						in the underlying
						database system
						requires that no bid
						can be placed on an item
						unless it exists in
						the database.</p><p>
              <emph>Solution in XQuery:</emph>

              <eg xml:space="preserve">
let $uid := doc("users.xml")/users/user_tuple[name="Annabel Lee"]/userid
return 
  insert nodes
    &lt;bid_tuple&gt; 
      &lt;userid&gt;{data($uid)}&lt;/userid&gt; 
      &lt;itemno&gt;1010&lt;/itemno&gt; 
      &lt;bid&gt;60&lt;/bid&gt; 
      &lt;bid_date&gt;2006-04-23&lt;/bid_date&gt; 
    &lt;/bid_tuple&gt;
  into doc("bids.xml")/bids 
</eg>
            </p><p>
              <emph>Expected resulting content of bids.xml:</emph>the same as the original contents.</p><p>This update violates the previously-mentioned referential integrity constraint.
						Therefore, its execution raises a dynamic error (see
              <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/xquery/#id-kinds-of-errors" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Kinds of Errors</loc> in the XQuery specification).

              <!--This query was designed to explore referential integrity constraints.
						Unfortunately, with the current mapping, we can not express
						these constraints with a W3C XML Schema, since there are three
						different XML files, and no schema can span them. How do we
						account for such constraints, which may well be implemented in
						an underlying system?  Do we treat them as system-defined
						behavior ?--></p></div4><div4 id="rdb-updates-results-u9"><head>Q9</head><p>Add a bid for Annabel Lee on item 1002, at a price 5
						dollars below the current highest bid. 
            A trigger in the underlying database ensures that a bid cannot be made at a
            lower price than the highest bid made so far on that item.</p><p>
              <emph>Solution in XQuery:</emph>
              <eg xml:space="preserve">
let $uid := doc("users.xml")/users/user_tuple[name="Annabel Lee"]/userid
let $topbid := max(doc("bids.xml")//bid_tuple[itemno=1002]/bid)
return 
  insert nodes
    &lt;bid_tuple&gt; 
      &lt;userid&gt;{data($uid)}&lt;/userid&gt; 
      &lt;itemno&gt;1002&lt;/itemno&gt; 
      &lt;bid&gt;{$topbid - 5.00}&lt;/bid&gt; 
      &lt;bid_date&gt;2006-04-23&lt;/bid_date&gt; 
    &lt;/bid_tuple&gt;
  into doc("bids.xml")/bids 
</eg>
            </p><p>
              <emph>Expected resulting content of bids.xml:</emph> the
							same as the original contents.</p><p>This update causes the previously mentioned trigger to return an error.
            Therefore, its execution will raise a dynamic error (see
              <loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.w3.org/TR/xquery/#id-kinds-of-errors" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Kinds of Errors</loc> in the XQuery specification).

              <!-- This raises difficulties similar to those seen in
						Q9. However, Q9 might be addressed by using a different mapping
						and a schema that spans the data, providing identity
						contraints. Q10 expresses constraints that can not be
						expressed in W3C XML Schema. How do we account for such
						constraints, which may well be implemented in
						an underlying system?  Do we treat them as
						system-defined behavior?--></p></div4></div3></div2><div2 id="use-case-sync-addrbook"><head>Use Case "Address Book" - synchronizing address book entries</head><p>In this scenario, an address book is synchronized among a central archive and
				two local copies. This scenario is inspired by the Unison file synchronizer.
                During synchronization, Address book entries with the same <emph>name</emph> 
				element are considered to be the same entry. The order of entries is irrelevant.
				For simplicity, we assume that entries may be modified, but not inserted or deleted.
				When the two copies are synchronized, their state is saved into an archival version. 
				Synchronization is performed as follows:</p><ulist><item><p>If an entry in one of the two copies is different from the archived one,
						but the other copy matches the archive, the modified copy is propagated
						to the archive and to the other copy.</p></item><item><p>If both copies differ from the archive, but they do not both modify the 
						same element in the entry, or they modify the same element but the modified
						elements have the same value, then the changes from each copy are propagated 
						to both the archive	and the other copy.</p></item><item><p>If the copies have each modified the same entry, but modified it in
different ways, a problem is reported in the log, and neither the
archive nor the copies are changed. (For simplicity, we do not attempt to merge updates.)</p></item></ulist><p>The XQuery Update Facility is sufficient for the problem as scoped above.
        For more complex scenarios, the XQuery Scripting Extensions will simplify programming
				by allowing variable assignment and the ability to view the results of prior updates
				within a query.</p><div3 id="use-case-sync-addrbook-input-data"><head>Input Data</head><p>This section describes the data prior to synchronization.</p><p>
            <emph>archive.xml</emph>: The central archive, before synchronization.</p><eg role="archive-before" xml:space="preserve">&lt;archived-agenda&gt;
  &lt;last-synch-time&gt;2005-10-05T10:00&lt;/last-synch-time&gt;
  &lt;entry&gt;
    &lt;name&gt;Benjamin&lt;/name&gt;
    &lt;contact&gt;benjamin@inria.fr&lt;/contact&gt;
  &lt;/entry&gt;
  &lt;entry&gt;
    &lt;name&gt;Dario&lt;/name&gt;
    &lt;contact&gt;dario@uni-pisa.it&lt;/contact&gt;
  &lt;/entry&gt;
  &lt;entry&gt;
    &lt;name&gt;Anthony&lt;/name&gt;
    &lt;contact&gt;tony@uni-toulon.fr&lt;/contact&gt;
  &lt;/entry&gt;
&lt;/archived-agenda&gt;

</eg><p>
            <emph>log.xml</emph>: The central log, before synchronization.</p><eg role="log-before" xml:space="preserve">&lt;log&gt;
&lt;/log&gt;

</eg><p>
            <emph>copy1.xml</emph>: The first modified copy of the address book.</p><p>In this copy, Benjamin's contact has changed from INRIA to University of 
				Versailles, Dario has moved from University of Pisa to University of Paris 
				Sud, and Anthony has moved from University of Toulon to the ENA.</p><eg role="new-v1" xml:space="preserve">&lt;agenda-version&gt;
  &lt;entry&gt;
    &lt;name&gt;Benjamin&lt;/name&gt;
    &lt;contact&gt;benjamin@uni-versailles.fr&lt;/contact&gt;
  &lt;/entry&gt;
  &lt;entry&gt;
    &lt;name&gt;Dario&lt;/name&gt;
    &lt;contact&gt;dario@uni-parissud.fr&lt;/contact&gt;
  &lt;/entry&gt;
  &lt;entry&gt;
    &lt;name&gt;Anthony&lt;/name&gt;
    &lt;contact&gt;tony@ena.fr&lt;/contact&gt;
  &lt;/entry&gt;
&lt;/agenda-version&gt;

</eg><p>
            <emph>copy2.xml</emph>: The second modified copy of the address book.</p><p>In this copy, Benjamin has also moved to University of Versailles, Dario has not moved,
and Anthony has moved to the EHESS instead of the ENA:</p><eg role="new-v2" xml:space="preserve">&lt;agenda-version&gt;  
  &lt;entry&gt;
    &lt;name&gt;Benjamin&lt;/name&gt;
    &lt;contact&gt;benjamin@uni-versailles.fr&lt;/contact&gt;
  &lt;/entry&gt;
  &lt;entry&gt;
    &lt;name&gt;Dario&lt;/name&gt;
    &lt;contact&gt;dario@uni-pisa.it&lt;/contact&gt;
  &lt;/entry&gt;
  &lt;entry&gt;
    &lt;name&gt;Anthony&lt;/name&gt;
    &lt;contact&gt;tony@ehess.fr&lt;/contact&gt;
  &lt;/entry&gt;
 &lt;/agenda-version&gt;

</eg></div3><div3 id="addrbook-q1"><head>Q1</head><p>Synchronize the three logs as described in the description
					of this use case.</p><p>
            <emph>Solution in the XQuery Update Facility:</emph>
          </p><eg xml:space="preserve">
for $a in doc("archive.xml")/archived-agenda/entry, 
    $v1 in doc("copy1.xml")/agenda-version/entry, 
    $v2 in doc("copy2.xml")/agenda-version/entry
where $a/name = $v1/name
  and $v1/name = $v2/name
return 
  if ($a/contact = $v1/contact and $v1/contact=$v2/contact)
  then ()
  else 
    if ($v1/contact = $v2/contact)
    then replace value of node $a/contact with $v1/contact
    else 
      if ($a/contact = $v1/contact)
      then (
            replace value of node $a/contact with $v2/contact,
            replace value of node $v1/contact with $v2/contact
      )
      else 
        if ($a/contact = $v2/contact)
        then (
            replace value of node $a/contact with $v1/contact,
            replace value of node $v2/contact with $v1/contact
        )
        else (
          insert node
            &lt;fail&gt;
               &lt;arch&gt;{ $a }&lt;/arch&gt;
               &lt;v1&gt;{ $v1 }&lt;/v1&gt;
               &lt;v2&gt;{ $v2 }&lt;/v2&gt;
            &lt;/fail&gt;
          into doc("log.xml")/log
        )
,
replace value of node doc("archive.xml")/*/last-synch-time
        with current-dateTime()

          </eg><p>
            <emph>Expected Results:</emph>
          </p><p>
            <emph>Expected results of the agenda synchronization</emph>: 
            A synchronization of the two versions of the agenda made on
            April 23th, 2006, at noon, should have the following impact
            on the archive, versions, and log.</p><note><p>In the following XML results, the comments (shown in italic font) 
were not created by the update directives, and are not part of the 
result documents. They have been added to explain where each part of a
result document comes from.</p></note><p>
            <emph>archive.xml</emph>
          </p><eg role="archive-after" xml:space="preserve">&lt;archived-agenda&gt;
  &lt;last-synch-time&gt;2006-04-23T12:00&lt;/last-synch-time&gt;
  &lt;entry&gt;
    &lt;name&gt;Benjamin&lt;/name&gt;
    
            <emph> copied from the modified entries </emph>

    &lt;contact&gt;benjamin@uni-versailles.fr&lt;/contact&gt;
  &lt;/entry&gt;
  &lt;entry&gt;
    &lt;name&gt;Dario&lt;/name&gt;
    <emph> copied from first modified version </emph>

    &lt;contact&gt;dario@uni-parissud.fr&lt;/contact&gt;
  &lt;/entry&gt;
  &lt;entry&gt;
    &lt;name&gt;Anthony&lt;/name&gt;
    <emph>unchanged due to conflict </emph>

    &lt;contact&gt;tony@uni-toulon.fr&lt;/contact&gt;
  &lt;/entry&gt;
&lt;/archived-agenda&gt;

</eg><p>
            <emph>log.xml</emph>
          </p><eg role="log-after" xml:space="preserve">&lt;log&gt;
  <emph> update failure details </emph>
  &lt;fail&gt;
     &lt;arch&gt;
       <emph> archived agenda version </emph>

       &lt;entry&gt;
         &lt;name&gt;Anthony&lt;/name&gt;
         &lt;contact&gt;tony@uni-toulon.fr&lt;/contact&gt;
       &lt;/entry&gt;
     &lt;/arch&gt;
     &lt;v1&gt;
       <emph> first modified version </emph>

       &lt;entry&gt;
         &lt;name&gt;Anthony&lt;/name&gt;
         &lt;contact&gt;tony@ena.fr&lt;/contact&gt;
       &lt;/entry&gt;
     &lt;/v1&gt;
     &lt;v2&gt;
       <emph> second modified version </emph>

       &lt;entry&gt;
         &lt;name&gt;Anthony&lt;/name&gt;
         &lt;contact&gt;tony@ehess.fr&lt;/contact&gt;
       &lt;/entry&gt;
     &lt;/v2&gt;
  &lt;/fail&gt;
&lt;/log&gt;

</eg><p>
            <emph>copy1.xml</emph>
          </p><eg role="reconciled-v1" xml:space="preserve">&lt;agenda-version&gt;
  &lt;entry&gt;
    &lt;name&gt;Benjamin&lt;/name&gt;
    
            <emph> kept after synchronization </emph>
 
   &lt;contact&gt;benjamin@uni-versailles.fr&lt;/contact&gt;
  &lt;/entry&gt;
  &lt;entry&gt;
    <emph> kept after synchronization </emph>

    &lt;name&gt;Dario&lt;/name&gt;
    &lt;contact&gt;dario@uni-parissud.fr&lt;/contact&gt;
  &lt;/entry&gt;
  &lt;entry&gt;
    <emph> kept after synchronization failure </emph>

    &lt;name&gt;Anthony&lt;/name&gt;
    &lt;contact&gt;tony@ena.fr&lt;/contact&gt;
  &lt;/entry&gt;
&lt;/agenda-version&gt;

</eg><p>
            <emph>copy2.xml</emph>
          </p><eg role="reconciled-v2" xml:space="preserve">&lt;agenda-version&gt;  
  &lt;entry&gt;
    
            <emph> kept after synchronization </emph>

    &lt;name&gt;Benjamin&lt;/name&gt;
    &lt;contact&gt;benjamin@uni-versailles.fr&lt;/contact&gt;
  &lt;/entry&gt;
  &lt;entry&gt;
    <emph> value taken from the other modified version </emph>

    &lt;name&gt;Dario&lt;/name&gt;
    &lt;contact&gt;dario@uni-parissud.fr&lt;/contact&gt;
  &lt;/entry&gt;
  &lt;entry&gt;
    <emph> kept after synchronization failure </emph>

    &lt;name&gt;Anthony&lt;/name&gt;
    &lt;contact&gt;tony@ehess.fr&lt;/contact&gt;
  &lt;/entry&gt;
&lt;/agenda-version&gt;

</eg></div3></div2><div2 id="use-case-soap"><head>Use Case "SOAP" - processing messages</head><p>This use case processes the message found in Example 1 of the <bibref ref="SOAPPrimer"/>
				to produce the message found in Example 2. The original message is not modified, but
				the new message is a modified copy of the original.</p><div3 id="use-case-soap-input-data"><head>Input Data</head><p>The input data is taken directly from Example 1 of the <bibref ref="SOAPPrimer"/>.</p><eg xml:space="preserve">
&lt;?xml version='1.0' ?&gt;
&lt;env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope"&gt; 
 &lt;env:Header&gt;
  &lt;m:reservation 
     xmlns:m="http://travelcompany.example.org/reservation" 
     env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
     env:mustUnderstand="true"&gt;
   &lt;m:reference&gt;uuid:093a2da1-q345-739r-ba5d-pqff98fe8j7d
   &lt;/m:reference&gt;
   &lt;m:dateAndTime&gt;2001-11-29T13:20:00.000-05:00
   &lt;/m:dateAndTime&gt;
  &lt;/m:reservation&gt;
  &lt;n:passenger 
    xmlns:n="http://mycompany.example.com/employees"
    env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
    env:mustUnderstand="true"&gt;
   &lt;n:name&gt;Åke Jógvan Øyvind&lt;/n:name&gt;
  &lt;/n:passenger&gt;
 &lt;/env:Header&gt;
 &lt;env:Body&gt;
  &lt;p:itinerary
    xmlns:p="http://travelcompany.example.org/reservation/travel"&gt;
   &lt;p:departure&gt;
     &lt;p:departing&gt;New York&lt;/p:departing&gt;
     &lt;p:arriving&gt;Los Angeles&lt;/p:arriving&gt;
     &lt;p:departureDate&gt;2001-12-14&lt;/p:departureDate&gt;
     &lt;p:departureTime&gt;late afternoon&lt;/p:departureTime&gt;
     &lt;p:seatPreference&gt;aisle&lt;/p:seatPreference&gt;
   &lt;/p:departure&gt;
   &lt;p:return&gt;
     &lt;p:departing&gt;Los Angeles&lt;/p:departing&gt;
     &lt;p:arriving&gt;New York&lt;/p:arriving&gt;
     &lt;p:departureDate&gt;2001-12-20&lt;/p:departureDate&gt;
     &lt;p:departureTime&gt;mid-morning&lt;/p:departureTime&gt;
     &lt;p:seatPreference/&gt;
   &lt;/p:return&gt;
  &lt;/p:itinerary&gt;
  &lt;q:lodging
   xmlns:q="http://travelcompany.example.org/reservation/hotels"&gt;
   &lt;q:preference&gt;none&lt;/q:preference&gt;
  &lt;/q:lodging&gt;
 &lt;/env:Body&gt;
&lt;/env:Envelope&gt;

</eg><p>Moreover, we assume the dynamic context associates to "airports" the following sequence:</p><eg xml:space="preserve">
&lt;AIRPORT&gt;&lt;CITY&gt;New York&lt;/CITY&gt;&lt;CODE&gt;JFK&lt;/CODE&gt;&lt;/AIRPORT&gt;
&lt;AIRPORT&gt;&lt;CITY&gt;New York&lt;/CITY&gt;&lt;CODE&gt;LGA&lt;/CODE&gt;&lt;/AIRPORT&gt;
&lt;AIRPORT&gt;&lt;CITY&gt;New York&lt;/CITY&gt;&lt;CODE&gt;EWR&lt;/CODE&gt;&lt;/AIRPORT&gt;
&lt;AIRPORT&gt;&lt;CITY&gt;Los Angeles&lt;/CITY&gt;&lt;CODE&gt;LAX&lt;/CODE&gt;&lt;/AIRPORT&gt;
&lt;AIRPORT&gt;&lt;CITY&gt;San Francisco&lt;/CITY&gt;&lt;CODE&gt;SFO&lt;/CODE&gt;&lt;/AIRPORT&gt;

</eg></div3><div3 id="soap-q1"><head>Q1</head><p>Check to see if the airports are unambiguously
					specified in the incoming message. Produce a SOAP
					response by transforming the incoming message, modifying
					the time and date to the current time, and replacing the body
          with a request to clarify which airport should be used for New York City.</p><p>
            <emph>Solution in the XQuery Update Facility:</emph>
          </p><eg xml:space="preserve">
declare namespace 
  env="http://www.w3.org/2003/05/soap-envelope";
declare namespace 
  m="http://travelcompany.example.org/reservation";
declare namespace 
  n="http://mycompany.example.com/employees";
declare namespace 
  p="http://travelcompany.example.org/reservation/travel";

(:  A clarification is needed only if there are no
 :  airports or more than one for a given city. If
 :  there is precisely one, there is no need to
 :  ask for information on that city.
 :)

declare function local:airportChoices($city as xs:string)
{
  let $airports := collection("airports")[CITY = $city]
  return
    if (count($airports) = 0)
    then 
       &lt;error&gt; No airports found for {$city}!&lt;/error&gt;
    else if (count($airports) &gt; 1) 
    then 
       &lt;airportChoices&gt;
        { 
          for $c in $airports/CODE
          return (string( $c ), " ")
        }
       &lt;/airportChoices&gt;
    else ()
};

(:  Make sure that each airport is unambiguous. If there is
 :  more than one airport for a city, ask for clarification.
 :
 :  The primer only shows the error condition, so it is not
 :  clear what to do if there are no errors. Here, we simply
 :  return the airports in the itinerary.
 :)

declare function local:airports($in as element(env:Envelope))
{
    let $departureDeparting := 
      $in//p:departure/p:departing
    let $departureDepartingAirports := 
      collection("airports")[CITY = $departureDeparting]
    let $departureArriving := 
      $in//p:departure/p:arriving
    let $departureArrivingAirports := 
      collection("airports")[CITY = $departureArriving]
    let $returnDeparting := 
      $in//p:return/p:departing
    let $returnDepartingAirports := 
      collection("airports")[CITY = $returnDeparting]
    let $returnArriving := 
      $in//p:return/p:arriving
    let $returnArrivingAirports := 
      collection("airports")[CITY = $returnArriving]
    return
       if ( count($departureDepartingAirports)=0 or 
            count($departureDepartingAirports)&gt;1 or 
            count($departureArrivingAirports)=0 or 
            count($departureArrivingAirports)&gt;1 or 
            count($returnDepartingAirports)=0 or 
            count($returnDepartingAirports)&gt;1 or 
            count($returnArrivingAirports)=0 or 
            count($returnArrivingAirports)&gt;1 )
         then
          &lt;p:itineraryClarification&gt;
            &lt;p:departure&gt;
              &lt;p:departing&gt;
                { local:airportChoices($departureDeparting) }
              &lt;/p:departing&gt;
              &lt;p:arriving&gt;
                { local:airportChoices($departureArriving) }
              &lt;/p:arriving&gt; 
            &lt;/p:departure&gt;
            &lt;p:return&gt;
              &lt;p:departing&gt;
                { local:airportChoices($returnDeparting) }
              &lt;/p:departing&gt;
              &lt;p:arriving&gt;
                { local:airportChoices($returnArriving) }
              &lt;/p:arriving&gt;
            &lt;/p:return&gt;
          &lt;/p:itineraryClarification&gt;
         else 
          &lt;p:itinerary&gt;
            &lt;p:departure&gt;
              &lt;p:departing&gt;{$departureDeparting}&lt;/p:departing&gt;
              &lt;p:arriving&gt;{$departureArriving}&lt;/p:arriving&gt;
            &lt;/p:departure&gt;
            &lt;p:return&gt;
              &lt;p:departing&gt;{$returnDeparting}&lt;/p:departing&gt;
              &lt;p:arriving&gt;{$returnArriving}&lt;/p:arriving&gt;
            &lt;/p:return&gt;
          &lt;/p:itinerary&gt;
};

declare variable $msg external;

copy $out := $msg/env:Envelope
modify (
  replace value of node $out//m:dateAndTime 
     with fn:current-dateTime(),
  replace node $out//env:Body 
  with &lt;env:Body&gt;
        { local:airports($out) }
       &lt;/env:Body&gt;
)
return $out
</eg><p>
            <emph>Expected Result (from <bibref ref="SOAPPrimer"/>):</emph>
          </p><eg xml:space="preserve">

&lt;env:Envelope 
   xmlns:env="http://www.w3.org/2003/05/soap-envelope"&gt; 
 &lt;env:Header&gt;
  &lt;m:reservation 
    xmlns:m="http://travelcompany.example.org/reservation" 
    env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
    env:mustUnderstand="true"&gt;
   &lt;m:reference&gt;uuid:093a2da1-q345-739r-ba5d-pqff98fe8j7d
   &lt;/m:reference&gt;
   &lt;m:dateAndTime&gt;2001-11-29T13:35:00.000-05:00
   &lt;/m:dateAndTime&gt; 
  &lt;/m:reservation&gt;
  &lt;n:passenger xmlns:n="http://mycompany.example.com/employees"
    env:role="http://www.w3.org/2003/05/soap-envelope/role/next"
    env:mustUnderstand="true"&gt;
   &lt;n:name&gt;Åke Jógvan Øyvind&lt;/n:name&gt;
  &lt;/n:passenger&gt;
 &lt;/env:Header&gt;
 &lt;env:Body&gt;
  &lt;p:itineraryClarification 
    xmlns:p="http://travelcompany.example.org/reservation/travel"&gt;
   &lt;p:departure&gt;
     &lt;p:departing&gt;
       &lt;p:airportChoices&gt;
          JFK LGA EWR 
       &lt;/p:airportChoices&gt;
     &lt;/p:departing&gt;
   &lt;/p:departure&gt;
   &lt;p:return&gt;
     &lt;p:arriving&gt;
       &lt;p:airportChoices&gt;
         JFK LGA EWR 
       &lt;/p:airportChoices&gt;
     &lt;/p:arriving&gt;
   &lt;/p:return&gt;  
  &lt;/p:itineraryClarification&gt;
 &lt;/env:Body&gt;
&lt;/env:Envelope&gt;

</eg></div3></div2><div2 id="use-case-namespaces"><head>Use Case "Namespaces" - moving elements from one namespace to another</head><p>This use case shows how (parts of)
				the elements in a document may be
				moved from one namespace to another.</p><div3 id="use-case-ns-desc"><head>Description</head><p>An agriculture company and an
				university research lab are making a
				joint proposal to the National
				Agricultural Research Agency. An
				initial proposal has been made by cut
				and paste out of snippets provided by
				the two partners. Before being
				submitted, the proposal has to be
				moved to the National Agricultural
				Research Agency (NARA) namespace.</p></div3><div3 id="use-case-ns-schema-grant-app"><head>Schema for the grant application</head><p>The grant application document must
				conform to the following schema:</p><eg xml:space="preserve">&lt;xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema' 
           targetNamespace="http://www.anr.fr/nara" 
	   elementFormDefault="qualified"&gt;
 &lt;xsd:element name='grant'&gt;
  &lt;xsd:complexType&gt;
   &lt;xsd:sequence&gt;
    &lt;xsd:element ref='name'/&gt;
    &lt;xsd:element ref='lab' minOccurs='0' maxOccurs='unbounded'/&gt;
   &lt;/xsd:sequence&gt;
  &lt;/xsd:complexType&gt;
 &lt;/xsd:element&gt;

 &lt;xsd:element name='lab'&gt;
  &lt;xsd:complexType&gt;
   &lt;xsd:sequence&gt;
    &lt;xsd:element ref='address' minOccurs='0' maxOccurs='1'/&gt;
    &lt;xsd:choice minOccurs='0' maxOccurs='unbounded'&gt;
     &lt;xsd:element ref='researcher'/&gt;
     &lt;xsd:element ref='PhD'/&gt;
     &lt;xsd:element ref='engineer'/&gt;
     &lt;xsd:element ref='lab' minOccurs="0" maxOccurs="unbounded"/&gt;
    &lt;/xsd:choice&gt;
   &lt;/xsd:sequence&gt;
   &lt;xsd:attribute name='name' type='xsd:string' use='required'/&gt;
  &lt;/xsd:complexType&gt;
 &lt;/xsd:element&gt;

 &lt;xsd:element name='PhD'&gt;
  &lt;xsd:complexType&gt;
   &lt;xsd:attribute name='advisor' type='xsd:IDREF' use='required'/&gt;
  &lt;/xsd:complexType&gt;
 &lt;/xsd:element&gt;

 &lt;xsd:element name='researcher'&gt;
  &lt;xsd:complexType&gt;
   &lt;xsd:attribute name='rid' type='xsd:ID' use='required'/&gt;
   &lt;xsd:attribute name='name' type='xsd:string' use='required'/&gt;
   &lt;xsd:attribute name='position' type='xsd:string' use='required'/&gt;
  &lt;/xsd:complexType&gt;
 &lt;/xsd:element&gt;

 &lt;xsd:element name='engineer'&gt;
  &lt;xsd:complexType&gt;
   &lt;xsd:attribute name='name' type='xsd:string' use='required'/&gt;
  &lt;/xsd:complexType&gt;
 &lt;/xsd:element&gt;
&lt;/xsd:schema&gt;

          </eg></div3><div3 id="ns-input-data"><head>Input Data</head><p>The initial draft produced by the participants,
					"grant.xml", has the following content. The use of namespaces
					reflects the cut-and-paste approach used to create it:</p><eg xml:space="preserve">
&lt;?xml version='1.0' ?&gt;
&lt;grant xmlns:nara="http://www.anr.fr/nara"&gt; 
  &lt;nara:lab name="AgroPlus"&gt; 
     &lt;nara:address&gt;Saclay, France&lt;/nara:address&gt; 
     &lt;nara:researcher rid="r1" name="Fred" 
       position="technical staff"/&gt; 
     &lt;nara:researcher rid="r2" name="Liz" 
       position="lab assistant" /&gt; 
     &lt;coop:PhD 
       xmlns:coop="http://www.gouv.fr/univ-industry-coop/" 
       name="Marie" advisor="r1"/&gt; 
     &lt;agro:lab xmlns:agro="http://www.agroplus.com" 
       name="Dairy Dept"&gt; 
       &lt;agro:engineer name="Marc"/&gt; 
     &lt;/agro:lab&gt; 
  &lt;/nara:lab&gt; 
  &lt;univ:lab xmlns:univ="http://www.education.gouv.fr" 
    name="Food Engineering Dept, Orsay U."&gt; 
    &lt;univ:address&gt;Orsay, France&lt;/univ:address&gt; 
    &lt;univ:researcher rid="r3" name="Henry" 
      position="associate professor"/&gt; 
    &lt;univ:PhD name="Robert" advisor="r3"/&gt; 
    &lt;PhD name="Julia" advisor="r1"/&gt; 
  &lt;/univ:lab&gt; 
&lt;/grant&gt; 	
</eg></div3><div3 id="ns-q1"><head>Q1</head><p>Move all elements into the NARA namespace
					("http://www.anr.fr/nara").</p><p>
            <emph>Solution in the XQuery Update Facility:</emph>
          </p><eg xml:space="preserve">
					
declare namespace nara = "http://www.anr.fr/nara";

for $e in doc("grant.xml")//*
where not (namespace-uri($e) eq "http://www.anr.fr/nara")
return 
  rename node $e 
      as QName("http://www.anr.fr/nara", 
               concat("nara:",local-name($e)))

</eg><p>
            <emph>Expected Result:</emph>
          </p><eg xml:space="preserve">

&lt;nara:grant xmlns:nara="http://www.anr.fr/nara"&gt;
 &lt;nara:lab name="AgroPlus"&gt;
   &lt;nara:address&gt;Saclay, France&lt;/nara:address&gt;
   &lt;nara:researcher rid="r1" name="Fred" 
     position="technical staff"/&gt;
   &lt;nara:researcher rid="r2" name="Liz" 
     position="lab assistant" /&gt;
   &lt;nara:PhD 
     xmlns:coop="http://www.gouv.fr/univ-industry-coop/"
     name="Marie" advisor="r1"/&gt;
    &lt;nara:lab name="Dairy Dept"&gt;
      &lt;nara:engineer name="Marc"/&gt;
   &lt;/nara:lab&gt;
 &lt;/nara:lab&gt;
 &lt;nara:lab name="Food Engineering Dept, Orsay U."&gt;
  &lt;nara:address&gt;Orsay, France&lt;/nara:address&gt;
  &lt;nara:researcher rid="r3" name="Henry" 
    position="associate professor"/&gt;
  &lt;nara:PhD name="Robert" advisor="r3"/&gt;
  &lt;nara:PhD name="Julia" advisor="r1"/&gt;
 &lt;/nara:lab&gt;
&lt;/nara:grant&gt;

</eg></div3></div2><div2 id="use-case-parts"><head>Use case "Parts" - modifying recursive documents</head><p>This use case illustrates modifications to documents having a recursive structure.</p><div3 id="use-case-parts-input"><head>Input data</head><p>Each update in this use case applies on the following documents. In these examples, we assume each update is applied to a fresh copy
of the original data.</p><p>Document "part-tree.xml":</p><eg xml:space="preserve">&lt;parttree&gt;
    &lt;part partid="0" name="car"&gt;
        &lt;part partid="1" name="engine"&gt;
            &lt;part partid="3" name="piston"/&gt;
        &lt;/part&gt;
        &lt;part partid="2" name="door"&gt;
            &lt;part partid="4" name="window"/&gt;
            &lt;part partid="5" name="lock"/&gt;
        &lt;/part&gt;
    &lt;/part&gt;
    &lt;part partid="10" name="skateboard"&gt;
        &lt;part partid="11" name="board"/&gt;
        &lt;part partid="12" name="wheel"/&gt;
    &lt;/part&gt;
    &lt;part partid="20" name="canoe"/&gt;
&lt;/parttree&gt;
          </eg><p>Document "part-list.xml":</p><eg xml:space="preserve">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;partlist&gt;
  &lt;part partid="0" name="car"/&gt;
  &lt;part partid="1" partof="0" name="engine"/&gt;
  &lt;part partid="2" partof="0" name="door"/&gt;
  &lt;part partid="3" partof="1" name="piston"/&gt;
  &lt;part partid="4" partof="2" name="window"/&gt;
  &lt;part partid="5" partof="2" name="lock"/&gt;
  &lt;part partid="10" name="skateboard"/&gt;
  &lt;part partid="11" partof="10" name="board"/&gt;
  &lt;part partid="12" partof="10" name="wheel"/&gt;
  &lt;part partid="20" name="canoe"/&gt;
&lt;/partlist&gt;
          </eg></div3><div3 id="use-case-parts-q1"><head>Q1</head><p>Delete all parts in "part-tree.xml".</p><p>
            <emph>Solution in the XQuery Update Facility:</emph>
          </p><eg xml:space="preserve">delete nodes doc("part-tree.xml")//part</eg><p>
            <emph>Expected resulting document "part-tree.xml":</emph>
          </p><eg xml:space="preserve">&lt;parttree/&gt;</eg></div3><div3 id="use-case-parts-q2"><head>Q2</head><p>Delete all parts belonging to a car in "part-tree.xml", leaving
the car itself.</p><p>
            <emph>Solution in the XQuery Update Facility:</emph>
          </p><eg xml:space="preserve">delete nodes doc("part-tree.xml")//part[@name="car"]//part</eg><p>
            <emph>Expected resulting document "part-tree.xml":</emph>
          </p><eg xml:space="preserve">&lt;parttree&gt;
    &lt;part partid="0" name="car"/&gt;
    &lt;part partid="10" name="skateboard"&gt;
        &lt;part partid="11" name="board"/&gt;
        &lt;part partid="12" name="wheel"/&gt;
    &lt;/part&gt;
    &lt;part partid="20" name="canoe"/&gt;
&lt;/parttree&gt;
          </eg></div3><div3 id="use-case-parts-q3"><head>Q3</head><p>Delete all parts belonging to a car in "part-list.xml", leaving
the car itself.</p><p>
            <emph>Solution 1 in the XQuery Update Facility (leveraging "part-tree.xml"):</emph>
          </p><eg xml:space="preserve">for $pt in doc("part-tree.xml")//part[@name="car"]//part, 
    $pl in doc("part-list.xml")//part
where $pt/@partid eq $pl/@partid
return 
  delete nodes $pl
          </eg><p>
            <emph>Solution 2 (using a recursive updating function):</emph>
          </p><eg xml:space="preserve">declare updating function 
    local:delete-subtree($p as element(part))
  {
      for $child in doc("part-list.xml")//part
      where $p/@partid eq $child/@partof
      return (
        delete nodes $child,
        local:delete-subtree($child)
      )
  };

for $p in doc("part-list.xml")//part[@name="car"]
return 
  local:delete-subtree($p)

          </eg><note><p>Because this data is not covered by a schema, an implementation that supports static typing will raise an error for the comparison <code>$p/@partid eq $child/@partof</code>. This can be solved by creating a schema for the data and importing it into the query.</p></note><p>
            <emph>Expected Result:</emph>
          </p><eg xml:space="preserve">&lt;partlist&gt;
  &lt;part partid="0" name="car"/&gt;
  &lt;part partid="10" name="skateboard"/&gt;
  &lt;part partid="11" partof="10" name="board"/&gt;
  &lt;part partid="12" partof="10" name="wheel"/&gt;
  &lt;part partid="20" name="canoe"/&gt;
&lt;/partlist&gt;
          </eg></div3><div3 id="use-case-parts-q4"><head>Q4</head><p>Add a radio to the car in "part-tree.xml", using a part number
that hasn't been taken.</p><p>
            <emph>Solution in the XQuery Update Facility:</emph>
          </p><eg xml:space="preserve">let $next := max(doc("part-tree.xml")//@partid) + 1
  return
    insert nodes &lt;part partid="{$next}" name="radio"/&gt;
       into 
       doc("part-tree.xml")//part[@partid=0 and @name="car"]

          </eg><p>
            <emph>Expected Result:</emph>
          </p><eg xml:space="preserve">&lt;parttree&gt;
    &lt;part partid="0" name="car"&gt;
        &lt;part partid="21" name="radio"/&gt;
        &lt;part partid="1" name="engine"&gt;
            &lt;part partid="3" name="piston"/&gt;
        &lt;/part&gt;
        &lt;part partid="2" name="door"&gt;
            &lt;part partid="4" name="window"/&gt;
            &lt;part partid="5" name="lock"/&gt;
        &lt;/part&gt;
    &lt;/part&gt;
    &lt;part partid="10" name="skateboard"&gt;
        &lt;part partid="11" name="board"/&gt;
        &lt;part partid="12" name="wheel"/&gt;
    &lt;/part&gt;
    &lt;part partid="20" name="canoe"/&gt;
&lt;/parttree&gt;

          </eg><p>
            <emph>Note:</emph>The position of the new element with respect to its siblings is
implementation-dependent. If position is significant, and the user
wants to ensure the element appears last, for example, "as last" should be used, as
in the following query:</p><eg xml:space="preserve">let $next := max(doc("part-tree.xml")//@partid) + 1
  return
    insert nodes &lt;part partid="{$next}" name="radio"/&gt;
       as last
       into doc("part-tree.xml")//part[@partid=0 and @name="car"]
          </eg></div3><div3 id="use-case-parts-q6"><head>Q6</head><p>The head office has adopted a new numbering scheme. In
"part-tree.xml", add 1000 to all part numbers for cars, 2000 to all
part numbers for skateboards, and 3000 to all part numbers for canoes.</p><p>
            <emph>Solution in the XQuery Update Facility:</emph>
          </p><eg xml:space="preserve">for $keyword at $i in ("car", "skateboard", "canoe"),
    $parent in doc("part-tree.xml")//part[@name=$keyword]
let $descendants := $parent//part
for $p in ($parent, $descendants)
return 
  replace value of node $p/@partid with $i*1000+$p/@partid

          </eg><p>
            <emph>Expected result:</emph>
          </p><eg xml:space="preserve">&lt;parttree&gt;
    &lt;part partid="1000" name="car"&gt;
        &lt;part partid="1021" name="radio"/&gt;
        &lt;part partid="1001" name="engine"&gt;
            &lt;part partid="1003" name="piston"/&gt;
        &lt;/part&gt;
        &lt;part partid="1002" name="door"&gt;
            &lt;part partid="1004" name="window"/&gt;
            &lt;part partid="1005" name="lock"/&gt;
        &lt;/part&gt;
    &lt;/part&gt;
    &lt;part partid="2010" name="skateboard"&gt;
        &lt;part partid="2011" name="board"/&gt;
        &lt;part partid="2012" name="wheel"/&gt;
    &lt;/part&gt;
    &lt;part partid="3020" name="canoe"/&gt;
&lt;/parttree&gt;
          </eg></div3></div2><div2 id="use-case-nil"><head>Use case "Nil"</head><p>This use case demonstrates transform expressions which construct
modified copies of some data, which must remain valid according to the
original schema.  In this use case, keeping the modified copy valid
requires adding an xsi:nil attribute.</p><div3 id="use-case-nil-schema"><head>XML Schema</head><p>A employees data set is described by the following XML Schema:</p><eg xml:space="preserve">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;xsd:schema 
  targetNamespace="http://www.example.com/employees"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;xsd:element name="employees"&gt;
    &lt;xsd:complexType&gt;
      &lt;xsd:element name="employee" minOccurs="0" 
        maxOccurs="unbounded"&gt;
        &lt;xsd:complexType&gt;
          &lt;xsd:attribute name="mgr" type="xsd:boolean" 
          default="false"/&gt;
          &lt;xsd:attribute name="dept" type="xsd:string"/&gt;
          &lt;xsd:sequence&gt;
            &lt;xsd:element name="name" type="xsd:string"/&gt;
            &lt;xsd:element name="salary" type="xsd:decimal" 
              nillable="true"/&gt;
          &lt;/xsd:sequence&gt;
        &lt;/xsd:complexType&gt;
      &lt;/xsd:element&gt;
    &lt;/xsd:complexType&gt;
  &lt;/xsd:element&gt;
&lt;/xsd:schema&gt;

          </eg></div3><div3 id="use-case-nil-input-data"><head>Sample input data ("employees.xml")</head><eg xml:space="preserve">&lt;employees&gt;
  &lt;employee mgr="true" dept="Toys"&gt;
    &lt;name&gt;Smith&lt;/name&gt;
    &lt;salary&gt;100000&lt;/salary&gt;
  &lt;/employee&gt;
  &lt;employee dept="Toys"&gt;
    &lt;name&gt;Jones&lt;/name&gt;
    &lt;salary&gt;60000&lt;/salary&gt;
  &lt;/employee&gt;
  &lt;employee mgr="true" dept="Shoes"&gt;
    &lt;name&gt;Roberts&lt;/name&gt;
    &lt;salary&gt;150000&lt;/salary&gt;
  &lt;/employee&gt;
&lt;/employees&gt;
          </eg></div3><div3 id="use-case-nil-q1"><head>Q1</head><p>Return all managers, omitting their salaries for confidentiality
reasons. The returned document must be valid according to its XML
Schema, so the query adds an xsi:nil attribute with value "true" to
the salary element.</p><p>
            <emph>Solution in the XQuery Update Facility:</emph>
          </p><eg xml:space="preserve">for $e in doc("employees.xml")//employee
where $e/@manager = true()
return
   copy $emp := $e
   modify (
     replace value of node $emp/salary with "" ,
     insert nodes (attribute xsi:nil {"true"}) 
        into $emp/salary
   )
   return $emp
          </eg><p>
            <emph>Expected result:</emph>
          </p><eg xml:space="preserve">&lt;employee mgr="true" dept="Toys"&gt;
  &lt;name&gt;Smith&lt;/name&gt;
  &lt;salary xsi:nil="true"/&gt;
&lt;/employee&gt;
&lt;employee mgr="true" dept="Shoes"&gt;
  &lt;name&gt;Roberts&lt;/name&gt;
  &lt;salary xsi:nil="true"/&gt;
&lt;/employee&gt;
          </eg></div3></div2></div1></body><back><div1 id="references"><head>Normative References</head><blist><bibl xmlns:xlink="http://www.w3.org/1999/xlink" key="XQuery 1.0" id="xquery" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" key="XML Query Use Cases" id="xquery-use-cases" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" key="XQuery Update Facility 1.0 Requirements" id="xquery-update-10-requirements" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" key="XQuery Update Facility 1.0" id="xquery-update-10" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/><bibl xmlns:xlink="http://www.w3.org/1999/xlink" key="SOAP Version 1.2 Part 0:Primer" id="SOAPPrimer" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">World Wide
Web Consortium. <emph>SOAP Version 1.2 Part 0: Primer</emph>
W3C Recommendation 24 June 2003. See <loc href="http://www.w3.org/TR/2003/REC-soap12-part0-20030624/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest"/>.</bibl></blist></div1><inform-div1 id="id-revisions-log"><head>Revision Log</head><p>This log records the substantive changes that have been made to this document since the Working Draft of 8 May 2006. 
      Minor editorial changes are not included in this log.</p><div2 id="id-log-pending"><!-- Change to the date of the next publication when known --><head>Changes in internal WD</head><ulist><item><p>Clarified that the "application constraint" in 1.1.4.8 Q8 is a database integrity constraint,
            and added the constraint to the description of the data, in response to
            http://www.w3.org/Bugs/Public/show_bug.cgi?id=3796#add_comment.</p></item></ulist></div2><div2 id="id-log-28aug2007"><head>28 Aug 2007 Publication</head><ulist><item><p>Clarified that updates for Use Case "R" are cumulative (see http://www.w3.org/Bugs/Public/show_bug.cgi?id=3567#c1).</p></item><item><p>Fixed update conflict in Use Case "Address", and clarified that some things would be easier using updates together with the Scripting Extensions (see http://www.w3.org/Bugs/Public/show_bug.cgi?id=3578#c1).</p></item><item><p>Fixed several errors in Use Case "SOAP" (see http://www.w3.org/Bugs/Public/show_bug.cgi?id=3578#c3).</p></item><item><p>Fixed Use Case "R" Q4 so that it tests to see whether a rating already exists (see http://www.w3.org/Bugs/Public/show_bug.cgi?id=3578#c4).</p></item><item><p>Fixed Use Case "Parts" Q3, fixing several bugs, see (http://www.w3.org/Bugs/Public/show_bug.cgi?id=3578#c6).</p></item></ulist></div2></inform-div1></back></spec>